{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","views/user/login.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","validateEmail","value","error","test","connect","authUser","loading","loginUserAction","loginUser","history","useState","email","password","useEffect","NotificationManager","warning","initialValues","visible","setVisiblity","InputType","xxs","md","id","onSubmit","values","errors","touched","name","validate","type","onClick","visiblity","to","color","size"],"mappings":"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","file":"static/js/user-login.b9411b4c.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Button, Card, CardTitle, FormGroup, Label, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { NotificationManager } from '../../components/common/react-notifications';\nimport { loginUser } from '../../redux/actions';\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\n\n/*  const validatePassword = (value) => {\n  let error;\n  const lowerCaseLetters = /[a-z]/g;\n  const upperCaseLetters = /[A-Z]/g;\n  const numbers = /[0-9]/g;\n\n  if (!value) {\n    error = 'Please enter your password.';\n  } else if (!value.match(lowerCaseLetters)) {\n    error = 'Please enter atleast one lowercase letter.';\n  } else if (!value.match(upperCaseLetters)) {\n    error = 'Please enter atleast one uppercase letter.';\n  } else if (!value.match(numbers)) {\n    error = 'Please enter atleast one number.';\n  } else if (value.length >= 8) {\n    error = 'Please enter minimum 6 characters.';\n  }\n\n  return error;\n};  */\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst Login = ({ history, loading, error, loginUserAction }) => {\n  const [email] = useState('');\n  const [password] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(error, 'Login Error', 3000, null, null, '');\n    }\n  }, [loading, error]);\n\n  const onUserLogin = (values) => {\n    if (!loading) {\n      if (values.email !== '' && values.password !== '') {\n        loginUserAction(values, history);\n      }\n    }\n  };\n\n  const initialValues = { email, password };\n\n  const [visible, setVisiblity] = useState(false);\n\n  const InputType = visible ? 'text' : 'password';\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">Please use your credentials to login.</p>\n          </div>\n          <div className=\"form-side\">\n            <span className=\"logo-single\" />\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.login-title\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      validate={validateEmail}\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.email}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <FormGroup className=\"form-group d-flex mb-3 has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      type={InputType}\n                      name=\"password\"\n                    />\n                    <div className=\"input-group-append\">\n                      <span className=\"input-group-text py-0\">\n                        <Button\n                          id=\"toggle-icon-button\"\n                          onClick={() =>\n                            setVisiblity((visiblity) => !visiblity)\n                          }\n                        >\n                          <i\n                            id=\"toggle-icon\"\n                            className={\n                              visible\n                                ? 'fa-solid fa-eye-slash'\n                                : 'fa-solid fa-eye'\n                            }\n                          />\n                        </Button>\n                      </span>\n                    </div>\n                    {errors.password && touched.password && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.password}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/forgot-password\">\n                      <IntlMessages id=\"user.forgot-password-question\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.login-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                  <Separator className=\"my-4\" />\n                  If you are not a member, please{' '}\n                  <NavLink to=\"/user/register\">\n                    <u>register</u>\n                  </NavLink>\n                  .\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, error } = authUser;\n  return { loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  loginUserAction: loginUser,\n})(Login);\n"],"sourceRoot":""}