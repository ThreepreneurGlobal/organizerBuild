{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","hooks/use-request.js","views/user/reset-password.js","views/user/reset-password-otp.js","views/user/verify-otp.js","views/user/complete-registration/profile-form.js","views/user/complete-registration/index.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","resetPasswordAction","resetPassword","history","OTP","useEffect","NotificationManager","warning","initialValues","xxs","md","to","id","validate","onSubmit","touched","name","type","color","size","mapActionToProps","verifyOTPAction","verifyOTP","ResendButton","load","email","window","localStorage","getItem","location","reload","doRequest","onClick","date","Date","now","renderer","hours","minutes","seconds","completed","disabled","zeroPad","MemoizedResendOTPButton","memo","validateName","value","length","validatePhoneNumber","replace","MyTextArea","useField","field","meta","ProfileForm","addProfileAction","currentUser","Card","CardBody","CardTitle","IntlMessages","phoneNumber","phone_number","profile","userID","contactNo","FormGroup","Label","rows","Button","addProfileData","message","orgName","fullName","about","Row"],"mappings":"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","file":"static/js/user-reset-password.a80e3880.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import { useState } from 'react';\nimport instance from '../helpers/axiosInstance';\nimport { log } from '../helpers/Utils';\n\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\n  const [responseData, setData] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const doRequest = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await instance({\n        url,\n        method,\n        headers,\n        data,\n      });\n\n      if (response.data.success) {\n        if (nextSuccess) {\n          nextSuccess();\n        }\n        setLoading(false);\n        setData(response.data.data);\n      } else {\n        if (nextError) {\n          nextError(response.data.error);\n        }\n        setLoading(false);\n        setError(response.data.error);\n      }\n    } catch (err) {\n      log(err);\n      setLoading(false);\n      setError(err);\n    }\n  };\n\n  return [doRequest, loading, error, responseData];\n};\n\nexport default useRequest;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { resetPassword } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validateNewPassword = (values) => {\n  const { newPassword, newPasswordAgain } = values;\n  const errors = {};\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\n    errors.newPasswordAgain = 'Please check your new password';\n  }\n  return errors;\n};\n\nconst ResetPassword = ({\n  history,\n  loading,\n  error,\n  resetPasswordAction,\n}) => {\n  const [OTP] = useState('');\n  const [newPassword] = useState('');\n  const [newPasswordAgain] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'Forgot Password Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else if (!loading && newPassword === 'success')\n      NotificationManager.success(\n        'Please login with your new password.',\n        'Reset Password Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n  }, [error, loading, newPassword]);\n\n  const onResetPassword = (values) => {\n    if (!loading) {\n        if (values.newPassword !== '' && values.OTP !== '') {\n          resetPasswordAction({\n            OTP : values.OTP,\n            newPassword: values.newPassword,\n            history,\n          });\n        }\n      \n    }\n  };\n\n  const initialValues = { OTP, newPassword, newPasswordAgain };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please use your e-mail to reset your password. <br />\n              If you are not a member, please{' '}\n              <NavLink to=\"/register\" className=\"white\">\n                register\n              </NavLink>\n              .\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.reset-password\" />\n            </CardTitle>\n\n            <Formik\n              validate={validateNewPassword}\n              initialValues={initialValues}\n              onSubmit={onResetPassword}\n            >\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.otp\" />\n                    </Label>\n                    <Field \n                      className=\"form-control\" \n                      name=\"OTP\" \n                    />\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPassword\"\n                      type=\"password\"\n                    />\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password-again\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPasswordAgain\"\n                      type=\"password\"\n                    />\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.newPasswordAgain}\n                      </div>\n                    )}\n                  </FormGroup>\n\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/login\">\n                      <IntlMessages id=\"user.login-title\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.reset-password-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\n  return { newPassword, resetPasswordCode, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  resetPasswordAction: resetPassword,\n})(ResetPassword);\n","import React, { /* memo, */ useEffect, useState } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { Formik, Form, Field } from 'formik';\n// import Countdown, { zeroPad } from 'react-countdown';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { verifyOTP } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n// import useRequest from '../../hooks/use-request';\nimport resetPassword from './reset-password';\n// const ResendButton = () => {\n//   const [doRequest] = useRequest({\n//     url: '/resendOtp',\n//     method: 'POST',\n//     data: {\n//       email: '',\n//     },\n//     nextSuccess: () => {\n//       NotificationManager.success(\n//         'OTP reset Successful!',\n//         'Verify OTP Success',\n//         3000,\n//         null,\n//         null,\n//         ''\n//       );\n//     },\n//   });\n//   const onClick = () => doRequest();\n//   const renderer = ({ hours, minutes, seconds, completed }) => {\n//     // Render a countdown\n//     return (\n//       <Button\n//         className=\"btn-shadow btn btn-primary btn-lg mx-2\"\n//         onClick={completed ? onClick : () => {}}\n//         disabled={!completed}\n//       >\n//         {completed\n//           ? 'Resend OTP'\n//           : `${zeroPad(hours)}:${zeroPad(minutes)}:${zeroPad(seconds)}`}\n//       </Button>\n//     );\n//   };\n\n//   return <Countdown date={Date.now() + 30000} renderer={renderer} />;\n// };\n\n// // const MemoizedResendOTPButton = memo(ResendButton);\n\nconst VerifyOTP = ({ loading, error }) => {\n  const [OTP] = useState('');\n\n  const onVerifyOTP = (values) => {\n    if (values.OTP !== '') {\n      <resetPassword \n        OTP = {values.OTP}\n      />\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(\n        error,\n        'OTP Verification Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [error]);\n\n  const initialValues = { OTP };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please enter the OTP sent to your email. <br />\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <span className=\"logo-single\" />\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.verify-otp\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.otp\" />\n                    </Label>\n                    <Field className=\"form-control\" name=\"OTP\" />\n                    {errors.OTP && touched.OTP && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.OTP}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    \n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.verify-otp-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { OTP, loading, error } = authUser;\n  return { OTP, loading, error };\n};\n\nconst mapActionToProps = {\n  verifyOTPAction: verifyOTP,\n};\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { Formik, Form, Field } from 'formik';\nimport Countdown, { zeroPad } from 'react-countdown';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { verifyOTP } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\nimport useRequest from '../../hooks/use-request';\n\nconst ResendButton = () => {\n  const load = {\n    email: window.localStorage.getItem('_email'),\n  };\n  const [doRequest] = useRequest({\n    url: '/auth/resendOtp',\n    method: 'POST',\n    data: load,\n    nextSuccess: () => {\n      NotificationManager.success(\n        'OTP resend Successful!',\n        'Verify OTP Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n      window.location.reload();\n    },\n  });\n  const onClick = () => {\n    doRequest();\n  };\n\n  const renderer = ({ hours, minutes, seconds, completed }) => {\n    // Render a countdown\n    return (\n      <Button\n        className=\"btn-shadow btn btn-primary btn-lg mx-2\"\n        onClick={completed ? onClick : () => {}}\n        disabled={!completed}\n      >\n        {completed\n          ? 'Resend OTP'\n          : `${zeroPad(hours)}:${zeroPad(minutes)}:${zeroPad(seconds)}`}\n      </Button>\n    );\n  };\n\n  return <Countdown date={Date.now() + 30000} renderer={renderer} />;\n};\n\nconst MemoizedResendOTPButton = memo(ResendButton);\n\nconst VerifyOTP = ({ history, loading, error, verifyOTPAction }) => {\n  const [OTP] = useState('');\n\n  const onVerifyOTP = (values) => {\n    if (values.OTP !== '') {\n      verifyOTPAction({ ...values, history });\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(\n        error,\n        'OTP Verification Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [error]);\n\n  const initialValues = { OTP };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please enter the OTP sent to your email. <br />\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <span className=\"logo-single\" />\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.verify-otp\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.otp\" />\n                    </Label>\n                    <Field className=\"form-control\" name=\"OTP\" />\n                    {errors.OTP && touched.OTP && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.OTP}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    <MemoizedResendOTPButton />\n\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.verify-otp-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { OTP, loading, error } = authUser;\n  return { OTP, loading, error };\n};\n\nconst mapActionToProps = {\n  verifyOTPAction: verifyOTP,\n};\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\n","import React from 'react';\nimport { Formik, Form, Field,useField } from 'formik';\nimport {\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Button,\n  CardTitle,\n} from 'reactstrap';\n// import { useAsync } from 'react-async-hook';\nimport IntlMessages from '../../../helpers/IntlMessages';\n// import { getProfileDataAsync,getProfileData } from '../../../helpers/Utils';\n\nconst validateName = (value) => {\n  let error;\n  \n  if (!value) {\n    error = 'Please enter your name';\n  } else if (value.length < 2) {\n    error = 'Value must be longer than 2 characters';\n  }\n  return error;\n};\n\nconst validatePhoneNumber = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your phone number.';\n  } else {\n    const phone = value.replace(/[^0-9]/g, '');\n    if (phone.length > 13) {\n      error = 'Invalid Number, Enter 13 digits.';\n    }\n  }\n  return error;\n};\nconst MyTextArea = ({ ...props}) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return (\n      <>\n         \n          <textarea className=\"text-area\" {...field} {...props} />\n          {meta.touched && meta.error ? (\n              <div className=\"error\">{meta.error}</div>\n          ) : null}\n      </>\n  );\n};\n\nconst ProfileForm = ({\n  addProfileAction,\n  history,\n  currentUser,\n  initialValues,\n  loading,\n}) => {\n  const onAddProfile = (values) => {\n    const { id, phone_number: phoneNumber } = currentUser;\n    const profile = {\n      ...values,\n      userID: id,\n      contactNo: phoneNumber,\n    };\n\n    addProfileAction({ profile, history });\n  };\n\n  return (\n    <Card>\n      <CardBody className=\"wizard-basic-step\">\n        <CardTitle className=\"mb-4\">\n          <h2 className=\"lead\">\n            <IntlMessages id=\"user.profile-form\" />\n          </h2>\n        </CardTitle>\n        <Formik initialValues={initialValues} onSubmit={onAddProfile}>\n          {({ errors, touched }) => (\n            <Form className=\"av-tooltip tooltip-label-right\">\n              <FormGroup>\n                <Label>\n                  <IntlMessages id=\"user.org-name\" />\n                </Label>\n                <Field\n                  className=\"form-control\"\n                  name=\"orgName\"\n                  validate={validateName}\n                />\n                {errors.name && touched.name && (\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\n                )}\n              </FormGroup>\n\n              <FormGroup>\n                <Label>\n                  <IntlMessages id=\"user.full-name\" />\n                </Label>\n                <Field\n                  className=\"form-control\"\n                  name=\"fullName\"\n                  validate={validateName}\n                />\n                {errors.name && touched.name && (\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\n                )}\n              </FormGroup>\n\n              <FormGroup>\n                <Label>\n                  <IntlMessages id=\"Contact Number\" />\n                </Label>\n                <Field\n                  className=\"form-control\"\n                  name=\"contactNo\"\n                  validate={validatePhoneNumber}\n                />\n                {errors.contactNo && touched.contactNo && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.contactNo}\n                      </div>\n                    )}\n              </FormGroup>\n\n          <FormGroup>\n            <Label>\n              <IntlMessages id=\"Organization Bio\" />\n            </Label>\n           \n            <MyTextArea \n               className=\"form-control\"\n               name=\"about\"\n               rows=\"6\"\n            />\n                  \n            {errors.name && touched.name && (\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\n                )}\n          </FormGroup>\n\n              <div className=\"d-flex justify-content-center align-items-center\">\n                <Button\n                  color=\"primary\"\n                  type=\"submit\"\n                  className={`btn-shadow btn-multiple-state ${\n                    loading ? 'show-spinner' : ''\n                  }`}\n                  size=\"lg\"\n                >\n                  <span className=\"spinner d-inline-block\">\n                    <span className=\"bounce1\" />\n                    <span className=\"bounce2\" />\n                    <span className=\"bounce3\" />\n                  </span>\n                  <span className=\"label\">\n                    <IntlMessages id=\"forms.submit\" />\n                  </span>\n                </Button>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ProfileForm;\n","import React, { useEffect, useState } from 'react';\nimport { /* Card, CardBody, */ Row } from 'reactstrap';\nimport { Wizard, /* Steps, Step */} from 'react-albus';\nimport { connect } from 'react-redux';\nimport { addProfileData } from '../../../redux/actions';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport ProfileForm from './profile-form';\nimport { Colxx } from '../../../components/common/CustomBootstrap';\n// import TopNavigation from '../../../components/wizard/TopNavigation';\n// import ThankYouForm from './thank-you-form';\n// import BottomNavigation from '../../../components/wizard/BottomNavigation';\n\nconst CompleteRegistration = ({\n  history,\n  loading,\n  error,\n  currentUser,\n  addProfileAction,\n  message,\n}) => {\n  const [orgName] = useState('');\n  const [fullName] = useState('');\n  const [contactNo] = useState('');\n  const [about] = useState('');\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(\n        error,\n        'Profile Add Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n    if (!loading && message === 'profile-add-success') {\n      NotificationManager.success(\n        'Click next',\n        'Profile Added Successfully',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [loading, error, message]);\n\n  const initialValues = {\n    orgName,\n    fullName,\n    contactNo,\n    about\n  };\n\n  // const topNavClick = (stepItem, push) => {\n  //   push(stepItem.id);\n  // };\n\n  // const onClickNext = (goToNext, steps, step) => {\n  //   // eslint-disable-next-line no-param-reassign\n  //   step.isDone = true;\n  //   if (steps.length - 1 <= steps.indexOf(step)) {\n  //     return;\n  //   }\n  //   goToNext();\n  // };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"8\" className=\"mx-auto my-auto wizard wizard-default\">\n        <Wizard>\n       \n              <ProfileForm\n                addProfileAction={addProfileAction}\n                history={history}\n                currentUser={currentUser}\n                initialValues={initialValues}\n                loading={loading}\n                message={message}\n              />\n\n            {/* <Card className=\"mt-4\">\n            <CardBody>\n              <BottomNavigation\n                className=\"justify-content-end\"\n                onClickNext={onClickNext}\n                nextLabel=\"Next\"\n                showPrevious={false}\n              />\n            </CardBody>\n          </Card> */}\n          \n            {/* <Step id=\"thank-you\">\n              <ThankYouForm \n                currentUser={currentUser}\n              />\n            </Step> */}\n          \n\n\n        </Wizard>\n      </Colxx>\n    </Row>\n  );\n};\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, error, message, currentUser } = authUser;\n  return { loading, error, message, currentUser };\n};\n\nconst mapActionToProps = {\n  addProfileAction: addProfileData,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(CompleteRegistration);\n"],"sourceRoot":""}