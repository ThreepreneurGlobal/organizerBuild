{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","views/user/register.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","validatePassword","value","error","lowerCaseLetters","match","length","console","log","validateEmail","test","validatePhoneNumber","replace","connect","authUser","loading","registerUserAction","registerUser","history","useState","email","password","phone","useEffect","NotificationManager","initialValues","xxs","md","id","onSubmit","values","errors","touched","name","validate","type","color","size","to"],"mappings":"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","file":"static/js/user-register.546265ca.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import React, { useEffect, useState } from 'react';\r\nimport { Row, Card, CardTitle, FormGroup, Label, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { registerUser } from '../../redux/actions';\r\n\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n\r\nconst validatePassword = (value) => {\r\n  let error;\r\n  const lowerCaseLetters = /[a-z]/g;\r\n  const upperCaseLetters = /[A-Z]/g;\r\n  const numbers = /[0-9]/g;\r\n\r\n  if (!value) {\r\n    error = 'Please enter your password.';\r\n  } else if (!value.match(lowerCaseLetters)) {\r\n    error = 'Please enter atleast one lowercase letter.';\r\n  } else if (!value.match(upperCaseLetters)) {\r\n    error = 'Please enter atleast one uppercase letter.';\r\n  } else if (!value.match(numbers)) {\r\n    error = 'Please enter atleast one number.';\r\n  } else if (value.length >= 8) {\r\n    error = 'Please enter minimum 6 characters.';\r\n  }\r\n\r\n  console.log(error, !!value.match(lowerCaseLetters));\r\n  return error;\r\n};\r\n\r\nconst validateEmail = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your email address';\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = 'Invalid email address';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validatePhoneNumber = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your phone number.';\r\n  } else {\r\n    const phone = value.replace(/[^0-9]/g, '');\r\n    if (phone.length !== 10) {\r\n      error = 'Invalid Number, Enter 10 digits.';\r\n    }\r\n  }\r\n  return error;\r\n};\r\n\r\nconst Register = ({ history, loading, error, registerUserAction }) => {\r\n  const [email] = useState('');\r\n  const [password] = useState('');\r\n  const [phone] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.error(\r\n        error,\r\n        'Registration Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }, [loading, error]);\r\n\r\n  const onUserRegister = (values) => {\r\n    if (values.email !== '' && values.password !== '' && values.phone !== '') {\r\n      registerUserAction(values, history);\r\n    }\r\n  };\r\n\r\n  const initialValues = { email, password, phone };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">Please use this form to register.</p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <span className=\"logo-single\" />\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.register\" />\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onUserRegister}>\r\n              {({ errors, touched }) => (\r\n                <Form>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.email\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"email\"\r\n                      validate={validateEmail}\r\n                    />\r\n                    {errors.email && touched.email && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.email}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.phone-number\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"phone\"\r\n                      validate={validatePhoneNumber}\r\n                    />\r\n                    {errors.phone && touched.phone && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.phone}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      validate={validatePassword}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.password}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-end align-items-center\">\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.register-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                  <Separator className=\"my-4\" />\r\n                  If you are a member, please{' '}\r\n                  <NavLink to=\"/user/login\">\r\n                    <u>login</u>\r\n                  </NavLink>\r\n                  .\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { loading, error } = authUser;\r\n  return { loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  registerUserAction: registerUser,\r\n})(Register);\r\n"],"sourceRoot":""}