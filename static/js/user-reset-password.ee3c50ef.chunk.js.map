{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","../node_modules/reactstrap/es/CardBody.js","views/user/reset-password.js","views/user/verify-otp.js","views/user/complete-registration.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","propTypes","tag","tagPropType","PropTypes","string","cssModule","object","innerRef","oneOfType","func","CardBody","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","loading","error","resetPasswordAction","resetPassword","location","history","useState","useEffect","NotificationManager","warning","success","initialValues","xxs","md","to","id","validate","onSubmit","oobCode","URLSearchParams","search","get","touched","name","type","color","size","mapActionToProps","verifyOTPAction","verifyOTP","OTP","validateName","value","length","addProfileAction","addProfileData","currentUser","fullName","phoneNumber","phone_number","profile","userID","contactNo"],"mappings":"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","file":"static/js/user-reset-password.ee3c50ef.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { resetPassword } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validateNewPassword = (values) => {\n  const { newPassword, newPasswordAgain } = values;\n  const errors = {};\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\n    errors.newPasswordAgain = 'Please check your new password';\n  }\n  return errors;\n};\n\nconst ResetPassword = ({\n  location,\n  history,\n  loading,\n  error,\n  resetPasswordAction,\n}) => {\n  const [newPassword] = useState('');\n  const [newPasswordAgain] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'Forgot Password Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else if (!loading && newPassword === 'success')\n      NotificationManager.success(\n        'Please login with your new password.',\n        'Reset Password Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n  }, [error, loading, newPassword]);\n\n  const onResetPassword = (values) => {\n    if (!loading) {\n      const params = new URLSearchParams(location.search);\n      const oobCode = params.get('oobCode');\n      if (oobCode) {\n        if (values.newPassword !== '') {\n          resetPasswordAction({\n            newPassword: values.newPassword,\n            resetPasswordCode: oobCode,\n            history,\n          });\n        }\n      } else {\n        NotificationManager.warning(\n          'Please check your email url.',\n          'Reset Password Error',\n          3000,\n          null,\n          null,\n          ''\n        );\n      }\n    }\n  };\n\n  const initialValues = { newPassword, newPasswordAgain };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please use your e-mail to reset your password. <br />\n              If you are not a member, please{' '}\n              <NavLink to=\"/register\" className=\"white\">\n                register\n              </NavLink>\n              .\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.reset-password\" />\n            </CardTitle>\n\n            <Formik\n              validate={validateNewPassword}\n              initialValues={initialValues}\n              onSubmit={onResetPassword}\n            >\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPassword\"\n                      type=\"password\"\n                    />\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.new-password-again\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"newPasswordAgain\"\n                      type=\"password\"\n                    />\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.newPasswordAgain}\n                      </div>\n                    )}\n                  </FormGroup>\n\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/login\">\n                      <IntlMessages id=\"user.login-title\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.reset-password-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\n  return { newPassword, resetPasswordCode, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  resetPasswordAction: resetPassword,\n})(ResetPassword);\n","import React, { useEffect, useState } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { verifyOTP } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst VerifyOTP = ({ history, loading, error, verifyOTPAction }) => {\n  const [OTP] = useState('');\n\n  const onVerifyOTP = (values) => {\n    if (values.OTP !== '') {\n      verifyOTPAction({ ...values, history });\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'OTP Verification Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [error]);\n\n  const initialValues = { OTP };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please enter the OTP sent to your email. <br />\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.verify-otp\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.otp\" />\n                    </Label>\n                    <Field className=\"form-control\" name=\"OTP\" />\n                    {errors.OTP && touched.OTP && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.OTP}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.verify-otp-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { OTP, loading, error } = authUser;\n  return { OTP, loading, error };\n};\n\nconst mapActionToProps = {\n  verifyOTPAction: verifyOTP,\n};\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\n","import React, { useEffect, useState } from 'react';\nimport {\n  Row,\n  Card,\n  CardBody,\n  FormGroup,\n  Label,\n  Button,\n  CardTitle,\n} from 'reactstrap';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { addProfileData } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validateName = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your name';\n  } else if (value.length < 2) {\n    error = 'Value must be longer than 2 characters';\n  }\n  return error;\n};\n\nconst CompleteRegistration = ({\n  history,\n  loading,\n  error,\n  currentUser,\n  addProfileAction,\n}) => {\n  const [fullName] = useState('');\n\n  const onAddProfile = (values) => {\n    const { id, phone_number: phoneNumber } = currentUser;\n    const profile = {\n      ...values,\n      userID: id,\n      contactNo: phoneNumber,\n    };\n\n    addProfileAction({ profile, history });\n  };\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'OTP Verification Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [loading, error]);\n\n  const initialValues = {\n    fullName,\n  };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"8\" className=\"mx-auto my-auto\">\n        <Card>\n          <CardBody>\n            <CardTitle className=\"mb-4\">\n              <h2 className=\"lead\">\n                <IntlMessages id=\"user.fullname\" />\n              </h2>\n            </CardTitle>\n            <Formik initialValues={initialValues} onSubmit={onAddProfile}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-right\">\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"user.fullname\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"fullName\"\n                      validate={validateName}\n                    />\n                    {errors.name && touched.name && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.name}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-center align-items-center\">\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"forms.submit\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </CardBody>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, error, currentUser } = authUser;\n  return { loading, error, currentUser };\n};\n\nconst mapActionToProps = {\n  addProfileAction: addProfileData,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(CompleteRegistration);\n"],"sourceRoot":""}