{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","views/user/register.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","validatePassword","value","error","length","validateEmail","test","validatePhoneNumber","connect","authUser","loading","registerUserAction","registerUser","history","useState","email","password","phone","useEffect","NotificationManager","initialValues","xxs","md","to","id","onSubmit","values","errors","touched","name","validate","type","color","size"],"mappings":"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","file":"static/js/user-register.026f52cb.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n","import React, { useEffect, useState } from 'react';\nimport { Row, Card, CardTitle, FormGroup, Label, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\n\nimport { connect } from 'react-redux';\nimport { registerUser } from '../../redux/actions';\n\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 4) {\n    error = 'Value must be longer than 3 characters';\n  }\n  return error;\n};\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst validatePhoneNumber = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your phone number';\n  } else if (/^\\d{11}$/.test(value)) {\n    error = 'Invalid Phone Number';\n  }\n  return error;\n};\n\nconst Register = ({ history, loading, error, registerUserAction }) => {\n  const [email] = useState('');\n  const [password] = useState('');\n  const [phone] = useState('');\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.error(\n        error,\n        'Registration Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }, [loading, error]);\n\n  const onUserRegister = (values) => {\n    if (values.email !== '' && values.password !== '' && values.phone !== '') {\n      registerUserAction(values, history);\n    }\n  };\n\n  const initialValues = { email, password, phone };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please use this form to register. <br />\n              If you are a member, please{' '}\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.register\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onUserRegister}>\n              {({ errors, touched }) => (\n                <Form>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      validate={validateEmail}\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.email}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.phone-number\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"phone\"\n                      validate={validatePhoneNumber}\n                    />\n                    {errors.phone && touched.phone && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.phone}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      type=\"password\"\n                      name=\"password\"\n                      validate={validatePassword}\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.password}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-end align-items-center\">\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.register-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                  <Separator className=\"my-4\" />\n                  If you are a member, please{' '}\n                  <NavLink to=\"/user/login\">\n                    <u>login</u>\n                  </NavLink>\n                  .\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { loading, error } = authUser;\n  return { loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  registerUserAction: registerUser,\n})(Register);\n"],"sourceRoot":""}