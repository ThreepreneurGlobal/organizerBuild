{"version":3,"sources":["../node_modules/reactstrap/es/FormGroup.js","../node_modules/reactstrap/es/Label.js","../node_modules/reactstrap/es/TabContext.js","../../node_modules/unquote/index.js","../../index.tsx","../node_modules/reactstrap/es/NavLink.js","../node_modules/reactstrap/es/TabPane.js","../node_modules/reactstrap/es/TabContent.js","../node_modules/reactstrap/es/CardHeader.js"],"names":["propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","stringOrNumberProp","oneOfType","number","columnProps","shape","size","order","offset","hidden","for","xs","sm","md","lg","xl","widths","array","getColumnSizeClass","isXs","colWidth","colSize","Label","htmlFor","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","push","length","TabContext","createContext","reg","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","replace","parseTableAlignCapture","alignCapture","test","parseTableRow","source","parse","state","prevInTable","_inTable","tableRow","trim","cells","type","content","parseTable","capture","_inline","header","align","split","map","rowText","getTableStyle","colIndex","textAlign","inlineRegex","regex","exec","simpleInlineRegex","_simple","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","match","every","some","line","captured","trimEnd","sanitizeUrl","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","result","parseSimpleInline","parseBlock","Priority","parseCaptureInline","captureNothing","renderNothing","cx","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","getTag","overrides","override","compiler","markdown","options","createElementFn","h","overrideProps","undefined","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","key","attrStringToMap","raw","index","delimiterIdx","indexOf","slice","_","letter","toUpperCase","value","charAt","substr","mappedKey","normalizedValue","styles","kvPair","cloneElement","footnotes","refs","rules","blockQuote","_match","_order","HIGH","_parse","_react","output","_key","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","list","prevCapture","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","adjustedContent","oldStateInline","oldStateList","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","attrs","htmlSelfClosing","outputFunc","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","ast","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","innerRef","func","active","onClick","any","NavLink","_React$Component","_this","call","this","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","preventDefault","render","_this$props","Component","tabId","TabPane","getClasses","activeTabId","Consumer","_ref","activeTab","TabContent","_Component","getDerivedStateFromProps","nextProps","prevState","omit","Provider","CardHeader"],"mappings":"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","file":"static/js/54.179b2698.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","import React from 'react';\n/**\n * TabContext\n * {\n *  activeTabId: PropTypes.any\n * }\n */\n\nexport var TabContext = /*#__PURE__*/React.createContext({});","var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react'\n/// <reference path=\"unquote.d.ts\" />\nimport unquote from 'unquote'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce((obj, x) => ((obj[x.toLowerCase()] = x), obj), { for: 'htmlFor' })\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  '^' +\n    LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<typeof parseInline>> =\n  (capture, parse, state: MarkdownToJSX.State) => {\n    return {\n      content: parseInline(parse, capture[1], state),\n    }\n  }\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key]._match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key]._parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  disabled: PropTypes.bool,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  onClick: PropTypes.func,\n  href: PropTypes.any\n};\nvar defaultProps = {\n  tag: 'a'\n};\n\nvar NavLink = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(NavLink, _React$Component);\n\n  function NavLink(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = NavLink.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.href === '#') {\n      e.preventDefault();\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        active = _this$props.active,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"active\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, 'nav-link', {\n      disabled: attributes.disabled,\n      active: active\n    }), cssModule);\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      onClick: this.onClick,\n      className: classes\n    }));\n  };\n\n  return NavLink;\n}(React.Component);\n\nNavLink.propTypes = propTypes;\nNavLink.defaultProps = defaultProps;\nexport default NavLink;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabContext } from './TabContext';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  tabId: PropTypes.any\n};\nvar defaultProps = {\n  tag: 'div'\n};\nexport default function TabPane(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      tabId = props.tabId,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tabId\", \"tag\"]);\n\n  var getClasses = function getClasses(activeTabId) {\n    return mapToCssModules(classNames('tab-pane', className, {\n      active: tabId === activeTabId\n    }), cssModule);\n  };\n\n  return /*#__PURE__*/React.createElement(TabContext.Consumer, null, function (_ref) {\n    var activeTabId = _ref.activeTabId;\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      className: getClasses(activeTabId)\n    }));\n  });\n}\nTabPane.propTypes = propTypes;\nTabPane.defaultProps = defaultProps;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabContext } from './TabContext';\nimport { mapToCssModules, omit, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  activeTab: PropTypes.any,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar TabContent = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(TabContent, _Component);\n\n  TabContent.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.activeTab !== nextProps.activeTab) {\n      return {\n        activeTab: nextProps.activeTab\n      };\n    }\n\n    return null;\n  };\n\n  function TabContent(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      activeTab: _this.props.activeTab\n    };\n    return _this;\n  }\n\n  var _proto = TabContent.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        Tag = _this$props.tag;\n    var attributes = omit(this.props, Object.keys(propTypes));\n    var classes = mapToCssModules(classNames('tab-content', className), cssModule);\n    return /*#__PURE__*/React.createElement(TabContext.Provider, {\n      value: {\n        activeTabId: this.state.activeTab\n      }\n    }, /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      className: classes\n    })));\n  };\n\n  return TabContent;\n}(Component);\n\nexport default TabContent;\nTabContent.propTypes = propTypes;\nTabContent.defaultProps = defaultProps;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;"],"sourceRoot":""}