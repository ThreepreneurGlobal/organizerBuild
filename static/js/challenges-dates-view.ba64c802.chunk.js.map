{"version":3,"sources":["containers/navs/Breadcrumb.js","hooks/use-request.js","components/common/CustomDateInput.js","views/app/Challenges/dates-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","CustomDateInput","props","minDate","Date","maxDate","addMonths","dateFormat","showFullMonthYearPicker","showDisabledMonthNavigation","sanitizeDate","connect","authUser","hackathonData","accessToken","currentHackathon","updateAction","updateCurrentHackathon","refresh","getAllHackathons","params","history","useHistory","goBack","useEffect","application_start","application_end","hackathon_start","hackathon_date","submission_date","results_date","values","setValues","dataValues","Authorization","NotificationManager","wait","push","doRequest","requestLoading","handleChange","event","key","value","target","d","getDate","padStart","m","getMonth","y","getFullYear","toJSON","Row","xxs","Breadcrumb","md","Card","CardBody","CardTitle","IntlMessages","selectsStart","startDate","endDate","selected","onChange","date","placeholderText","selectsEnd","FormGroup","Button","type","color","onClick","undefined"],"mappings":"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","file":"static/js/challenges-dates-view.ba64c802.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      {match ? <BreadcrumbItems match={match} /> : null}\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/').filter(Boolean);\n\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import { useState } from 'react';\nimport instance from '../helpers/axiosInstance';\nimport { log } from '../helpers/Utils';\n\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\n  const [responseData, setData] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const doRequest = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await instance({\n        url,\n        method,\n        headers,\n        data,\n      });\n\n      if (response.data.success) {\n        if (nextSuccess) {\n          nextSuccess();\n        }\n        setLoading(false);\n        setData(response.data.data);\n      } else {\n        if (nextError) {\n          nextError(response.data.error);\n        }\n        setLoading(false);\n        setError(response.data.error);\n      }\n    } catch (err) {\n      log(err);\n      setLoading(false);\n      setError(err);\n    }\n  };\n\n  return [doRequest, loading, error, responseData];\n};\n\nexport default useRequest;\n","import { addMonths } from 'date-fns';\nimport React from 'react';\nimport DatePicker from 'react-datepicker';\n\nconst CustomDateInput = (props) => {\n  return (\n    <DatePicker\n      minDate={new Date()}\n      maxDate={addMonths(new Date(), 12)}\n      dateFormat=\"dd MMM yyyy\"\n      showFullMonthYearPicker\n      showDisabledMonthNavigation\n      {...props}\n    />\n  );\n};\n\nexport default CustomDateInput;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { Button, Card, CardBody, CardTitle, FormGroup, Row } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport { adminRoot } from '../../../constants/defaultValues';\n\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport IntlMessages from '../../../helpers/IntlMessages';\n\nimport { wait } from '../../../helpers/Utils';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport CustomDateInput from '../../../components/common/CustomDateInput';\nimport {\n  getAllHackathons,\n  updateCurrentHackathon,\n} from '../../../redux/actions';\nimport useRequest from '../../../hooks/use-request';\nimport { NotificationManager } from '../../../components/common/react-notifications';\n\nconst sanitizeDate = (data) => {\n  if (data) return new Date(data);\n\n  return new Date();\n};\n\nconst Dates = ({\n  match,\n  accessToken,\n  updateAction,\n  currentHackathon,\n  refresh,\n  loading,\n}) => {\n  const { id } = match.params;\n\n  const history = useHistory();\n\n  if (!id) {\n    history.goBack();\n  }\n\n  useEffect(() => {\n    updateAction(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const {\n    application_start,\n    application_end,\n    hackathon_start,\n    hackathon_date,\n    submission_date,\n    results_date,\n  } = currentHackathon;\n\n  const [values, setValues] = useState(() => ({\n    application_start: sanitizeDate(application_start),\n    application_end: sanitizeDate(application_end),\n    hackathon_start: sanitizeDate(hackathon_start),\n    hackathon_date: sanitizeDate(hackathon_date),\n    submission_date: sanitizeDate(submission_date),\n    results_date: sanitizeDate(results_date),\n  }));\n\n  const [dataValues, setData] = useState({\n    application_start,\n    application_end,\n    hackathon_start,\n    hackathon_date,\n    submission_date,\n    results_date,\n  });\n\n  useEffect(() => {\n    setValues({\n      application_start: sanitizeDate(currentHackathon.application_start),\n      application_end: sanitizeDate(currentHackathon.application_end),\n      hackathon_start: sanitizeDate(currentHackathon.hackathon_start),\n      hackathon_date: sanitizeDate(currentHackathon.hackathon_date),\n      submission_date: sanitizeDate(currentHackathon.submission_date),\n      results_date: sanitizeDate(currentHackathon.results_date),\n    });\n\n    setData({\n      application_start,\n      application_end,\n      hackathon_start,\n      hackathon_date,\n      submission_date,\n      results_date,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentHackathon]);\n\n  const [doRequest, requestLoading] = useRequest({\n    url: '/updateHackathon',\n    method: 'POST',\n    headers: {\n      Authorization: accessToken,\n    },\n    data: { id, ...dataValues },\n    nextSuccess: () => {\n      NotificationManager.success(\n        'Hackathon updated successfully!',\n        'Hackathon Operation Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n      refresh(accessToken, id);\n      wait(1200, () => {\n        history.push(`${adminRoot}/challenges/prizes/${id}`);\n      });\n    },\n    nextError: (error) => {\n      NotificationManager.error(\n        error,\n        'Hackathon Operation Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    },\n  });\n\n  const handleChange = (event, key, value) => {\n    setValues({\n      ...values,\n      [key]: value ? event : event.target.value,\n    });\n\n    const d = `${event.getDate()}`.padStart(2, '0');\n    const m = `${event.getMonth() + 1}`.padStart(2, '0');\n    const y = event.getFullYear();\n\n    setData({\n      ...dataValues,\n      [key]: value ? `${y}-${m}-${d}` : event.target.value.toJSON(),\n    });\n  };\n\n  const handleSubmit = () => {\n\n    if (\n      dataValues.application_start === undefined||\n    dataValues.application_end === undefined||\n    dataValues.hackathon_start === undefined||\n    dataValues.hackathon_date === undefined||\n    dataValues.submission_date === undefined||\n    dataValues.results_date === undefined\n    ) {\n      NotificationManager.error(\n        'Please select all the dates ',\n        'Hackathon Operation Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else {\n      doRequest();\n    }\n  };\n\n  if (loading) return <div className=\"loading\" />;\n\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.dates\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        <Colxx xxs=\"12\" md=\"10\" className=\"mb-4\">\n          <Row>\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-application-begins\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <CustomDateInput\n                      selectsStart\n                      startDate={values.application_start}\n                      endDate={values.application_end}\n                      selected={values.application_start}\n                      onChange={(date) =>\n                        handleChange(date, 'application_start', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-application-ends\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <CustomDateInput\n                      selectsEnd\n                      startDate={values.application_start}\n                      endDate={values.application_end}\n                      minDate={values.application_start}\n                      selected={values.application_end}\n                      onChange={(date) =>\n                        handleChange(date, 'application_end', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n          </Row>\n\n          <Row>\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-hackathon-begins\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <CustomDateInput\n                      selectsStart\n                      minDate={values.application_end}\n                      startDate={values.hackathon_start}\n                      endDate={values.hackathon_date}\n                      selected={values.hackathon_start}\n                      onChange={(date) =>\n                        handleChange(date, 'hackathon_start', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-hackathon-ends\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <CustomDateInput\n                      selectsEnd\n                      minDate={values.hackathon_start}\n                      startDate={values.hackathon_start}\n                      endDate={values.hackathon_date}\n                      selected={values.hackathon_date}\n                      onChange={(date) =>\n                        handleChange(date, 'hackathon_date', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n          </Row>\n\n          <Row>\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.submission-date\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <CustomDateInput\n                      minDate={values.hackathon_date}\n                      selected={values.submission_date}\n                      onChange={(date) =>\n                        handleChange(date, 'submission_date', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.announcement-results\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <CustomDateInput\n                      minDate={values.submission_date}\n                      selected={values.results_date}\n                      onChange={(date) =>\n                        handleChange(date, 'results_date', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n          </Row>\n\n          <Colxx>\n            <FormGroup className=\"text-center\">\n              <Button\n                id=\"submit-links\"\n                type=\"submit\"\n                color=\"primary\"\n                className={`btn-shadow btn-multiple-state ${\n                  requestLoading ? 'show-spinner' : ''\n                }`}\n                onClick={handleSubmit}\n              >\n                <span className=\"spinner d-inline-block\">\n                  <span className=\"bounce1\" />\n                  <span className=\"bounce2\" />\n                  <span className=\"bounce3\" />\n                </span>\n                <span className=\"label\">\n                  <IntlMessages id=\"forms.update\" />\n                </span>\n              </Button>\n            </FormGroup>\n          </Colxx>\n        </Colxx>\n      </Row>\n{/* \n      <Row>\n        <Colxx>\n          <FormGroup className=\"text-center\">\n            <Button\n              color=\"primary\"\n              className=\"m-3\"\n              onClick={() =>\n                history.push(`${adminRoot}/challenges/brands/${id}`)\n              }\n            >\n              <IntlMessages id=\"forms.previous\" />\n            </Button>\n          </FormGroup>\n        </Colxx>\n      </Row> */}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ authUser, hackathonData }) => {\n  const { accessToken } = authUser;\n  const { currentHackathon, loading, error } = hackathonData;\n  return {\n    accessToken,\n    currentHackathon,\n    loading,\n    error,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateAction: updateCurrentHackathon,\n  refresh: getAllHackathons,\n})(Dates);\n"],"sourceRoot":""}