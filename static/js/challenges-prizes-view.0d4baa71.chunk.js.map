{"version":3,"sources":["containers/navs/Breadcrumb.js","hooks/use-request.js","components/application/AddPrizeModal.js","components/application/PrizesList.js","views/app/Challenges/prizes-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","connect","authUser","applicationData","accessToken","prizes","getPrizesAction","getPrizes","setOpenAddModal","hackathon_id","sponsor_prize","name","description","values","setValues","handleChange","event","key","value","target","Authorization","NotificationManager","wait","password","doRequest","ModalHeader","IntlMessages","ModalBody","FormGroup","Label","Input","type","onChange","rows","checked","primary","ModalFooter","Button","color","onClick","useEffect","AppError","Card","CardBody","CardTitle","role","item","idx","Prizes","params","history","useHistory","openAddModal","Row","xxs","Breadcrumb","md","CustomInput","label","Modal","isOpen","toggle","push"],"mappings":"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","file":"static/js/challenges-prizes-view.0d4baa71.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { adminRoot } from '../../constants/defaultValues';\r\n\r\nconst getMenuTitle = (sub) => {\r\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub) => {\r\n  return path.split(sub)[0] + sub;\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <>\r\n      {heading && (\r\n        <h1>\r\n          <IntlMessages id={heading} />\r\n        </h1>\r\n      )}\r\n      {match ? <BreadcrumbItems match={match} /> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split('/').filter(Boolean);\r\n\r\n  if (paths[paths.length - 1].indexOf(':') > -1) {\r\n    paths = paths.filter((x) => x.indexOf(':') === -1);\r\n  }\r\n  return (\r\n    <>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import { useState } from 'react';\r\nimport instance from '../helpers/axiosInstance';\r\nimport { log } from '../helpers/Utils';\r\n\r\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\r\n  const [responseData, setData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const doRequest = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await instance({\r\n        url,\r\n        method,\r\n        headers,\r\n        data,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        if (nextSuccess) {\r\n          nextSuccess();\r\n        }\r\n        setLoading(false);\r\n        setData(response.data.data);\r\n      } else {\r\n        if (nextError) {\r\n          nextError(response.data.error);\r\n        }\r\n        setLoading(false);\r\n        setError(response.data.error);\r\n      }\r\n    } catch (err) {\r\n      log(err);\r\n      setLoading(false);\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  return [doRequest, loading, error, responseData];\r\n};\r\n\r\nexport default useRequest;\r\n","/* eslint-disable camelcase */\r\n/* eslint-disable prefer-promise-reject-errors */\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport Switch from 'rc-switch';\r\nimport { connect } from 'react-redux';\r\n\r\nimport useRequest from '../../hooks/use-request';\r\nimport { wait } from '../../helpers/Utils';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { NotificationManager } from '../common/react-notifications';\r\nimport { getPrizes } from '../../redux/actions';\r\n\r\nimport 'rc-switch/assets/index.css';\r\n\r\nconst AddPrizeModal = ({\r\n  setOpenAddModal,\r\n  id,\r\n  accessToken,\r\n  getPrizesAction,\r\n}) => {\r\n  const [values, setValues] = useState({\r\n    hackathon_id: id,\r\n    sponsor_prize: 1,\r\n    name: '',\r\n    description: '',\r\n  });\r\n\r\n  const handleChange = (event, key, value = false) => {\r\n    setValues({\r\n      ...values,\r\n      [key]: value ? event : event.target.value,\r\n    });\r\n  };\r\n\r\n  const [doRequest, loading] = useRequest({\r\n    url: '/addPrizes',\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: accessToken,\r\n    },\r\n    data: { prizes: { ...values } },\r\n    nextSuccess: () => {\r\n      NotificationManager.success(\r\n        'Prize added successfully',\r\n        'Application Update Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n      getPrizesAction(accessToken, id);\r\n      wait(1200, () => {\r\n        setValues({ ...values, password: 'null' });\r\n        setOpenAddModal(false);\r\n      });\r\n    },\r\n    nextError: (error) => {\r\n      NotificationManager.error(\r\n        error,\r\n        'Application Update Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    },\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    doRequest();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.application-add-prize-title\" />\r\n        </h2>\r\n      </ModalHeader>\r\n\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.prize\" />\r\n          </Label>\r\n          <Input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            value={values.name}\r\n            onChange={(event) => handleChange(event, 'name')}\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.prize-description\" />\r\n          </Label>\r\n          <Input\r\n            type=\"textarea\"\r\n            rows=\"6\"\r\n            value={values.description}\r\n            onChange={(event) => handleChange(event, 'description')}\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup className=\"d-flex\">\r\n          <Switch\r\n            className=\"custom-switch custom-switch-primary custom-switch-small mr-2\"\r\n            checked={values.sponsor_prize}\r\n            onChange={(primary) => handleChange(primary, 'sponsor_prize', true)}\r\n          />\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.is-sponsor-prize\" />\r\n          </Label>\r\n        </FormGroup>\r\n      </ModalBody>\r\n\r\n      <ModalFooter>\r\n        <Button\r\n          id=\"add-prize-buttom\"\r\n          color=\"primary\"\r\n          className={`btn-shadow btn-multiple-state ${\r\n            loading ? 'show-spinner' : ''\r\n          }`}\r\n          onClick={handleSubmit}\r\n        >\r\n          <span className=\"spinner d-inline-block\">\r\n            <span className=\"bounce1\" />\r\n            <span className=\"bounce2\" />\r\n            <span className=\"bounce3\" />\r\n          </span>\r\n          <span className=\"label\">\r\n            <IntlMessages id=\"challenges.modal.application-add\" />\r\n          </span>\r\n        </Button>\r\n\r\n        <Button color=\"danger\" onClick={() => setOpenAddModal(false)}>\r\n          <IntlMessages id=\"challenges.modal.application-cancel\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser, applicationData }) => {\r\n  const { accessToken } = authUser;\r\n  const { prizes, loading, error } = applicationData;\r\n  return { accessToken, prizes, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getPrizesAction: getPrizes,\r\n})(AddPrizeModal);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Card, CardBody, CardTitle } from 'reactstrap';\r\nimport AppError from '../../helpers/AppError';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { getPrizes } from '../../redux/actions';\r\nimport { Separator } from '../common/CustomBootstrap';\r\n\r\nconst PrizesList = ({\r\n  id,\r\n  getPrizesAction,\r\n  accessToken,\r\n  prizes,\r\n  loading,\r\n  error,\r\n}) => {\r\n  useEffect(() => {\r\n    getPrizesAction(accessToken, id);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (error) throw new AppError(error);\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <CardTitle>\r\n          <span className=\"h3\">\r\n            <IntlMessages id=\"challenges.added-prizes\" />\r\n          </span>\r\n        </CardTitle>\r\n\r\n        <Separator className=\"my-2\" />\r\n\r\n        {loading ? (\r\n          <div className=\"d-flex justify-content-center m-4\">\r\n            <div className=\"loading\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {prizes.map((item, idx) => (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <Card key={idx} className=\"mb-2\">\r\n                <CardBody>\r\n                  <CardTitle>{item.name}</CardTitle>\r\n                  {item.sponsor_prize === 1 && (\r\n                    <div className=\"position-absolute card-top-buttons\">\r\n                      Sponsor Prize:{' '}\r\n                      <i className=\"simple-icon-check text-success\" />\r\n                    </div>\r\n                  )}\r\n                  {item.description}\r\n                </CardBody>\r\n              </Card>\r\n            ))}\r\n          </>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser, applicationData }) => {\r\n  const { accessToken } = authUser;\r\n  const { prizes, loading, error } = applicationData;\r\n  return { accessToken, prizes, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getPrizesAction: getPrizes,\r\n})(PrizesList);\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CustomInput,\r\n  FormGroup,\r\n  Modal,\r\n  Row,\r\n} from 'reactstrap';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\r\nimport { adminRoot } from '../../../constants/defaultValues';\r\nimport AddPrizeModal from '../../../components/application/AddPrizeModal';\r\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\r\nimport AppError from '../../../helpers/AppError';\r\nimport IntlMessages from '../../../helpers/IntlMessages';\r\nimport PrizesList from '../../../components/application/PrizesList';\r\n\r\nconst Prizes = ({ match }) => {\r\n  const { id } = match.params;\r\n\r\n  if (!id) throw new AppError('Please provide a Hackathon ID');\r\n\r\n  const history = useHistory();\r\n\r\n  const [openAddModal, setOpenAddModal] = useState(false);\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Breadcrumb heading=\"menu.prizes\" match={match} />\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n\r\n      <Row className=\"justify-content-center m-2\">\r\n        <Colxx xxs=\"12\" md=\"6\">\r\n          <PrizesList id={id} />\r\n        </Colxx>\r\n\r\n        <Colxx xxs=\"12\" md=\"6\">\r\n          <Card>\r\n            <CardBody>\r\n              <Row className=\"justify-content-center m-2\">\r\n                <Button onClick={() => setOpenAddModal(true)}>\r\n                  <IntlMessages id=\"challenges.add-prize-button\" />\r\n                </Button>\r\n              </Row>\r\n\r\n              <Row className=\"justify-content-center m-2\">\r\n                <CustomInput\r\n                  type=\"checkbox\"\r\n                  label={<IntlMessages id=\"challenges.add-prize-checkbox\" />}\r\n                />\r\n              </Row>\r\n\r\n              <Modal\r\n                isOpen={openAddModal}\r\n                toggle={() => setOpenAddModal(!openAddModal)}\r\n              >\r\n                <AddPrizeModal setOpenAddModal={setOpenAddModal} id={id} />\r\n              </Modal>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Colxx>\r\n          <FormGroup className=\"text-center\">\r\n            <Button\r\n              color=\"primary\"\r\n              className=\"m-3\"\r\n              onClick={() =>\r\n                history.push(`${adminRoot}/challenges/dates/${id}`)\r\n              }\r\n            >\r\n              <IntlMessages id=\"forms.previous\" />\r\n            </Button>\r\n            <Button\r\n              color=\"primary\"\r\n              className=\"m-3\"\r\n              onClick={() =>\r\n                history.push(`${adminRoot}/challenges/judges/${id}`)\r\n              }\r\n            >\r\n              <IntlMessages id=\"forms.next\" />\r\n            </Button>\r\n          </FormGroup>\r\n        </Colxx>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Prizes;\r\n"],"sourceRoot":""}