{"version":3,"sources":["containers/navs/Breadcrumb.js","hooks/use-request.js","containers/application/HackathonCard.js","components/common/CustomSelectInput.js","components/application/AddSDGModal.js","components/application/AddMegaTrendsModal.js","components/application/CreateHackathonModal.js","views/app/Challenges/components/context-menu.js","views/app/Challenges/default-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","getStatusText","status","getTypeText","HackCard","showEdit","name","tagline","submit_status","hackathon_start","application_end","hackathon_website","hackathon_type_id","otherArray","console","history","useHistory","href","target","rel","sdg_goals","item","src","alt","style","height","$mega_trends","color","pill","outline","onClick","push","CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","SDGItem","checked","setChecked","tooltipOpen","setTooltipOpen","xxs","CardTitle","Button","checkedItems","splice","handleChange","size","includes","Tooltip","placement","isOpen","toggle","AddSDGModal","setOpenAddSdg","values","setValues","items","useEffect","sgdGoals","ModalHeader","IntlMessages","ModalBody","Row","key","ModalFooter","MegaTrendItem","AddMegaTrendsModal","setOpenMegaTrends","mega_trends","megaTrends","INIT_STATE","CreateHackathonModal","setOpenCreateHackathon","accessToken","refresh","openAddSdg","openMegaTrends","organizer_id","label","value","selectedOption","setSelectedOption","Authorization","NotificationManager","wait","doRequest","event","FormGroup","Label","type","placeholder","onChange","components","classNamePrefix","options","hackthonTypeOptions","aria-hidden","Badge","Modal","modalClassName","proptype","Proptypes","func","isRequired","connect","authUser","getAllHackathons","ChallengesContextMenu","onContextMenuClick","borderRadius","action","hackathonData","organizerHackathons","getAllHackathonsAction","getCurrentUser","openCreateHackathon","Breadcrumb","wrapClassName","undefined","sm","md","e"],"mappings":"+JAAA,4DAOMA,EAAe,SAACC,GACpB,MAAI,WAAIA,KAAUC,IAAkB,cAAC,IAAD,CAAcC,GAAG,cAC9C,cAAC,IAAD,CAAcA,GAAE,eAAUF,MAG7BG,EAAS,SAACC,EAAMJ,GACpB,OAAOI,EAAKC,MAAML,GAAK,GAAKA,GAgBxBM,EAAkB,SAAC,GAAe,IAChCF,EAD+B,EAAZG,MACNH,KAAKI,OAAO,GAC3BC,EAAQL,EAAKC,MAAM,KAAKK,OAAOC,SAKnC,OAHIF,EAAMA,EAAMG,OAAS,GAAGC,QAAQ,MAAQ,IAC1CJ,EAAQA,EAAMC,QAAO,SAACI,GAAD,OAA2B,IAApBA,EAAED,QAAQ,SAGtC,mCACE,cAAC,IAAD,CAAYE,UAAU,gEAAtB,SACGN,EAAMO,KAAI,SAAChB,EAAKiB,GACf,OACE,cAAC,IAAD,CAA4BC,OAAQT,EAAMG,SAAWK,EAAQ,EAA7D,SACGR,EAAMG,SAAWK,EAAQ,EACxB,cAAC,IAAD,CAASE,GAAE,WAAMhB,EAAOC,EAAMJ,IAA9B,SACGD,EAAaC,KAGhBD,EAAaC,IANIiB,WAgBlBG,IAzCa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASd,EAAY,EAAZA,MACtC,OACE,qCACGc,GACC,6BACE,cAAC,IAAD,CAAcnB,GAAImB,MAGrBd,EAAQ,cAACD,EAAD,CAAiBC,MAAOA,IAAY,U,4FCmBpCe,IAvCI,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,IAAKC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAAgB,EAC7CC,mBAAS,IADoC,mBACtEC,EADsE,KACxDC,EADwD,OAE/CF,oBAAS,GAFsC,mBAEtEG,EAFsE,KAE7DC,EAF6D,OAGnDJ,mBAAS,IAH0C,mBAGtEK,EAHsE,KAG/DC,EAH+D,KAoC7E,MAAO,CA/BQ,uCAAG,4BAAAC,EAAA,sEAEdD,EAAS,MACTF,GAAW,GAHG,SAISI,YAAS,CAC9Bd,MACAC,SACAE,UACAD,SARY,QAIRa,EAJQ,QAWDb,KAAKc,SACZZ,GACFA,IAEFM,GAAW,GACXF,EAAQO,EAASb,KAAKA,QAElBG,GACFA,EAAUU,EAASb,KAAKS,OAE1BD,GAAW,GACXE,EAASG,EAASb,KAAKS,QAtBX,gDAyBdM,YAAI,EAAD,IACHP,GAAW,GACXE,EAAS,EAAD,IA3BM,yDAAH,qDA+BIH,EAASE,EAAOJ,K,iCCxCrC,oIAyBMW,EAAgB,SAACC,GACrB,OAAe,IAAXA,EAAqB,QACV,IAAXA,EAAqB,eACV,IAAXA,EAAqB,WAClB,IAGHC,EAAc,SAACD,GACnB,OAAe,IAAXA,EAAqB,SACV,IAAXA,EAAqB,UACV,IAAXA,EAAqB,WAClB,IAwHME,IArHE,SAAC,GAA+B,IAA7BnB,EAA4B,EAA5BA,KAA4B,IAAtBoB,gBAAsB,SAE5C3C,EAUEuB,EAVFvB,GACA4C,EASErB,EATFqB,KACAC,EAQEtB,EARFsB,QACAC,EAOEvB,EAPFuB,cACAC,EAMExB,EANFwB,gBACAC,EAKEzB,EALFyB,gBACAC,EAIE1B,EAJF0B,kBACAC,EAGE3B,EAHF2B,kBACAC,EAEE5B,EAFF4B,WAGFC,QAAQd,IAAIf,GACZ,IAnCsBiB,EAmChBa,EAAUC,cAEhB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,mBAAGzC,UAAU,UAAb,SACE,mBACE0C,KAAMN,EACNO,OAAO,SACPC,IAAI,aACJ5C,UAAU,UAJZ,SAMG+B,MAGL,cAAC,IAAD,CAAc/B,UAAU,aAAxB,SAAsCgC,OAGxC,eAAC,IAAD,CAAKhC,UAAU,yBAAf,UACGsC,EAAWO,UAAU5C,KAAI,SAAC6C,GAAD,OACxB,qBAEEC,IAAG,0BAAqBD,EAAK3D,GAA1B,QACH6D,IAAKF,EAAKf,KACV/B,UAAU,4DAHL8C,EAAK3D,OAOd,qBAAKa,UAAU,WAAWiD,MAAO,CAAEC,OAAQ,UAE1CZ,EAAWa,aAAalD,KAAI,SAAC6C,GAAD,OAC3B,qBAEEC,IAAG,kCAA6BD,EAAK3D,GAAlC,QACH6D,IAAKF,EAAKf,KACV/B,UAAU,4DAHL8C,EAAK3D,UAQhB,cAAC,IAAD,CAAWa,UAAU,SAErB,eAAC,IAAD,WACE,cAAC,IAAD,CAAcb,GAAG,yBACjB,cAAC,IAAD,UAAWgD,OAGb,eAAC,IAAD,WACE,cAAC,IAAD,CAAchD,GAAG,sBACjB,cAAC,IAAD,UAAW+C,OAGb,cAAC,IAAD,CAAWlC,UAAU,SAErB,cAAC,IAAD,CACEoD,OA3FczB,EA2FQM,EA1Ff,IAAXN,EAAqB,kBACV,IAAXA,EAAqB,kBACV,cAAXA,EAA+B,iBAC5B,IAwFC0B,MAAI,EACJC,SAAO,EACPtD,UAAU,YAJZ,SAMG0B,EAAcO,KAGjB,cAAC,IAAD,CAAOmB,MAAM,kBAAkBC,MAAI,EAACrD,UAAU,OAA9C,SACG4B,EAAYS,KAGf,cAAC,IAAD,CAAcrC,UAAU,aAAxB,SACE,cAAC,IAAD,CAAS0C,KAAMN,EAAmBO,OAAO,SAASC,IAAI,aAAtD,SACE,cAAC,IAAD,CAAczD,GAAG,2BAIrB,eAAC,IAAD,CAAKa,UAAU,yBAAf,UACG8B,GACC,cAAC,IAAD,CACE9B,UAAU,MACVsD,SAAO,EACPC,QAAS,WACPf,EAAQgB,KAAR,UAAgBtE,IAAhB,8BAA+CC,KAJnD,SAOE,cAAC,IAAD,CAAcA,GAAG,2BAGrB,cAAC,IAAD,CACEa,UAAU,MACVoD,MAAM,UACNG,QAAS,WACPf,EAAQgB,KAAR,UAAgBtE,IAAhB,+BAAgDC,KAJpD,SAOE,cAAC,IAAD,CAAcA,GAAG,6C,0OCxIdsE,EAPW,SAACC,GACzB,IAAMC,EAAW,eAAQD,GAGzB,cAFOC,EAAYC,mBACZD,EAAYE,eACZ,cAAC,IAAWC,MAAZ,eAAsBH,K,2CCkDzBI,EAAU,SAAC,GAAmC,IAAjCjB,EAAgC,EAAhCA,KAAMkB,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAAiB,EACXnD,oBAAS,GADE,mBAC1CoD,EAD0C,KAC7BC,EAD6B,KAcjD,OACE,eAAC,IAAD,CAAOC,IAAI,IAAIpE,UAAU,uBAAzB,UACE,qBACE+C,IAAG,0BAAqBD,EAAK3D,GAA1B,QACH6D,IAAKF,EAAKf,KACV/B,UAAU,6DAEZ,qBAAKA,UAAU,oCAAf,SACE,qBAAKA,UAAU,+FAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAACqE,EAAA,EAAD,CACErE,UAAU,sBACVb,GAAE,sBAAiB2D,EAAK3D,IAF1B,SAIG2D,EAAKf,OAER,cAACuC,EAAA,EAAD,CACEf,QAAS,kBA5BA,SAAC7C,GACpB,IAAM6D,EAAY,YAAOP,GACnB9D,EAAQqE,EAAazE,QAAQY,IACpB,IAAXR,EACFqE,EAAaf,KAAK9C,GAElB6D,EAAaC,OAAOtE,EAAO,GAE7B+D,EAAWM,GAoBcE,CAAa3B,EAAK3D,KACjCuF,KAAK,KACLtB,MAAOY,EAAQW,SAAS7B,EAAK3D,IAAM,UAAY,UAHjD,SAKG6E,EAAQW,SAAS7B,EAAK3D,IAAM,WAAa,WAG5C,cAACyF,EAAA,EAAD,CACEC,UAAU,MACVC,OAAQZ,EACRvB,OAAM,sBAAiBG,EAAK3D,IAC5B4F,OAAQ,kBAAMZ,GAAgBD,IAJhC,SAMGpB,EAAKf,kBASLiD,EAhGK,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAAgB,EAC9BrE,mBAAS,IADqB,mBACrDkD,EADqD,KAC5CC,EAD4C,KAGtDQ,EAAe,SAACW,GACpBnB,EAAWmB,IAWb,OARAC,qBAAU,WACRF,EAAU,2BACLD,GADI,IAEPrC,UAAWyC,IAAS3F,QAAO,SAACI,GAAD,OAAOiE,EAAQW,SAAS5E,EAAEZ,YAGtD,CAAC6E,IAGF,qCACE,cAACuB,EAAA,EAAD,UACE,oBAAIvF,UAAU,OAAd,SACE,cAACwF,EAAA,EAAD,CAAcrG,GAAG,uCAGrB,cAACsG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAK1F,UAAU,yBAAf,SACGsF,IAASrF,KAAI,SAAC6C,GAAD,OACZ,cAAC,EAAD,CAEEA,KAAMA,EACNkB,QAASA,EACTC,WAAYQ,GAHP3B,EAAK6C,YAQlB,cAACC,EAAA,EAAD,CAAa5F,UAAU,sBAAvB,SACE,cAACsE,EAAA,EAAD,CAAQlB,MAAM,YAAYG,QAAS,kBAAM0B,GAAc,IAAvD,SACE,cAACO,EAAA,EAAD,CAAcrG,GAAG,6CCOrB0G,EAAgB,SAAC,GAAmC,IAAjC/C,EAAgC,EAAhCA,KAAMkB,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAAiB,EACjBnD,oBAAS,GADQ,mBAChDoD,EADgD,KACnCC,EADmC,KAcvD,OACE,eAAC,IAAD,CAAOC,IAAI,IAAIpE,UAAU,uBAAzB,UACE,qBACE+C,IAAG,kCAA6BD,EAAK3D,GAAlC,QACH6D,IAAKF,EAAKf,KACV/B,UAAU,6DAEZ,qBAAKA,UAAU,oCAAf,SACE,qBAAKA,UAAU,+FAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAACqE,EAAA,EAAD,CACErE,UAAU,sBACVb,GAAE,6BAAwB2D,EAAK3D,IAFjC,SAIG2D,EAAKf,OAER,cAACuC,EAAA,EAAD,CACEf,QAAS,kBA5BA,SAAC7C,GACpB,IAAM6D,EAAY,YAAOP,GACnB9D,EAAQqE,EAAazE,QAAQY,IACpB,IAAXR,EACFqE,EAAaf,KAAK9C,GAElB6D,EAAaC,OAAOtE,EAAO,GAE7B+D,EAAWM,GAoBcE,CAAa3B,EAAK3D,KACjCuF,KAAK,KACLtB,MAAOY,EAAQW,SAAS7B,EAAK3D,IAAM,UAAY,UAHjD,SAKG6E,EAAQW,SAAS7B,EAAK3D,IAAM,QAAU,QAGzC,cAACyF,EAAA,EAAD,CACEC,UAAU,MACVC,OAAQZ,EACRvB,OAAM,6BAAwBG,EAAK3D,IACnC4F,OAAQ,kBAAMZ,GAAgBD,IAJhC,SAMGpB,EAAKf,kBASL+D,EAhGY,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,kBAAmBb,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAAgB,EACzCrE,mBAAS,IADgC,mBAChEkD,EADgE,KACvDC,EADuD,KAGjEQ,EAAe,SAACW,GACpBnB,EAAWmB,IAWb,OARAC,qBAAU,WACRF,EAAU,2BACLD,GADI,IAEPc,YAAaC,IAAWtG,QAAO,SAACI,GAAD,OAAOiE,EAAQW,SAAS5E,EAAEZ,YAG1D,CAAC6E,IAGF,qCACE,cAACuB,EAAA,EAAD,UACE,oBAAIvF,UAAU,OAAd,SACE,cAACwF,EAAA,EAAD,CAAcrG,GAAG,+CAGrB,cAACsG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACGO,IAAWhG,KAAI,SAAC6C,GAAD,OACd,cAAC,EAAD,CAEEA,KAAMA,EACNkB,QAASA,EACTC,WAAYQ,GAHP3B,EAAK6C,YAQlB,cAACC,EAAA,EAAD,CAAa5F,UAAU,sBAAvB,SACE,cAACsE,EAAA,EAAD,CAAQlB,MAAM,YAAYG,QAAS,kBAAMwC,GAAkB,IAA3D,SACE,cAACP,EAAA,EAAD,CAAcrG,GAAG,6C,gCCtBrB+G,EAAa,CACjBnE,KAAM,GACNM,kBAAmB,EACnBQ,UAAW,GACXmD,YAAa,IAGTG,EAAuB,SAAC,GAKvB,IAJLC,EAII,EAJJA,uBACAjH,EAGI,EAHJA,GACAkH,EAEI,EAFJA,YACAC,EACI,EADJA,QACI,EACgCxF,oBAAS,GADzC,mBACGyF,EADH,KACetB,EADf,OAEwCnE,oBAAS,GAFjD,mBAEG0F,EAFH,KAEmBT,EAFnB,OAIwBjF,mBAAS,2BAAKoF,GAAN,IAAkBO,aAActH,KAJhE,mBAIG+F,EAJH,KAIWC,EAJX,OAMwCrE,mBAAS,CACnD4F,MAAO,UACPC,MAAO,EACPhB,IAAK,IATH,mBAMGiB,EANH,KAMmBC,EANnB,OAYyBtG,YAAW,CACtCC,IAAK,mBACLC,OAAQ,OACRE,QAAS,CACPmG,cAAeT,GAEjB3F,KAAMwE,EACNtE,YAAa,WACXmG,IAAoBvF,QAClB,kCACA,2BACA,IACA,KACA,KACA,IAEF8E,EAAQD,EAAalH,GACrBiH,GAAuB,GAEvBY,YAAK,KAAK,WACR7B,EAAU,2BAAKe,GAAN,IAAkBO,aAActH,SAG7C0B,UAAW,SAACM,GACV4F,IAAoB5F,MAClBA,EACA,yBACA,IACA,KACA,KACA,OA1CF,mBAYG8F,EAZH,KAYchG,EAZd,KA+CEwD,EAAe,SAACyC,EAAOvB,GAAwB,IAAnBgB,EAAkB,wDAClDxB,EAAU,2BACLD,GADI,kBAENS,EAAMgB,EAAQO,EAAQA,EAAMvE,OAAOgE,UAQxC,OACE,qCACE,eAACpB,EAAA,EAAD,WACE,oBAAIvF,UAAU,OAAd,SACE,cAACwF,EAAA,EAAD,CAAcrG,GAAG,mCAEnB,mBAAGa,UAAU,MAAb,SACE,cAACwF,EAAA,EAAD,CAAcrG,GAAG,0CAIrB,eAACsG,EAAA,EAAD,WACE,eAAC0B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,CAAcrG,GAAG,4BAEnB,cAAC2E,EAAA,EAAD,CACEuD,KAAK,OACLrH,UAAU,eACV+B,KAAK,0BACLuF,YAAY,eACZX,MAAOzB,EAAOnD,KACdwF,SAAU,SAACL,GACTzC,EAAayC,EAAO,cAI1B,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,CAAcrG,GAAG,sCAEnB,cAAC,IAAD,CACEqI,WAAY,CAAE1D,MAAOL,GACrBzD,UAAU,eACVyH,gBAAgB,eAChB1F,KAAK,oBACL4E,MAAOC,EACPW,SAAU,SAAC7G,GACTmG,EAAkBnG,GAClB6B,QAAQd,IAAIf,GACZ+D,EAAa/D,EAAKiG,MAAO,qBAAqB,IAEhDe,QAASC,IACTL,YAAY,6BAGhB,eAACH,EAAA,EAAD,CAAWnH,UAAU,cAArB,UACE,eAACsE,EAAA,EAAD,CAAQf,QAAS,kBAAM0B,GAAc,IAAOP,KAAK,KAAK1E,UAAU,MAAhE,UACE,mBAAGA,UAAU,sBAAsB4H,cAAY,SAC/C,cAACpC,EAAA,EAAD,CAAcrG,GAAG,uCAGnB,eAACmF,EAAA,EAAD,CACEf,QAAS,kBAAMwC,GAAkB,IACjCrB,KAAK,KACL1E,UAAU,MAHZ,UAKE,mBAAGA,UAAU,sBAAsB4H,cAAY,SAC/C,cAACpC,EAAA,EAAD,CAAcrG,GAAG,kDAIrB,cAACgI,EAAA,EAAD,UACGjC,EAAOrC,UAAUhD,OAChB,qCACE,cAACuH,EAAA,EAAD,wBACA,qBAAKpH,UAAU,0CAAf,SACGkF,EAAOrC,UAAU5C,KAAI,SAAC6C,GAAD,OACpB,cAAC+E,EAAA,EAAD,CACExE,MAAI,EACJD,MAAM,kBAENpD,UAAU,OAJZ,SAMG8C,EAAKf,MAHDe,EAAK3D,YAQhB,OAGN,cAACgI,EAAA,EAAD,UACGjC,EAAOc,YAAYnG,OAClB,qCACE,cAACuH,EAAA,EAAD,0BACA,qBAAKpH,UAAU,0CAAf,SACGkF,EAAOc,YAAY/F,KAAI,SAAC6C,GAAD,OACtB,cAAC+E,EAAA,EAAD,CACExE,MAAI,EAEJrD,UAAU,OACVoD,MAAM,kBAJR,SAMGN,EAAKf,MAJDe,EAAK3D,YAShB,OAGN,cAAC2I,EAAA,EAAD,CACEhD,OAAQyB,EACRxB,OAAQ,kBAAME,GAAesB,IAC7B7B,KAAK,KAHP,SAKE,cAAC,EAAD,CACEO,cAAeA,EACfC,OAAQA,EACRC,UAAWA,MAGf,cAAC2C,EAAA,EAAD,CACEhD,OAAQ0B,EACRzB,OAAQ,kBAAMgB,GAAmBS,IACjC9B,KAAK,KACLqD,eAAe,UAJjB,SAME,cAAC,EAAD,CACEhC,kBAAmBA,EACnBb,OAAQA,EACRC,UAAWA,SAKjB,eAACS,EAAA,EAAD,CAAa5F,UAAU,sBAAvB,UACE,eAACsE,EAAA,EAAD,CACEnF,GAAG,kBACHiE,MAAM,UACNpD,UAAS,wCACPiB,EAAU,eAAiB,IAE7BsC,QA1Ia,WACnB0D,KAmII,UAQE,uBAAMjH,UAAU,yBAAhB,UACE,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,eAElB,sBAAMA,UAAU,QAAhB,SACE,cAACwF,EAAA,EAAD,CAAcrG,GAAG,qCAIrB,cAACmF,EAAA,EAAD,CAAQlB,MAAM,SAASG,QAAS,kBAAM6C,GAAuB,IAA7D,SACE,cAACZ,EAAA,EAAD,CAAcrG,GAAG,4CAO3BgH,EAAqB6B,SAAW,CAC9B5B,uBAAwB6B,IAAUC,KAAKC,YAGzC,IAKeC,eALS,SAAC,GAEvB,MAAO,CAAE/B,YAF+B,EAAfgC,SACjBhC,eAI8B,CACtCC,QAASgC,MADIF,CAEZjC,G,kBCvPYoC,EAbe,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAC/B,OACE,eAAC,IAAD,CAAarJ,GAAG,kBAAkB8D,MAAO,CAAEwF,aAAc,QAAzD,UACE,eAAC,IAAD,CAAUlF,QAASiF,EAAoB9H,KAAM,CAAEgI,OAAQ,WAAvD,UACE,mBAAG1I,UAAU,wBADf,IACwC,+CAExC,eAAC,IAAD,CAAUuD,QAASiF,EAAoB9H,KAAM,CAAEgI,OAAQ,WAAvD,UACE,mBAAG1I,UAAU,qBADf,IACqC,yDCkH5BoI,uBANS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUM,EAAoB,EAApBA,cAGnC,MAAO,CAAEtC,YAFegC,EAAhBhC,YAEcuC,oBAD0BD,EAAxCC,oBACmC3H,QADK0H,EAAnB1H,QACuBE,MADJwH,EAAVxH,SAIA,CACtC0H,uBAAwBP,MADXF,EA5GK,SAAC,GAMd,IALL5I,EAKI,EALJA,MACA6G,EAII,EAJJA,YACAuC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,uBACA5H,EACI,EADJA,QAEQ9B,EAAO2J,cAAP3J,GACRoD,QAAQd,IAAItC,GACZkG,qBAAU,WACRwD,EAAuBxC,EAAalH,KAEnC,IANC,MAQkD2B,oBAAS,GAR3D,mBAQGiI,EARH,KAQwB3C,EARxB,KAyBJ,GAAInF,EAAS,OAAO,qBAAKjB,UAAU,YAmBnC,OACE,qCACE,eAAC0F,EAAA,EAAD,WACE,cAAC,IAAD,CAAOtB,IAAI,KAAX,SACE,cAAC4E,EAAA,EAAD,CAAY1I,QAAQ,kBAAkBd,MAAOA,MAI/C,eAAC,IAAD,CAAO4E,IAAI,IAAX,UACE,cAACE,EAAA,EAAD,CAAQI,KAAK,KAAKnB,QAAS,kBAAM6C,GAAuB,IAAxD,SACE,cAACZ,EAAA,EAAD,CAAcrG,GAAG,kCAGnB,cAAC2I,EAAA,EAAD,CACEhD,OAAQiE,EACRhE,OAAQ,kBAAMqB,GAAwB2C,IACtCE,cAAc,cAHhB,SAKE,cAAC,EAAD,CACE7C,uBAAwBA,EACxBjH,GAAIA,YAMZ,cAAC,IAAD,CAAWa,UAAU,SA3DW,IAA/B4I,EAAoB/I,OAInB,cAAC6F,EAAA,EAAD,UACA,cAAC,IAAD,CAAOtB,IAAI,KAAX,SACE,qGAKC,KAqDL,cAAC,IAAD,CAAoBjF,GAAG,kBAAvB,SACE,cAACuG,EAAA,EAAD,UACE,cAAC,IAAD,CAAOtB,IAAI,KAAKpE,UAAU,OAA1B,SACE,cAAC0F,EAAA,EAAD,CAAK1F,UAAU,wBAAf,SACG4I,EAAoB3I,KAAI,SAAC6C,GACxB,YAAiBoG,IAAdpG,EAAKf,KACD,cAAC,IAAD,CAAOqC,IAAI,KAAK+E,GAAG,IAAIC,GAAG,IAAkBpJ,UAAU,OAAtD,SACL,cAAC,IAAD,CAAUU,KAAMoC,EAAMhB,SAAiC,IAAvBgB,EAAKb,iBADGa,EAAK3D,IAIxC,gBAMjB,cAAC,EAAD,CAAuBqJ,mBAhEA,SAACa,EAAGvG,GAG7B,OAFArB,YAAI,iCAAkCqB,EAAK4F,QAEnC5F,EAAK4F,QACX,IAAK,UACHG,EAAuBxC,EAAalH,GACpC,MAEF,IAAK,UACHiH,GAAuB","file":"static/js/challenges-default-view.1f2674b4.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { adminRoot } from '../../constants/defaultValues';\r\n\r\nconst getMenuTitle = (sub) => {\r\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub) => {\r\n  return path.split(sub)[0] + sub;\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <>\r\n      {heading && (\r\n        <h1>\r\n          <IntlMessages id={heading} />\r\n        </h1>\r\n      )}\r\n      {match ? <BreadcrumbItems match={match} /> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split('/').filter(Boolean);\r\n\r\n  if (paths[paths.length - 1].indexOf(':') > -1) {\r\n    paths = paths.filter((x) => x.indexOf(':') === -1);\r\n  }\r\n  return (\r\n    <>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import { useState } from 'react';\r\nimport instance from '../helpers/axiosInstance';\r\nimport { log } from '../helpers/Utils';\r\n\r\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\r\n  const [responseData, setData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const doRequest = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await instance({\r\n        url,\r\n        method,\r\n        headers,\r\n        data,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        if (nextSuccess) {\r\n          nextSuccess();\r\n        }\r\n        setLoading(false);\r\n        setData(response.data.data);\r\n      } else {\r\n        if (nextError) {\r\n          nextError(response.data.error);\r\n        }\r\n        setLoading(false);\r\n        setError(response.data.error);\r\n      }\r\n    } catch (err) {\r\n      log(err);\r\n      setLoading(false);\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  return [doRequest, loading, error, responseData];\r\n};\r\n\r\nexport default useRequest;\r\n","/* eslint-disable camelcase */\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardSubtitle,\r\n  CardText,\r\n  CardTitle,\r\n  NavLink,\r\n  Row,\r\n} from 'reactstrap';\r\nimport { Separator } from '../../components/common/CustomBootstrap';\r\nimport { adminRoot } from '../../constants/defaultValues';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nconst getStatusColor = (status) => {\r\n  if (status === 0) return 'outline-success';\r\n  if (status === 1) return 'outline-warning';\r\n  if (status === 'COMPLETED') return 'outline-danger';\r\n  return '';\r\n};\r\n\r\nconst getStatusText = (status) => {\r\n  if (status === 0) return 'Draft';\r\n  if (status === 1) return 'Under Review';\r\n  if (status === 2) return 'Approved';\r\n  return '';\r\n};\r\n\r\nconst getTypeText = (status) => {\r\n  if (status === 0) return 'Online';\r\n  if (status === 1) return 'Blender';\r\n  if (status === 2) return 'Offiline';\r\n  return '';\r\n};\r\n\r\nconst HackCard = ({ data, showEdit = true }) => {\r\n  const {\r\n    id,\r\n    name,\r\n    tagline,\r\n    submit_status,\r\n    hackathon_start,\r\n    application_end,\r\n    hackathon_website,\r\n    hackathon_type_id,\r\n    otherArray,\r\n    \r\n  } = data;\r\n  console.log(data);\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <CardTitle>\r\n          <p className=\"h2 lead\">\r\n            <a\r\n              href={hackathon_website}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              className=\"new-tab\"\r\n            >\r\n              {name}\r\n            </a>\r\n          </p>\r\n          <CardSubtitle className=\"text-small\">{tagline}</CardSubtitle>\r\n        </CardTitle>\r\n\r\n        <Row className=\"justify-content-center\">\r\n          {otherArray.sdg_goals.map((item) => (\r\n            <img\r\n              key={item.id}\r\n              src={`/assets/img/sdg/${item.id}.png`}\r\n              alt={item.name}\r\n              className=\"list-thumbnail align-self-center m-1 small hackcard-icon\"\r\n            />\r\n          ))}\r\n\r\n          <div className=\"vertical\" style={{ height: '45px' }} />\r\n\r\n          {otherArray.$mega_trends.map((item) => (\r\n            <img\r\n              key={item.id}\r\n              src={`/assets/img/mega-trends/${item.id}.png`}\r\n              alt={item.name}\r\n              className=\"list-thumbnail align-self-center m-1 small hackcard-icon\"\r\n            />\r\n          ))}\r\n        </Row>\r\n\r\n        <Separator className=\"my-4\" />\r\n\r\n        <CardTitle>\r\n          <IntlMessages id=\"hackcard.application\" />\r\n          <CardText>{application_end}</CardText>\r\n        </CardTitle>\r\n\r\n        <CardTitle>\r\n          <IntlMessages id=\"hackcard.hackthon\" />\r\n          <CardText>{hackathon_start}</CardText>\r\n        </CardTitle>\r\n\r\n        <Separator className=\"mb-4\" />\r\n\r\n        <Badge\r\n          color={getStatusColor(submit_status)}\r\n          pill\r\n          outline\r\n          className=\"mb-3 mr-3\"\r\n        >\r\n          {getStatusText(submit_status)}\r\n        </Badge>\r\n\r\n        <Badge color=\"outline-primary\" pill className=\"mb-3\">\r\n          {getTypeText(hackathon_type_id)}\r\n        </Badge>\r\n\r\n        <CardSubtitle className=\"text-small\">\r\n          <NavLink href={hackathon_website} target=\"_blank\" rel=\"noreferrer\">\r\n            <IntlMessages id=\"hackcard.view-more\" />\r\n          </NavLink>\r\n        </CardSubtitle>\r\n\r\n        <Row className=\"justify-content-center\">\r\n          {showEdit && (\r\n            <Button\r\n              className=\"m-1\"\r\n              outline\r\n              onClick={() => {\r\n                history.push(`${adminRoot}/challenges/basics/${id}`);\r\n              }}\r\n            >\r\n              <IntlMessages id=\"hackcard.edit-button\" />\r\n            </Button>\r\n          )}\r\n          <Button\r\n            className=\"m-1\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              history.push(`${adminRoot}/challenges/details/${id}`);\r\n            }}\r\n          >\r\n            <IntlMessages id=\"hackcard.view-details-button\" />\r\n          </Button>\r\n        </Row>\r\n\r\n        {/* <pre>{JSON.stringify(data, null, 2)}</pre> */}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default HackCard;\r\n","import React from 'react';\r\nimport { components } from 'react-select';\r\n\r\nconst CustomSelectInput = (props) => {\r\n  const customProps = { ...props };\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  CardTitle,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n  Tooltip,\r\n} from 'reactstrap';\r\nimport { sgdGoals } from '../../constants/defaultValues';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx } from '../common/CustomBootstrap';\r\n\r\nconst AddSDGModal = ({ setOpenAddSdg, values, setValues }) => {\r\n  const [checked, setChecked] = useState([]);\r\n\r\n  const handleChange = (items) => {\r\n    setChecked(items);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setValues({\r\n      ...values,\r\n      sdg_goals: sgdGoals.filter((x) => checked.includes(x.id)),\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [checked]);\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.add-sdg-title\" />\r\n        </h2>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Row className=\"justify-content-center\">\r\n          {sgdGoals.map((item) => (\r\n            <SDGItem\r\n              key={item.key}\r\n              item={item}\r\n              checked={checked}\r\n              setChecked={handleChange}\r\n            />\r\n          ))}\r\n        </Row>\r\n      </ModalBody>\r\n      <ModalFooter className=\"justify-content-end\">\r\n        <Button color=\"secondary\" onClick={() => setOpenAddSdg(false)}>\r\n          <IntlMessages id=\"challenges.modal.application-add\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SDGItem = ({ item, checked, setChecked }) => {\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  const handleChange = (data) => {\r\n    const checkedItems = [...checked];\r\n    const index = checkedItems.indexOf(data);\r\n    if (index === -1) {\r\n      checkedItems.push(data);\r\n    } else {\r\n      checkedItems.splice(index, 1);\r\n    }\r\n    setChecked(checkedItems);\r\n  };\r\n\r\n  return (\r\n    <Colxx xxs=\"6\" className=\"d-flex flex-row mb-4\">\r\n      <img\r\n        src={`/assets/img/sdg/${item.id}.png`}\r\n        alt={item.name}\r\n        className=\"img-thumbnail list-thumbnail align-self-center m-4 small\"\r\n      />\r\n      <div className=\"d-flex flex-grow-1 min-width-zero\">\r\n        <div className=\"pl-0 align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero\">\r\n          <div className=\"min-width-zero\">\r\n            <CardTitle\r\n              className=\"truncate text-small\"\r\n              id={`sdg_tooltip_${item.id}`}\r\n            >\r\n              {item.name}\r\n            </CardTitle>\r\n            <Button\r\n              onClick={() => handleChange(item.id)}\r\n              size=\"xs\"\r\n              color={checked.includes(item.id) ? 'success' : 'primary'}\r\n            >\r\n              {checked.includes(item.id) ? 'Selected' : 'Select'}\r\n            </Button>\r\n\r\n            <Tooltip\r\n              placement=\"top\"\r\n              isOpen={tooltipOpen}\r\n              target={`sdg_tooltip_${item.id}`}\r\n              toggle={() => setTooltipOpen(!tooltipOpen)}\r\n            >\r\n              {item.name}\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\nexport default AddSDGModal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  CardTitle,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n  Tooltip,\r\n} from 'reactstrap';\r\nimport { megaTrends } from '../../constants/defaultValues';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx } from '../common/CustomBootstrap';\r\n\r\nconst AddMegaTrendsModal = ({ setOpenMegaTrends, values, setValues }) => {\r\n  const [checked, setChecked] = useState([]);\r\n\r\n  const handleChange = (items) => {\r\n    setChecked(items);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setValues({\r\n      ...values,\r\n      mega_trends: megaTrends.filter((x) => checked.includes(x.id)),\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [checked]);\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.add-mega-trends-title\" />\r\n        </h2>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Row>\r\n          {megaTrends.map((item) => (\r\n            <MegaTrendItem\r\n              key={item.key}\r\n              item={item}\r\n              checked={checked}\r\n              setChecked={handleChange}\r\n            />\r\n          ))}\r\n        </Row>\r\n      </ModalBody>\r\n      <ModalFooter className=\"justify-content-end\">\r\n        <Button color=\"secondary\" onClick={() => setOpenMegaTrends(false)}>\r\n          <IntlMessages id=\"challenges.modal.application-add\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst MegaTrendItem = ({ item, checked, setChecked }) => {\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  const handleChange = (data) => {\r\n    const checkedItems = [...checked];\r\n    const index = checkedItems.indexOf(data);\r\n    if (index === -1) {\r\n      checkedItems.push(data);\r\n    } else {\r\n      checkedItems.splice(index, 1);\r\n    }\r\n    setChecked(checkedItems);\r\n  };\r\n\r\n  return (\r\n    <Colxx xxs=\"6\" className=\"d-flex flex-row mb-4\">\r\n      <img\r\n        src={`/assets/img/mega-trends/${item.id}.png`}\r\n        alt={item.name}\r\n        className=\"img-thumbnail list-thumbnail align-self-center m-4 small\"\r\n      />\r\n      <div className=\"d-flex flex-grow-1 min-width-zero\">\r\n        <div className=\"pl-0 align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero\">\r\n          <div className=\"min-width-zero\">\r\n            <CardTitle\r\n              className=\"truncate text-small\"\r\n              id={`mega_trend_tooltip_${item.id}`}\r\n            >\r\n              {item.name}\r\n            </CardTitle>\r\n            <Button\r\n              onClick={() => handleChange(item.id)}\r\n              size=\"xs\"\r\n              color={checked.includes(item.id) ? 'success' : 'primary'}\r\n            >\r\n              {checked.includes(item.id) ? 'Added' : 'Add'}\r\n            </Button>\r\n\r\n            <Tooltip\r\n              placement=\"top\"\r\n              isOpen={tooltipOpen}\r\n              target={`mega_trend_tooltip_${item.id}`}\r\n              toggle={() => setTooltipOpen(!tooltipOpen)}\r\n            >\r\n              {item.name}\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\nexport default AddMegaTrendsModal;\r\n\r\n","/* eslint-disable prefer-promise-reject-errors */\r\nimport React, { useState } from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport {\r\n  Badge,\r\n  Button,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport { connect } from 'react-redux';\r\n\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport CustomSelectInput from '../common/CustomSelectInput';\r\nimport { hackthonTypeOptions } from '../../constants/defaultValues';\r\nimport AddSDGModal from './AddSDGModal';\r\nimport AddMegaTrendsModal from './AddMegaTrendsModal';\r\nimport { getAllHackathons } from '../../redux/actions';\r\nimport { NotificationManager } from '../common/react-notifications';\r\n\r\nimport useRequest from '../../hooks/use-request';\r\nimport { wait } from '../../helpers/Utils';\r\n\r\nconst INIT_STATE = {\r\n  name: '',\r\n  hackathon_type_id: 1,\r\n  sdg_goals: [],\r\n  mega_trends: [],\r\n};\r\n\r\nconst CreateHackathonModal = ({\r\n  setOpenCreateHackathon,\r\n  id,\r\n  accessToken,\r\n  refresh,\r\n}) => {\r\n  const [openAddSdg, setOpenAddSdg] = useState(false);\r\n  const [openMegaTrends, setOpenMegaTrends] = useState(false);\r\n\r\n  const [values, setValues] = useState({ ...INIT_STATE, organizer_id: id });\r\n\r\n  const [selectedOption, setSelectedOption] = useState({\r\n    label: 'Blender',\r\n    value: 1,\r\n    key: 1,\r\n  });\r\n\r\n  const [doRequest, loading] = useRequest({\r\n    url: '/createHackathon',\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: accessToken,\r\n    },\r\n    data: values,\r\n    nextSuccess: () => {\r\n      NotificationManager.success(\r\n        'Hackathon created successfully!',\r\n        'Hackathon Create Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n      refresh(accessToken, id);\r\n      setOpenCreateHackathon(false);\r\n\r\n      wait(400, () => {\r\n        setValues({ ...INIT_STATE, organizer_id: id });\r\n      });\r\n    },\r\n    nextError: (error) => {\r\n      NotificationManager.error(\r\n        error,\r\n        'Hackathon Create Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    },\r\n  });\r\n\r\n  const handleChange = (event, key, value = false) => {\r\n    setValues({\r\n      ...values,\r\n      [key]: value ? event : event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    doRequest();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.modal-title\" />\r\n        </h2>\r\n        <p className=\"m-0\">\r\n          <IntlMessages id=\"challenges.modal.modal-sub-title\" />\r\n        </p>\r\n      </ModalHeader>\r\n\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.name\" />\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"link-to-code-of-control\"\r\n            placeholder=\"Enter a Name\"\r\n            value={values.name}\r\n            onChange={(event) => {\r\n              handleChange(event, 'name');\r\n            }}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.hackathon-type\" />\r\n          </Label>\r\n          <Select\r\n            components={{ Input: CustomSelectInput }}\r\n            className=\"react-select\"\r\n            classNamePrefix=\"react-select\"\r\n            name=\"hackathon-type-id\"\r\n            value={selectedOption}\r\n            onChange={(data) => {\r\n              setSelectedOption(data);\r\n              console.log(data);\r\n              handleChange(data.value, 'hackathon_type_id', true);\r\n            }}\r\n            options={hackthonTypeOptions}\r\n            placeholder=\"Enter a Hackthon Type\"\r\n          />\r\n        </FormGroup>\r\n        <FormGroup className=\"text-center\">\r\n          <Button onClick={() => setOpenAddSdg(true)} size=\"xs\" className=\"m-2\">\r\n            <i className=\"iconsminds-add mr-2\" aria-hidden=\"true\" />\r\n            <IntlMessages id=\"challenges.modal.add-sdg-button\" />\r\n          </Button>\r\n\r\n          <Button\r\n            onClick={() => setOpenMegaTrends(true)}\r\n            size=\"xs\"\r\n            className=\"m-2\"\r\n          >\r\n            <i className=\"iconsminds-add mr-2\" aria-hidden=\"true\" />\r\n            <IntlMessages id=\"challenges.modal.add-mega-trends-button\" />\r\n          </Button>\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          {values.sdg_goals.length ? (\r\n            <>\r\n              <Label>SDG Goals</Label>\r\n              <div className=\"d-flex justify-content-around flex-wrap\">\r\n                {values.sdg_goals.map((item) => (\r\n                  <Badge\r\n                    pill\r\n                    color=\"outline-primary\"\r\n                    key={item.id}\r\n                    className=\"mb-2\"\r\n                  >\r\n                    {item.name}\r\n                  </Badge>\r\n                ))}\r\n              </div>\r\n            </>\r\n          ) : null}\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          {values.mega_trends.length ? (\r\n            <>\r\n              <Label>Mega Trends</Label>\r\n              <div className=\"d-flex justify-content-around flex-wrap\">\r\n                {values.mega_trends.map((item) => (\r\n                  <Badge\r\n                    pill\r\n                    key={item.id}\r\n                    className=\"mb-2\"\r\n                    color=\"outline-primary\"\r\n                  >\r\n                    {item.name}\r\n                  </Badge>\r\n                ))}\r\n              </div>\r\n            </>\r\n          ) : null}\r\n        </FormGroup>\r\n\r\n        <Modal\r\n          isOpen={openAddSdg}\r\n          toggle={() => setOpenAddSdg(!openAddSdg)}\r\n          size=\"lg\"\r\n        >\r\n          <AddSDGModal\r\n            setOpenAddSdg={setOpenAddSdg}\r\n            values={values}\r\n            setValues={setValues}\r\n          />\r\n        </Modal>\r\n        <Modal\r\n          isOpen={openMegaTrends}\r\n          toggle={() => setOpenMegaTrends(!openMegaTrends)}\r\n          size=\"lg\"\r\n          modalClassName=\"rounded\"\r\n        >\r\n          <AddMegaTrendsModal\r\n            setOpenMegaTrends={setOpenMegaTrends}\r\n            values={values}\r\n            setValues={setValues}\r\n          />\r\n        </Modal>\r\n      </ModalBody>\r\n\r\n      <ModalFooter className=\"justify-content-end\">\r\n        <Button\r\n          id=\"create-hackthon\"\r\n          color=\"primary\"\r\n          className={`btn-shadow btn-multiple-state ${\r\n            loading ? 'show-spinner' : ''\r\n          }`}\r\n          onClick={handleSubmit}\r\n        >\r\n          <span className=\"spinner d-inline-block\">\r\n            <span className=\"bounce1\" />\r\n            <span className=\"bounce2\" />\r\n            <span className=\"bounce3\" />\r\n          </span>\r\n          <span className=\"label\">\r\n            <IntlMessages id=\"challenges.create-hackathon\" />\r\n          </span>\r\n        </Button>\r\n\r\n        <Button color=\"danger\" onClick={() => setOpenCreateHackathon(false)}>\r\n          <IntlMessages id=\"challenges.modal.cancel-button\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nCreateHackathonModal.proptype = {\r\n  setOpenCreateHackathon: Proptypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { accessToken } = authUser;\r\n  return { accessToken };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  refresh: getAllHackathons,\r\n})(CreateHackathonModal);\r\n","import React from 'react';\r\nimport { ContextMenu, MenuItem } from 'react-contextmenu';\r\n\r\nconst ChallengesContextMenu = ({ onContextMenuClick }) => {\r\n  return (\r\n    <ContextMenu id=\"challenges_menu\" style={{ borderRadius: '16px' }}>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'refresh' }}>\r\n        <i className=\"simple-icon-refresh\" /> <span> Refresh</span>\r\n      </MenuItem>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'add-new' }}>\r\n        <i className=\"simple-icon-plus\" /> <span> Add Hackathon</span>\r\n      </MenuItem>\r\n    </ContextMenu>\r\n  );\r\n};\r\n\r\nexport default ChallengesContextMenu;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ContextMenuTrigger } from 'react-contextmenu';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, Row } from 'reactstrap';\r\n\r\nimport CreateHackathonModal from '../../../components/application/CreateHackathonModal';\r\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\r\nimport HackCard from '../../../containers/application/HackathonCard';\r\n\r\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\r\nimport IntlMessages from '../../../helpers/IntlMessages';\r\nimport { getCurrentUser, log } from '../../../helpers/Utils';\r\n\r\nimport { getAllHackathons } from '../../../redux/actions';\r\nimport ChallengesContextMenu from './components/context-menu';\r\n\r\nconst DefaultView = ({\r\n  match,\r\n  accessToken,\r\n  organizerHackathons,\r\n  getAllHackathonsAction,\r\n  loading,\r\n}) => {\r\n  const { id } = getCurrentUser();\r\n  console.log(id);\r\n  useEffect(() => {\r\n    getAllHackathonsAction(accessToken, id);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const [openCreateHackathon, setOpenCreateHackathon] = useState(false);\r\n\r\n  const defaultPage = ()=>{\r\n    if(organizerHackathons.length === 0)\r\n    {\r\n      return(\r\n            \r\n        <Row>\r\n        <Colxx xxs=\"12\">\r\n          <h1>You Have not Added any Hackathon Yet! Create a Hackathon First!</h1>\r\n        </Colxx>\r\n      </Row>\r\n              );\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  if (loading) return <div className=\"loading\" />;\r\n\r\n  const onContextMenuClick = (e, item) => {\r\n    log('onContextMenuClick - action : ', item.action);\r\n\r\n    switch (item.action) {\r\n      case 'refresh':\r\n        getAllHackathonsAction(accessToken, id);\r\n        break;\r\n\r\n      case 'add-new':\r\n        setOpenCreateHackathon(true);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"10\">\r\n          <Breadcrumb heading=\"menu.challenges\" match={match} />\r\n        </Colxx>\r\n\r\n    \r\n        <Colxx xxs=\"2\">\r\n          <Button size=\"sm\" onClick={() => setOpenCreateHackathon(true)}>\r\n            <IntlMessages id=\"challenges.create-hackathon\" />\r\n          </Button>\r\n\r\n          <Modal\r\n            isOpen={openCreateHackathon}\r\n            toggle={() => setOpenCreateHackathon(!openCreateHackathon)}\r\n            wrapClassName=\"modal-right\"\r\n          >\r\n            <CreateHackathonModal\r\n              setOpenCreateHackathon={setOpenCreateHackathon}\r\n              id={id}\r\n            />\r\n          </Modal>\r\n        </Colxx>\r\n      </Row>\r\n\r\n      <Separator className=\"mb-5\" />\r\n      { defaultPage() }\r\n\r\n      {/* <pre>{JSON.stringify(organizerHackathons, null, 2)}</pre> */}\r\n\r\n      <ContextMenuTrigger id=\"challenges_menu\">\r\n        <Row>\r\n          <Colxx xxs=\"12\" className=\"mb-4\">\r\n            <Row className=\"justify-content-start\">\r\n              {organizerHackathons.map((item) => {\r\n                if(item.name !== undefined){\r\n                return <Colxx xxs=\"12\" sm=\"6\" md=\"4\" key={item.id} className=\"mb-4\">\r\n                  <HackCard data={item} showEdit={item.submit_status === 0} />\r\n                </Colxx>\r\n                }\r\n                return null;\r\n              })}\r\n            </Row>\r\n          </Colxx>\r\n        </Row>\r\n      </ContextMenuTrigger>\r\n      <ChallengesContextMenu onContextMenuClick={onContextMenuClick} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser, hackathonData }) => {\r\n  const { accessToken } = authUser;\r\n  const { organizerHackathons, loading, error } = hackathonData;\r\n  return { accessToken, organizerHackathons, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getAllHackathonsAction: getAllHackathons,\r\n})(DefaultView);\r\n"],"sourceRoot":""}