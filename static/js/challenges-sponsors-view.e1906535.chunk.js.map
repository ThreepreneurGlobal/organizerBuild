{"version":3,"sources":["containers/navs/Breadcrumb.js","components/StateButton.js","containers/application/InputDisplay.js","components/application/AddSponsorModal.js","components/application/SponsorsList.js","views/app/challenges/sponsors-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","StateButton","color","size","children","onClick","next","useState","status","setStatus","message","setMessage","messageShow","setMessageShow","classnames","then","res","catch","err","finally","setTimeout","disabled","placement","isOpen","target","InputDisplay","messageId","name","value","intputType","type","proptype","PropTypes","string","isRequired","any","AddSponsorModel","setOpenAddModal","hackathon_id","formValues","setFormValues","access_token","getCurrentUser","handleSubmit","newData","a","Promise","success","failed","instance","method","url","data","sponsors","headers","Authorization","response","console","log","addJudge","ModalHeader","IntlMessages","ModalBody","FormGroup","Label","Input","onChange","event","key","handleChange","ModalFooter","window","location","reload","Button","SponsorsList","loading","setLoading","setData","error","setError","fetchQuestions","judges","useEffect","AppError","Card","CardBody","role","item","Sponsors","params","openAddModal","Row","xxs","Breadcrumb","md","CustomInput","label","Modal","toggle","href"],"mappings":"+JAAA,4DAOMA,EAAe,SAACC,GACpB,MAAI,WAAIA,KAAUC,IAAkB,cAAC,IAAD,CAAcC,GAAG,cAC9C,cAAC,IAAD,CAAcA,GAAE,eAAUF,MAG7BG,EAAS,SAACC,EAAMJ,GACpB,OAAOI,EAAKC,MAAML,GAAK,GAAKA,GAgBxBM,EAAkB,SAAC,GAAe,IAChCF,EAD+B,EAAZG,MACNH,KAAKI,OAAO,GAC3BC,EAAQL,EAAKC,MAAM,KAAKK,OAAOC,SAKnC,OAHIF,EAAMA,EAAMG,OAAS,GAAGC,QAAQ,MAAQ,IAC1CJ,EAAQA,EAAMC,QAAO,SAACI,GAAD,OAA2B,IAApBA,EAAED,QAAQ,SAGtC,mCACE,cAAC,IAAD,CAAYE,UAAU,gEAAtB,SACGN,EAAMO,KAAI,SAAChB,EAAKiB,GACf,OACE,cAAC,IAAD,CAA4BC,OAAQT,EAAMG,SAAWK,EAAQ,EAA7D,SACGR,EAAMG,SAAWK,EAAQ,EACxB,cAAC,IAAD,CAASE,GAAE,WAAMhB,EAAOC,EAAMJ,IAA9B,SACGD,EAAaC,KAGhBD,EAAaC,IANIiB,WAgBlBG,IAzCa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASd,EAAY,EAAZA,MACtC,OACE,qCACGc,GACC,6BACE,cAAC,IAAD,CAAcnB,GAAImB,MAGtB,cAACf,EAAD,CAAiBC,MAAOA,S,0GCmDfe,IAvEK,SAAC,GAQd,IAPLpB,EAOI,EAPJA,GACAa,EAMI,EANJA,UACAQ,EAKI,EALJA,MACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,QACAC,EACI,EADJA,KACI,EACwBC,mBAAS,WADjC,mBACGC,EADH,KACWC,EADX,OAE0BF,mBAAS,IAFnC,mBAEGG,EAFH,KAEYC,EAFZ,OAGkCJ,oBAAS,GAH3C,mBAGGK,EAHH,KAGgBC,EAHhB,KA6BJ,OACE,+BACE,eAAC,IAAD,CACEhC,GAAIA,EACJa,UAAS,8BAAyBA,EAAzB,aAAuCoB,IAAW,CACzD,eAA2B,eAAXN,EAChB,eAA2B,YAAXA,EAChB,YAAwB,SAAXA,KAEfL,KAAMA,EACND,MAAOA,EACPG,QAnCgB,WACpBI,EAAU,cAEVJ,IACGU,MAAK,SAACC,GACLL,EAAWK,GACXP,EAAU,cAEXQ,OAAM,SAACC,GACNP,EAAWO,GACXT,EAAU,WAEXU,SAAQ,WACPN,GAAe,GACfO,YAAW,WACTX,EAAU,WACVI,GAAe,GACXP,GACFA,MAED,SAgBHe,SAAqB,YAAXb,EAVZ,UAYE,cAAC,IAAD,CAASc,UAAU,MAAMC,OAAQX,EAAaY,OAAQ3C,EAAtD,SACE,cAAC,IAAD,UAAc6B,MAEhB,uBAAMhB,UAAU,yBAAhB,UACE,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,eAElB,sBAAMA,UAAU,eAAhB,SACE,mBAAGA,UAAU,wBAEf,sBAAMA,UAAU,YAAhB,SACE,mBAAGA,UAAU,8BAEf,sBAAMA,UAAU,QAAhB,SAAyBU,W,iCCrEjC,sEAKMqB,EAAe,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAiC,IAA1BC,kBAA0B,MAAb,OAAa,EACxE,OACE,eAAC,IAAD,CAAWnC,UAAU,YAArB,UACE,cAAC,IAAD,CAAOA,UAAU,OAAjB,SACE,cAAC,IAAD,CAAcb,GAAI6C,MAGpB,cAAC,IAAD,CACEI,KAAMD,EACNnC,UAAU,eACViC,KAAMA,EACNC,MAAOA,EACPP,UAAQ,QAMhBI,EAAaM,SAAW,CACtBL,UAAWM,IAAUC,OAAOC,WAC5BP,KAAMK,IAAUC,OAAOC,WACvBN,MAAOI,IAAUG,IAAID,WACrBL,WAAYG,IAAUC,QAGTR,O,iPCsEAW,EAnFS,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,gBAAiBxD,EAAS,EAATA,GAAS,EACf0B,mBAAS,CAC3C+B,aAAczD,EACd8C,KAAM,KAH2C,mBAC5CY,EAD4C,KAChCC,EADgC,KAM3CC,EAAiBC,cAAjBD,aASFE,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EACZ,IAAIC,SAAQ,SAACC,EAASC,IACb,uCAAG,4BAAAH,EAAA,+EAEUI,YAAS,CAC9BC,OAAQ,OACRC,IAAK,eACLC,KAAM,CAAEC,SAAS,eAAMT,IACvBU,QAAS,CACPC,cAAc,UAAD,OAAYd,MAPhB,OAEPe,EAFO,OAWIA,EAATJ,KACCL,SACPP,EAAc,2BAAKD,GAAeK,IAClCG,EAAQ,oCAERC,EAAO,+BAhBI,gDAmBbS,QAAQC,IAAR,MACAV,EAAO,+BApBM,yDAAH,qDAwBdW,OA1BiB,2CAAH,sDA8BlB,OACE,qCACE,cAACC,EAAA,EAAD,UACE,oBAAIlE,UAAU,OAAd,SACE,cAACmE,EAAA,EAAD,CAAchF,GAAG,uDAIrB,cAACiF,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACH,EAAA,EAAD,CAAchF,GAAG,+BAEnB,cAACoF,EAAA,EAAD,CACEnC,KAAK,OACLF,MAAOW,EAAWZ,KAClBuC,SAAU,SAACC,GAAD,OArDC,SAACA,EAAOC,GAAwB,IAAnBxC,EAAkB,wDAClDY,EAAc,2BACTD,GADQ,IAEX,CAAC6B,GAAMxC,EAAQuC,EAAQA,EAAM3C,OAAOI,SAkDTyC,CAAaF,EAAO,gBAK/C,eAACG,EAAA,EAAD,WACE,cAACrE,EAAA,EAAD,CACEpB,GAAG,qBACHqB,MAAM,YACNG,QAAS,kBAAMsC,EAAaJ,IAC5BjC,KAAM,kBAAMiE,OAAOC,SAASC,UAJ9B,SAME,cAACZ,EAAA,EAAD,CAAchF,GAAG,uCAEnB,cAAC6F,EAAA,EAAD,CAAQxE,MAAM,SAASG,QAAS,kBAAMgC,GAAgB,IAAtD,SACE,cAACwB,EAAA,EAAD,CAAchF,GAAG,iD,0CCdZ8F,EArEM,SAAC,GAAgB,IAAD,IAAb9F,UAAa,MAAR,EAAQ,IACL0B,oBAAS,GADJ,mBAC5BqE,EAD4B,KACnBC,EADmB,OAEXtE,mBAAS,IAFE,mBAE5B6C,EAF4B,KAEtB0B,EAFsB,OAGTvE,mBAAS,IAHA,mBAG5BwE,EAH4B,KAGrBC,EAHqB,KAK3BvC,EAAiBC,cAAjBD,aAEFwC,EAAc,uCAAG,4BAAApC,EAAA,+EAEII,YAAS,CAC9BC,OAAQ,MACRC,IAAI,gBAAD,OAAkBtE,GACrByE,QAAS,CACPC,cAAc,UAAD,OAAYd,MANV,QAEbe,EAFa,QAUNJ,KAAKL,QAChB+B,EAAQtB,EAASJ,KAAK8B,QAEtBF,EAASxB,EAASJ,KAAK1C,SAEzBmE,GAAW,GAfQ,gDAiBnBG,EAAS,KAAItE,SACbmE,GAAW,GAlBQ,yDAAH,qDA0BpB,GAJAM,qBAAU,WACRF,MACC,IAECF,EAAO,MAAM,IAAIK,IAASL,GAE9B,OACE,qCACE,cAACM,EAAA,EAAD,CAAM3F,UAAU,OAAhB,SACE,cAAC4F,EAAA,EAAD,UACE,oBAAI5F,UAAU,KAAd,SACE,cAACmE,EAAA,EAAD,CAAchF,GAAG,oCAItB+F,EACC,qBAAKlF,UAAU,oCAAf,SACE,qBAAKA,UAAU,iBAAiB6F,KAAK,SAArC,SACE,sBAAM7F,UAAU,UAAhB,4BAIJ,mCACG0D,EAAKzD,KAAI,SAAC6F,GAAD,OACR,cAACH,EAAA,EAAD,CAAoB3F,UAAU,OAA9B,SACE,cAAC4F,EAAA,EAAD,UACE,cAAC7D,EAAA,EAAD,CACEC,UAAU,2BACVC,KAAK,oBACLC,MAAO4D,EAAK7D,UALP6D,EAAK3G,aC4Bb4G,UAxEE,SAAC,GAAe,IAAbvG,EAAY,EAAZA,MACVL,EAAOK,EAAMwG,OAAb7G,GAER,IAAKA,EAAI,MAAM,IAAIuG,IAAS,iCAHE,MAKU7E,oBAAS,GALnB,mBAKvBoF,EALuB,KAKTtD,EALS,KAO9B,OACE,qCACE,cAACuD,EAAA,EAAD,UACE,eAAC,IAAD,CAAOC,IAAI,KAAX,UACE,cAACC,EAAA,EAAD,CAAY9F,QAAQ,gBAAgBd,MAAOA,IAC3C,cAAC,IAAD,CAAWQ,UAAU,cAIzB,eAACkG,EAAA,EAAD,CAAKlG,UAAU,yBAAf,UACE,cAAC,IAAD,CAAOmG,IAAI,KAAKE,GAAG,IAAnB,SACE,cAAC,EAAD,CAAclH,GAAIA,MAGpB,cAAC,IAAD,CAAOgH,IAAI,KAAKE,GAAG,IAAnB,SACE,cAACV,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACM,EAAA,EAAD,CAAKlG,UAAU,6BAAf,SACE,cAACgF,EAAA,EAAD,CAAQrE,QAAS,kBAAMgC,GAAgB,IAAvC,SACE,cAACwB,EAAA,EAAD,CAAchF,GAAG,sCAIrB,cAAC+G,EAAA,EAAD,CAAKlG,UAAU,6BAAf,SACE,cAACsG,EAAA,EAAD,CACElE,KAAK,WACLmE,MAAO,cAACpC,EAAA,EAAD,CAAchF,GAAG,wCAI5B,cAACqH,EAAA,EAAD,CACE3E,OAAQoE,EACRQ,OAAQ,kBAAM9D,GAAiBsD,IAFjC,SAIE,cAAC,EAAD,CAAiBtD,gBAAiBA,EAAiBxD,GAAIA,gBAOjE,cAAC+G,EAAA,EAAD,UACE,cAAC,IAAD,UACE,eAAC7B,EAAA,EAAD,CAAWrE,UAAU,cAArB,UACE,cAACgF,EAAA,EAAD,CACExE,MAAM,UACNR,UAAU,MACV0G,KAAI,UAAKxH,IAAL,8BAAoCC,GAH1C,SAKE,cAACgF,EAAA,EAAD,CAAchF,GAAG,qBAEnB,cAAC6F,EAAA,EAAD,CACExE,MAAM,UACNR,UAAU,MACV0G,KAAI,UAAKxH,IAAL,2BAAiCC,GAHvC,SAKE,cAACgF,EAAA,EAAD,CAAchF,GAAG","file":"static/js/challenges-sponsors-view.e1906535.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/').filter(Boolean);\n\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import React, { useState } from 'react';\nimport { Button, Popover, PopoverBody } from 'reactstrap';\nimport classnames from 'classnames';\n\nconst StateButton = ({\n  id,\n  className,\n  color,\n  size,\n  children,\n  onClick,\n  next,\n}) => {\n  const [status, setStatus] = useState('default');\n  const [message, setMessage] = useState('');\n  const [messageShow, setMessageShow] = useState(false);\n\n  const handleOnClick = () => {\n    setStatus('processing');\n\n    onClick()\n      .then((res) => {\n        setMessage(res);\n        setStatus('success');\n      })\n      .catch((err) => {\n        setMessage(err);\n        setStatus('fail');\n      })\n      .finally(() => {\n        setMessageShow(true);\n        setTimeout(() => {\n          setStatus('default');\n          setMessageShow(false);\n          if (next) {\n            next();\n          }\n        }, 3000);\n      });\n  };\n\n  return (\n    <span>\n      <Button\n        id={id}\n        className={`btn-multiple-state  ${className}  ${classnames({\n          'show-spinner': status === 'processing',\n          'show-success': status === 'success',\n          'show-fail': status === 'fail',\n        })}`}\n        size={size}\n        color={color}\n        onClick={handleOnClick}\n        disabled={status !== 'default'}\n      >\n        <Popover placement=\"top\" isOpen={messageShow} target={id}>\n          <PopoverBody>{message}</PopoverBody>\n        </Popover>\n        <span className=\"spinner d-inline-block\">\n          <span className=\"bounce1\" />\n          <span className=\"bounce2\" />\n          <span className=\"bounce3\" />\n        </span>\n        <span className=\"icon success\">\n          <i className=\"simple-icon-check\" />\n        </span>\n        <span className=\"icon fail\">\n          <i className=\"simple-icon-exclamation\" />\n        </span>\n        <span className=\"label\">{children}</span>\n      </Button>\n    </span>\n  );\n};\n\nexport default StateButton;\n","import React from 'react';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nconst InputDisplay = ({ messageId, name, value, intputType = 'text' }) => {\n  return (\n    <FormGroup className=\"mb-2 mt-4\">\n      <Label className=\"lead\">\n        <IntlMessages id={messageId} />\n      </Label>\n\n      <Input\n        type={intputType}\n        className=\"form-control\"\n        name={name}\n        value={value}\n        disabled\n      />\n    </FormGroup>\n  );\n};\n\nInputDisplay.proptype = {\n  messageId: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.any.isRequired,\n  intputType: PropTypes.string,\n};\n\nexport default InputDisplay;\n","/* eslint-disable camelcase */\n/* eslint-disable prefer-promise-reject-errors */\nimport React, { useState } from 'react';\nimport {\n  Button,\n  FormGroup,\n  Input,\n  Label,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\nimport instance from '../../helpers/axiosInstance';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { getCurrentUser } from '../../helpers/Utils';\nimport StateButton from '../StateButton';\n\nconst AddSponsorModel = ({ setOpenAddModal, id }) => {\n  const [formValues, setFormValues] = useState({\n    hackathon_id: id,\n    name: '',\n  });\n\n  const { access_token } = getCurrentUser();\n\n  const handleChange = (event, key, value = false) => {\n    setFormValues({\n      ...formValues,\n      [key]: value ? event : event.target.value,\n    });\n  };\n\n  const handleSubmit = async (newData) => {\n    return new Promise((success, failed) => {\n      const addJudge = async () => {\n        try {\n          const response = await instance({\n            method: 'POST',\n            url: '/addSponsors',\n            data: { sponsors: { ...newData } },\n            headers: {\n              Authorization: `Bearer ${access_token}`,\n            },\n          });\n\n          const { data } = response;\n          if (data.success) {\n            setFormValues({ ...formValues, ...newData });\n            success('Hackathon updated successfully!');\n          } else {\n            failed('Failed to update hackathon!');\n          }\n        } catch (error) {\n          console.log(error);\n          failed('Failed to update hackathon!');\n        }\n      };\n\n      addJudge();\n    });\n  };\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.application-add-sponsor-title\" />\n        </h2>\n      </ModalHeader>\n\n      <ModalBody>\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.sponsor\" />\n          </Label>\n          <Input\n            type=\"text\"\n            value={formValues.name}\n            onChange={(event) => handleChange(event, 'name')}\n          />\n        </FormGroup>\n      </ModalBody>\n\n      <ModalFooter>\n        <StateButton\n          id=\"add-sponsor-buttom\"\n          color=\"secondary\"\n          onClick={() => handleSubmit(formValues)}\n          next={() => window.location.reload()}\n        >\n          <IntlMessages id=\"challenges.modal.application-add\" />\n        </StateButton>\n        <Button color=\"danger\" onClick={() => setOpenAddModal(false)}>\n          <IntlMessages id=\"challenges.modal.application-cancel\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nexport default AddSponsorModel;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport InputDisplay from '../../containers/application/InputDisplay';\nimport AppError from '../../helpers/AppError';\nimport instance from '../../helpers/axiosInstance';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { getCurrentUser } from '../../helpers/Utils';\n\nconst SponsorsList = ({ id = 1 }) => {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [error, setError] = useState('');\n\n  const { access_token } = getCurrentUser();\n\n  const fetchQuestions = async () => {\n    try {\n      const response = await instance({\n        method: 'GET',\n        url: `/getSponsors/${id}`,\n        headers: {\n          Authorization: `Bearer ${access_token}`,\n        },\n      });\n\n      if (response.data.success) {\n        setData(response.data.judges);\n      } else {\n        setError(response.data.message);\n      }\n      setLoading(false);\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  if (error) throw new AppError(error);\n\n  return (\n    <>\n      <Card className=\"mb-4\">\n        <CardBody>\n          <h3 className=\"h3\">\n            <IntlMessages id=\"challenges.added-sponsors\" />\n          </h3>\n        </CardBody>\n      </Card>\n      {loading ? (\n        <div className=\"d-flex justify-content-center m-4\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      ) : (\n        <>\n          {data.map((item) => (\n            <Card key={item.id} className=\"mb-4\">\n              <CardBody>\n                <InputDisplay\n                  messageId=\"challenges.modal.sponsor\"\n                  name=\"challenges-prizes\"\n                  value={item.name}\n                />\n              </CardBody>\n            </Card>\n          ))}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SponsorsList;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CustomInput,\n  FormGroup,\n  Modal,\n  Row,\n} from 'reactstrap';\nimport AddSponsorModel from '../../../components/application/AddSponsorModal';\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport { adminRoot } from '../../../constants/defaultValues';\n\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport AppError from '../../../helpers/AppError';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport SponsorsList from '../../../components/application/SponsorsList';\n\nconst Sponsors = ({ match }) => {\n  const { id } = match.params;\n\n  if (!id) throw new AppError('Please provide a Hackathon ID');\n\n  const [openAddModal, setOpenAddModal] = useState(false);\n\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.sponsors\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        <Colxx xxs=\"12\" md=\"7\">\n          <SponsorsList id={id} />\n        </Colxx>\n\n        <Colxx xxs=\"12\" md=\"5\">\n          <Card>\n            <CardBody>\n              <Row className=\"justify-content-center m-2\">\n                <Button onClick={() => setOpenAddModal(true)}>\n                  <IntlMessages id=\"challenges.add-sponsor-button\" />\n                </Button>\n              </Row>\n\n              <Row className=\"justify-content-center m-2\">\n                <CustomInput\n                  type=\"checkbox\"\n                  label={<IntlMessages id=\"challenges.add-sponsor-checkbox\" />}\n                />\n              </Row>\n\n              <Modal\n                isOpen={openAddModal}\n                toggle={() => setOpenAddModal(!openAddModal)}\n              >\n                <AddSponsorModel setOpenAddModal={setOpenAddModal} id={id} />\n              </Modal>\n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n\n      <Row>\n        <Colxx>\n          <FormGroup className=\"text-center\">\n            <Button\n              color=\"primary\"\n              className=\"m-3\"\n              href={`${adminRoot}/challenges/judges/${id}`}\n            >\n              <IntlMessages id=\"forms.previous\" />\n            </Button>\n            <Button\n              color=\"primary\"\n              className=\"m-3\"\n              href={`${adminRoot}/challenges/faq/${id}`}\n            >\n              <IntlMessages id=\"forms.next\" />\n            </Button>\n          </FormGroup>\n        </Colxx>\n      </Row>\n    </>\n  );\n};\n\nexport default Sponsors;\n"],"sourceRoot":""}