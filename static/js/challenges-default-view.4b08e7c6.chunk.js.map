{"version":3,"sources":["containers/navs/Breadcrumb.js","components/StateButton.js","hooks/use-localstorage.js","components/common/CustomSelectInput.js","components/application/AddSDGModal.js","components/application/AddMegaTrendsModal.js","components/application/CreateHackathonModal.js","containers/application/HackathonCard.js","hooks/use-fetch-local-storage.js","views/app/challenges/default-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","StateButton","color","size","children","onClick","next","useState","status","setStatus","message","setMessage","messageShow","setMessageShow","classnames","then","res","catch","err","finally","setTimeout","disabled","placement","isOpen","target","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","handleStorage","useCallback","event","newValue","setValue","value","valueToStore","Function","setItem","stringify","useEffect","addEventListener","removeEventListener","removeItem","CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","SDGItem","checked","setChecked","tooltipOpen","setTooltipOpen","xxs","src","alt","name","CardTitle","Button","data","checkedItems","push","splice","handleChange","includes","Tooltip","toggle","AddSDGModal","setOpenAddSdg","ModalHeader","IntlMessages","ModalBody","Row","sgdGoals","ModalFooter","MegaTrendItem","AddMegaTrendsModal","setOpenMegaTrends","megaTrends","CreateHackathonModal","setOpenCreateHackathon","openAddSdg","openMegaTrends","organizer_id","hackathon_type_id","formValues","setFormValues","selectedOption","setSelectedOption","handleSubmit","newData","a","Promise","success","failed","instance","method","url","response","createHackathon","FormGroup","Label","type","placeholder","onChange","components","classNamePrefix","options","hackthonTypeOptions","aria-hidden","Modal","modalClassName","location","reload","proptype","Proptypes","func","isRequired","getStatusColor","getStatusText","getTypeText","HackCard","tagline","hackathon_start","application_start","application_end","Card","CardBody","CardSubtitle","CardText","Badge","pill","outline","href","useFetchLocalStorage","refresh","loading","setLoading","setError","setData","remove","fetchData","propTypes","PropTypes","string","bool","DefaultView","getCurrentUser","hackathonDataStorageKey","openCreateHackathon","AppError","Breadcrumb","wrapClassName","sm","md"],"mappings":"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","file":"static/js/challenges-default-view.4b08e7c6.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/').filter(Boolean);\n\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import React, { useState } from 'react';\nimport { Button, Popover, PopoverBody } from 'reactstrap';\nimport classnames from 'classnames';\n\nconst StateButton = ({\n  id,\n  className,\n  color,\n  size,\n  children,\n  onClick,\n  next,\n}) => {\n  const [status, setStatus] = useState('default');\n  const [message, setMessage] = useState('');\n  const [messageShow, setMessageShow] = useState(false);\n\n  const handleOnClick = () => {\n    setStatus('processing');\n\n    onClick()\n      .then((res) => {\n        setMessage(res);\n        setStatus('success');\n      })\n      .catch((err) => {\n        setMessage(err);\n        setStatus('fail');\n      })\n      .finally(() => {\n        setMessageShow(true);\n        setTimeout(() => {\n          setStatus('default');\n          setMessageShow(false);\n          if (next) {\n            next();\n          }\n        }, 3000);\n      });\n  };\n\n  return (\n    <span>\n      <Button\n        id={id}\n        className={`btn-multiple-state  ${className}  ${classnames({\n          'show-spinner': status === 'processing',\n          'show-success': status === 'success',\n          'show-fail': status === 'fail',\n        })}`}\n        size={size}\n        color={color}\n        onClick={handleOnClick}\n        disabled={status !== 'default'}\n      >\n        <Popover placement=\"top\" isOpen={messageShow} target={id}>\n          <PopoverBody>{message}</PopoverBody>\n        </Popover>\n        <span className=\"spinner d-inline-block\">\n          <span className=\"bounce1\" />\n          <span className=\"bounce2\" />\n          <span className=\"bounce3\" />\n        </span>\n        <span className=\"icon success\">\n          <i className=\"simple-icon-check\" />\n        </span>\n        <span className=\"icon fail\">\n          <i className=\"simple-icon-exclamation\" />\n        </span>\n        <span className=\"label\">{children}</span>\n      </Button>\n    </span>\n  );\n};\n\nexport default StateButton;\n","/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useEffect, useState } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const handleStorage = useCallback(\n    (event) => {\n      if (event.key === key && event.newValue !== storedValue) {\n        setValue(event.newValue || initialValue);\n      }\n    },\n\n    [storedValue]\n  );\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const newValue = window.localStorage.getItem(key);\n    if (JSON.stringify(storedValue) !== newValue) {\n      setValue(JSON.parse(newValue) || initialValue);\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('storage', handleStorage);\n    return () => window.removeEventListener('storage', handleStorage);\n  }, [handleStorage]);\n\n  const remove = () => {\n    window.localStorage.removeItem(key);\n  };\n\n  return [storedValue, setValue, remove];\n};\n\nexport default useLocalStorage;\n","import React from 'react';\nimport { components } from 'react-select';\n\nconst CustomSelectInput = (props) => {\n  const customProps = { ...props };\n  delete customProps.autoCorrect;\n  delete customProps.autoCapitalize;\n  return <components.Input {...customProps} />;\n};\n\nexport default CustomSelectInput;\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  CardTitle,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n  Tooltip,\r\n} from 'reactstrap';\r\nimport { sgdGoals } from '../../constants/defaultValues';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx } from '../common/CustomBootstrap';\r\n\r\nconst AddSDGModal = ({ setOpenAddSdg }) => {\r\n  const [checked, setChecked] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.add-sdg-title\" />\r\n        </h2>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Row className=\"justify-content-center\">\r\n          {sgdGoals.map((item) => (\r\n            <SDGItem\r\n              key={item.key}\r\n              item={item}\r\n              checked={checked}\r\n              setChecked={setChecked}\r\n            />\r\n          ))}\r\n        </Row>\r\n      </ModalBody>\r\n      <ModalFooter className=\"justify-content-end\">\r\n        <Button color=\"secondary\" onClick={() => setOpenAddSdg(false)}>\r\n          <IntlMessages id=\"challenges.modal.application-add\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SDGItem = ({ item, checked, setChecked }) => {\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  const handleChange = (data) => {\r\n    const checkedItems = [...checked];\r\n    const index = checkedItems.indexOf(data);\r\n    if (index === -1) {\r\n      checkedItems.push(data);\r\n    } else {\r\n      checkedItems.splice(index, 1);\r\n    }\r\n    setChecked(checkedItems);\r\n  };\r\n\r\n  return (\r\n    <Colxx xxs=\"6\" className=\"d-flex flex-row mb-4\">\r\n      <img\r\n        src={`/assets/img/sdg/${item.id}.png`}\r\n        alt={item.name}\r\n        className=\"img-thumbnail list-thumbnail align-self-center m-4 small\"\r\n      />\r\n      <div className=\"d-flex flex-grow-1 min-width-zero\">\r\n        <div className=\"pl-0 align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero\">\r\n          <div className=\"min-width-zero\">\r\n            <CardTitle\r\n              className=\"truncate text-small\"\r\n              id={`sdg_tooltip_${item.id}`}\r\n            >\r\n              {item.name}\r\n            </CardTitle>\r\n            <Button\r\n              onClick={() => handleChange(item.id)}\r\n              size=\"xs\"\r\n              color={checked.includes(item.id) ? 'success' : 'primary'}\r\n            >\r\n              {checked.includes(item.id) ? 'Selected' : 'Select'}\r\n            </Button>\r\n\r\n            <Tooltip\r\n              placement=\"top\"\r\n              isOpen={tooltipOpen}\r\n              target={`sdg_tooltip_${item.id}`}\r\n              toggle={() => setTooltipOpen(!tooltipOpen)}\r\n            >\r\n              {item.name}\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\nexport default AddSDGModal;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  CardTitle,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n  Tooltip,\r\n} from 'reactstrap';\r\nimport { megaTrends } from '../../constants/defaultValues';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { Colxx } from '../common/CustomBootstrap';\r\n\r\nconst AddMegaTrendsModal = ({ setOpenMegaTrends }) => {\r\n  const [checked, setChecked] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.add-mega-trends-title\" />\r\n        </h2>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Row>\r\n          {megaTrends.map((item) => (\r\n            <MegaTrendItem\r\n              key={item.key}\r\n              item={item}\r\n              checked={checked}\r\n              setChecked={setChecked}\r\n            />\r\n          ))}\r\n        </Row>\r\n      </ModalBody>\r\n      <ModalFooter className=\"justify-content-end\">\r\n        <Button color=\"secondary\" onClick={() => setOpenMegaTrends(false)}>\r\n          <IntlMessages id=\"challenges.modal.application-add\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst MegaTrendItem = ({ item, checked, setChecked }) => {\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  const handleChange = (data) => {\r\n    const checkedItems = [...checked];\r\n    const index = checkedItems.indexOf(data);\r\n    if (index === -1) {\r\n      checkedItems.push(data);\r\n    } else {\r\n      checkedItems.splice(index, 1);\r\n    }\r\n    setChecked(checkedItems);\r\n  };\r\n\r\n  return (\r\n    <Colxx xxs=\"6\" className=\"d-flex flex-row mb-4\">\r\n      <img\r\n        src={`/assets/img/mega-trends/${item.id}.png`}\r\n        alt={item.name}\r\n        className=\"img-thumbnail list-thumbnail align-self-center m-4 small\"\r\n      />\r\n      <div className=\"d-flex flex-grow-1 min-width-zero\">\r\n        <div className=\"pl-0 align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero\">\r\n          <div className=\"min-width-zero\">\r\n            <CardTitle\r\n              className=\"truncate text-small\"\r\n              id={`mega_trend_tooltip_${item.id}`}\r\n            >\r\n              {item.name}\r\n            </CardTitle>\r\n            <Button\r\n              onClick={() => handleChange(item.id)}\r\n              size=\"xs\"\r\n              color={checked.includes(item.id) ? 'success' : 'primary'}\r\n            >\r\n              {checked.includes(item.id) ? 'Added' : 'Add'}\r\n            </Button>\r\n\r\n            <Tooltip\r\n              placement=\"top\"\r\n              isOpen={tooltipOpen}\r\n              target={`mega_trend_tooltip_${item.id}`}\r\n              toggle={() => setTooltipOpen(!tooltipOpen)}\r\n            >\r\n              {item.name}\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\nexport default AddMegaTrendsModal;\r\n","/* eslint-disable prefer-promise-reject-errors */\nimport React, { useState } from 'react';\nimport Proptypes from 'prop-types';\nimport {\n  Button,\n  FormGroup,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\nimport Select from 'react-select';\n\nimport IntlMessages from '../../helpers/IntlMessages';\nimport CustomSelectInput from '../common/CustomSelectInput';\nimport { hackthonTypeOptions } from '../../constants/defaultValues';\nimport instance from '../../helpers/axiosInstance';\nimport StateButton from '../StateButton';\nimport AddSDGModal from './AddSDGModal';\nimport AddMegaTrendsModal from './AddMegaTrendsModal';\n\nconst CreateHackathonModal = ({ setOpenCreateHackathon, id }) => {\n  const [openAddSdg, setOpenAddSdg] = useState(false);\n  const [openMegaTrends, setOpenMegaTrends] = useState(false);\n\n  const [formValues, setFormValues] = useState({\n    name: '',\n    organizer_id: id,\n    hackathon_type_id: 1,\n  });\n\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const handleChange = (event, key, value = false) => {\n    setFormValues({\n      ...formValues,\n      [key]: value ? event : event.target.value,\n    });\n  };\n\n  const handleSubmit = async (newData) => {\n    return new Promise((success, failed) => {\n      const createHackathon = async () => {\n        try {\n          const response = await instance({\n            method: 'POST',\n            url: '/createHackathon',\n            data: newData,\n          });\n\n          const { data } = response;\n          if (data.success) {\n            setFormValues({ ...formValues, ...newData });\n            setOpenCreateHackathon(false);\n            success('Hackathon created successfully!');\n          } else {\n            failed('Failed to create hackathon!');\n          }\n        } catch (error) {\n          failed('Failed to create hackathon!');\n        }\n      };\n      createHackathon();\n    });\n  };\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.modal-title\" />\n        </h2>\n        <p className=\"m-0\">\n          <IntlMessages id=\"challenges.modal.modal-sub-title\" />\n        </p>\n      </ModalHeader>\n\n      <ModalBody>\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.name\" />\n          </Label>\n          <Input\n            type=\"text\"\n            className=\"form-control\"\n            name=\"link-to-code-of-control\"\n            placeholder=\"Enter a Name\"\n            value={formValues.name}\n            onChange={(event) => {\n              handleChange(event, 'name');\n            }}\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.hackathon-type\" />\n          </Label>\n          <Select\n            components={{ Input: CustomSelectInput }}\n            className=\"react-select\"\n            classNamePrefix=\"react-select\"\n            name=\"hackathon-type-id\"\n            value={selectedOption}\n            onChange={(data) => {\n              setSelectedOption(data);\n              handleChange(data.value, 'hackathon_type_id', true);\n            }}\n            options={hackthonTypeOptions}\n            placeholder=\"Enter a Hackthon Type\"\n          />\n        </FormGroup>\n\n        <FormGroup className=\"text-center\">\n          <Button onClick={() => setOpenAddSdg(true)} size=\"xs\" className=\"m-2\">\n            <i className=\"iconsminds-add mr-2\" aria-hidden=\"true\" />\n            <IntlMessages id=\"challenges.modal.add-sdg-button\" />\n          </Button>\n\n          <Button\n            onClick={() => setOpenMegaTrends(true)}\n            size=\"xs\"\n            className=\"m-2\"\n          >\n            <i className=\"iconsminds-add mr-2\" aria-hidden=\"true\" />\n            <IntlMessages id=\"challenges.modal.add-mega-trends-button\" />\n          </Button>\n        </FormGroup>\n\n        <Modal\n          isOpen={openAddSdg}\n          toggle={() => setOpenAddSdg(!openAddSdg)}\n          size=\"lg\"\n        >\n          <AddSDGModal setOpenAddSdg={setOpenAddSdg} />\n        </Modal>\n\n        <Modal\n          isOpen={openMegaTrends}\n          toggle={() => setOpenMegaTrends(!openMegaTrends)}\n          size=\"lg\"\n          modalClassName=\"rounded\"\n        >\n          <AddMegaTrendsModal setOpenMegaTrends={setOpenMegaTrends} />\n        </Modal>\n      </ModalBody>\n\n      <ModalFooter className=\"justify-content-end\">\n        <StateButton\n          id=\"create-hackthon\"\n          color=\"primary\"\n          onClick={() => handleSubmit(formValues)}\n          next={() => window.location.reload(0)}\n        >\n          Create Hackthon\n        </StateButton>\n        <Button color=\"danger\" onClick={() => setOpenCreateHackathon(false)}>\n          <IntlMessages id=\"challenges.modal.cancel-button\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nCreateHackathonModal.proptype = {\n  setOpenCreateHackathon: Proptypes.func.isRequired,\n};\n\nexport default CreateHackathonModal;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardSubtitle,\n  CardText,\n  CardTitle,\n  Row,\n} from 'reactstrap';\nimport { Separator } from '../../components/common/CustomBootstrap';\nimport { adminRoot } from '../../constants/defaultValues';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nconst getStatusColor = (status) => {\n  if (status === 0) return 'outline-success';\n  if (status === 'ON GOING') return 'outline-warning';\n  if (status === 'COMPLETED') return 'outline-danger';\n  return '';\n};\n\nconst getStatusText = (status) => {\n  if (status === 0) return 'On Going';\n  if (status === '') return 'outline-warning';\n  if (status === 'COMPLETED') return 'outline-danger';\n  return '';\n};\n\nconst getTypeText = (status) => {\n  if (status === 0) return 'Online';\n  if (status === 1) return 'Blender';\n  if (status === 2) return 'Offiline';\n  return '';\n};\n\nconst HackCard = ({ data }) => {\n  const {\n    id,\n    name,\n    tagline,\n    status,\n    hackathon_start,\n\n    application_start,\n    application_end,\n    hackathon_type_id,\n  } = data;\n  return (\n    <Card>\n      <CardBody>\n        <CardTitle>\n          <p className=\"h2 lead\">{name}</p>\n        </CardTitle>\n\n        <CardSubtitle>{tagline}</CardSubtitle>\n\n        <CardTitle>\n          <IntlMessages id=\"hackcard.hackthon\" />\n        </CardTitle>\n        <CardSubtitle>\n          <IntlMessages id=\"hackcard.starts\" />\n        </CardSubtitle>\n        <CardText>{hackathon_start}</CardText>\n\n        <CardSubtitle>\n          <IntlMessages id=\"hackcard.ends\" />\n        </CardSubtitle>\n        <CardText>{}</CardText>\n\n        <Separator className=\"mb-4\" />\n\n        <CardTitle>\n          <IntlMessages id=\"hackcard.application\" />\n        </CardTitle>\n        <CardSubtitle>\n          <IntlMessages id=\"hackcard.starts\" />\n        </CardSubtitle>\n        <CardText>{application_start}</CardText>\n        <CardSubtitle>\n          <IntlMessages id=\"hackcard.ends\" />\n        </CardSubtitle>\n        <CardText>{application_end}</CardText>\n\n        <Badge\n          color={getStatusColor(status)}\n          pill\n          outline\n          className=\"mb-3 mr-3\"\n        >\n          {getStatusText(status)}\n        </Badge>\n\n        <Badge color=\"outline-primary\" pill outline className=\"mb-3\">\n          {getTypeText(hackathon_type_id)}\n        </Badge>\n\n        <Row className=\"justify-content-center\">\n          <Button className=\"m-1\" href={`${adminRoot}/challenges/basics/${id}`}>\n            <IntlMessages id=\"hackcard.edit-button\" />\n          </Button>\n          <Button\n            className=\"m-1\"\n            href={`${adminRoot}/challenges/details/${id}`}\n          >\n            <IntlMessages id=\"hackcard.view-details-button\" />\n          </Button>\n        </Row>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default HackCard;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport instance from '../helpers/axiosInstance';\nimport useLocalStorage from './use-localstorage';\n\nconst useFetchLocalStorage = (url, key, refresh = false, name = 'data') => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [data, setData, remove] = useLocalStorage(key, false);\n\n  useEffect(() => {\n    if (!url) {\n      setError('Please Provide a Uri!');\n      return;\n    }\n\n    if (!key) {\n      setError('Please Provide a Key!');\n      return;\n    }\n\n    if (refresh) {\n      setData(false);\n    }\n\n    const fetchData = async () => {\n      try {\n        const response = await instance({\n          method: 'GET',\n          url,\n        });\n\n        if (response.data.success) {\n          setData(response.data[name]);\n        } else {\n          setError(response.data.message);\n        }\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return { loading, data, error, remove };\n};\n\nexport default useFetchLocalStorage;\n\nuseFetchLocalStorage.propTypes = {\n  url: PropTypes.string.isRequired,\n  key: PropTypes.string.isRequired,\n  refresh: PropTypes.bool,\n  name: PropTypes.string,\n};\n","import React, { useState } from 'react';\nimport { Button, Modal, Row } from 'reactstrap';\nimport CreateHackathonModal from '../../../components/application/CreateHackathonModal';\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport { hackathonDataStorageKey } from '../../../constants/defaultValues';\nimport HackCard from '../../../containers/application/HackathonCard';\n\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport AppError from '../../../helpers/AppError';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { getCurrentUser } from '../../../helpers/Utils';\n\nimport useFetchLocalStorage from '../../../hooks/use-fetch-local-storage';\n\nconst DefaultView = ({ match }) => {\n  const { id } = getCurrentUser();\n\n  const { loading, data, error } = useFetchLocalStorage(\n    `/getHackathonList/${id}`,\n    hackathonDataStorageKey,\n    true\n  );\n\n  const [openCreateHackathon, setOpenCreateHackathon] = useState(false);\n\n  if (loading) return <div className=\"loading\" />;\n\n  if (error) throw new AppError(error);\n\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"10\">\n          <Breadcrumb heading=\"menu.dashboard\" match={match} />\n        </Colxx>\n\n        <Colxx xxs=\"2\">\n          <Button\n            size=\"sm\"\n            onClick={() => {\n              setOpenCreateHackathon(true);\n            }}\n          >\n            <IntlMessages id=\"challenges.create-hackathon\" />\n          </Button>\n\n          <Modal\n            isOpen={openCreateHackathon}\n            toggle={() => setOpenCreateHackathon(!openCreateHackathon)}\n            wrapClassName=\"modal-right\"\n          >\n            <CreateHackathonModal\n              setOpenCreateHackathon={setOpenCreateHackathon}\n              id={id}\n            />\n          </Modal>\n        </Colxx>\n      </Row>\n\n      <Separator className=\"mb-5\" />\n\n      <Row>\n        <Colxx xxs=\"12\" className=\"mb-4\">\n          <Row className=\"justify-content-start\">\n            {data &&\n              data.map((item) => (\n                <Colxx xxs=\"12\" sm=\"6\" md=\"4\" key={item.id} className=\"mb-4\">\n                  <HackCard data={item} />\n                </Colxx>\n              ))}\n          </Row>\n        </Colxx>\n      </Row>\n    </>\n  );\n};\n\nexport default DefaultView;\n"],"sourceRoot":""}