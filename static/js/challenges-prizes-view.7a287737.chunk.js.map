{"version":3,"sources":["containers/navs/Breadcrumb.js","hooks/use-request.js","components/application/PrizesList.js","components/application/AddPrizeModal.js","views/app/Challenges/prizes-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","connect","authUser","applicationData","accessToken","prizes","getPrizesAction","getPrizes","useEffect","AppError","role","item","idx","name","sponsor_prize","description","setOpenAddModal","hackathon_id","values","setValues","handleChange","event","key","value","target","Authorization","NotificationManager","wait","password","doRequest","ModalHeader","IntlMessages","ModalBody","FormGroup","Label","Input","type","onChange","rows","checked","primary","ModalFooter","Button","color","onClick","Prizes","params","history","useHistory","openAddModal","Row","xxs","Breadcrumb","md","PrizesList","Card","CardBody","CustomInput","label","Modal","isOpen","toggle","push"],"mappings":"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","file":"static/js/challenges-prizes-view.7a287737.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      {match ? <BreadcrumbItems match={match} /> : null}\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/').filter(Boolean);\n\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import { useState } from 'react';\nimport instance from '../helpers/axiosInstance';\nimport { log } from '../helpers/Utils';\n\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\n  const [responseData, setData] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const doRequest = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await instance({\n        url,\n        method,\n        headers,\n        data,\n      });\n\n      if (response.data.success) {\n        if (nextSuccess) {\n          nextSuccess();\n        }\n        setLoading(false);\n        setData(response.data.data);\n      } else {\n        if (nextError) {\n          nextError(response.data.error);\n        }\n        setLoading(false);\n        setError(response.data.error);\n      }\n    } catch (err) {\n      log(err);\n      setLoading(false);\n      setError(err);\n    }\n  };\n\n  return [doRequest, loading, error, responseData];\n};\n\nexport default useRequest;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardBody, CardTitle } from 'reactstrap';\nimport AppError from '../../helpers/AppError';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { getPrizes } from '../../redux/actions';\nimport { Separator } from '../common/CustomBootstrap';\n\nconst PrizesList = ({\n  id,\n  getPrizesAction,\n  accessToken,\n  prizes,\n  loading,\n  error,\n}) => {\n  useEffect(() => {\n    getPrizesAction(accessToken, id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (error) throw new AppError(error);\n  \n\n  return (\n    <Card>\n      <CardBody>\n        <CardTitle>\n          {/* <span className=\"h1\"> */}\n          <b>  <IntlMessages id=\"challenges.added-prizes\" /></b>\n          {/* </span> */}\n        </CardTitle>\n\n        <Separator className=\"my-2\" />\n\n        {loading ? (\n          <div className=\"d-flex justify-content-center m-4\">\n            <div className=\"loading\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        ) : (\n          <>\n            {prizes.map((item, idx) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Card key={idx} className=\"mb-1\">\n                <CardBody>\n                  <CardTitle>{item.name}</CardTitle>\n                  {item.sponsor_prize === 1 && (\n                    <div className=\"position-absolute card-top-buttons\">\n                      Sponsor Prize:{' '}\n                      <i className=\"simple-icon-check text-success\" />\n                    </div>\n                  )}\n                  {item.description}\n                </CardBody>\n              </Card>\n            ))}\n          </>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nconst mapStateToProps = ({ authUser, applicationData }) => {\n  const { accessToken } = authUser;\n  const { prizes, loading, error } = applicationData;\n  return { accessToken, prizes, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  getPrizesAction: getPrizes,\n})(PrizesList);\n","/* eslint-disable camelcase */\n/* eslint-disable prefer-promise-reject-errors */\nimport React, { useState } from 'react';\nimport {\n  Button,\n  FormGroup,\n  Input,\n  Label,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\nimport Switch from 'rc-switch';\nimport { connect } from 'react-redux';\n\nimport useRequest from '../../hooks/use-request';\nimport { wait } from '../../helpers/Utils';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { NotificationManager } from '../common/react-notifications';\nimport { getPrizes } from '../../redux/actions';\n\nimport 'rc-switch/assets/index.css';\n\nconst AddPrizeModal = ({\n  setOpenAddModal,\n  id,\n  accessToken,\n  getPrizesAction,\n}) => {\n  const [values, setValues] = useState({\n    hackathon_id: id,\n    sponsor_prize: 1,\n    name: '',\n    description: '',\n  });\n\n  const handleChange = (event, key, value = false) => {\n    setValues({\n      ...values,\n      [key]: value ? event : event.target.value,\n    });\n  };\n\n  const [doRequest, loading] = useRequest({\n    url: '/addPrizes',\n    method: 'POST',\n    headers: {\n      Authorization: accessToken,\n    },\n    data: { prizes: { ...values } },\n    nextSuccess: () => {\n      NotificationManager.success(\n        'Prize added successfully',\n        'Application Update Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n      getPrizesAction(accessToken, id);\n      wait(1200, () => {\n        setValues({ ...values, password: 'null' });\n        setOpenAddModal(false);\n      });\n    },\n    nextError: (error) => {\n      NotificationManager.error(\n        error,\n        'Application Update Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    },\n  });\n\n  const handleSubmit = () => {\n    doRequest();\n  };\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.application-add-prize-title\" />\n        </h2>\n      </ModalHeader>\n\n      <ModalBody>\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.prize\" />\n          </Label>\n          <Input\n            id=\"name\"\n            type=\"text\"\n            value={values.name}\n            onChange={(event) => handleChange(event, 'name')}\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.prize-description\" />\n          </Label>\n          <Input\n            type=\"textarea\"\n            rows=\"6\"\n            value={values.description}\n            onChange={(event) => handleChange(event, 'description')}\n          />\n        </FormGroup>\n\n        <FormGroup className=\"d-flex\">\n          <Switch\n            className=\"custom-switch custom-switch-primary custom-switch-small mr-2\"\n            checked={values.sponsor_prize}\n            onChange={(primary) => handleChange(primary, 'sponsor_prize', true)}\n          />\n          <Label>\n            <IntlMessages id=\"challenges.modal.is-sponsor-prize\" />\n          </Label>\n        </FormGroup>\n      </ModalBody>\n\n      <ModalFooter>\n        <Button\n          id=\"add-prize-buttom\"\n          color=\"primary\"\n          className={`btn-shadow btn-multiple-state ${\n            loading ? 'show-spinner' : ''\n          }`}\n          onClick={handleSubmit}\n        >\n          <span className=\"spinner d-inline-block\">\n            <span className=\"bounce1\" />\n            <span className=\"bounce2\" />\n            <span className=\"bounce3\" />\n          </span>\n          <span className=\"label\">\n            <IntlMessages id=\"challenges.modal.application-add\" />\n          </span>\n        </Button>\n\n        <Button color=\"danger\" onClick={() => setOpenAddModal(false)}>\n          <IntlMessages id=\"challenges.modal.application-cancel\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ authUser, applicationData }) => {\n  const { accessToken } = authUser;\n  const { prizes, loading, error } = applicationData;\n  return { accessToken, prizes, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  getPrizesAction: getPrizes,\n})(AddPrizeModal);\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CustomInput,\n  FormGroup,\n  Modal,\n  Row,\n} from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\n\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport { adminRoot } from '../../../constants/defaultValues';\nimport AddPrizeModal from '../../../components/application/AddPrizeModal';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport AppError from '../../../helpers/AppError';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport PrizesList from '../../../components/application/PrizesList';\n\nconst Prizes = ({ match }) => {\n  const { id } = match.params;\n\n  if (!id) throw new AppError('Please provide a Hackathon ID');\n\n  const history = useHistory();\n\n  const [openAddModal, setOpenAddModal] = useState(false);\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.prizes\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n\n      <Row className=\"justify-content-center m-2\">\n        <Colxx xxs=\"12\" md=\"6\">\n          <PrizesList id={id} />\n        </Colxx>\n\n        <Colxx xxs=\"12\" md=\"6\">\n          <Card>\n            <CardBody>\n              <Row className=\"justify-content-center m-2\">\n                <Button onClick={() => setOpenAddModal(true)}>\n                  <IntlMessages id=\"challenges.add-prize-button\" />\n                </Button>\n              </Row>\n\n              <Row className=\"justify-content-center m-2\">\n                <CustomInput\n                  type=\"checkbox\"\n                  label={<IntlMessages id=\"challenges.add-prize-checkbox\" />}\n                />\n              </Row>\n\n              <Modal\n                isOpen={openAddModal}\n                toggle={() => setOpenAddModal(!openAddModal)}\n              >\n                <AddPrizeModal setOpenAddModal={setOpenAddModal} id={id} />\n              </Modal>\n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n\n      <Row>\n        <Colxx>\n          <FormGroup className=\"text-center\">\n            {/* <Button\n              color=\"primary\"\n              className=\"m-3\"\n              onClick={() =>\n                history.push(`${adminRoot}/challenges/dates/${id}`)\n              }\n            >\n              <IntlMessages id=\"forms.previous\" />\n            </Button> */}\n            <Button\n              color=\"primary\"\n              className=\"m-3\"\n              onClick={() =>\n                history.push(`${adminRoot}/challenges/judges/${id}`)\n              }\n            >\n              <IntlMessages id=\"forms.next\" />\n            </Button>\n          </FormGroup>\n        </Colxx>\n      </Row>\n    </>\n  );\n};\n\nexport default Prizes;\n"],"sourceRoot":""}