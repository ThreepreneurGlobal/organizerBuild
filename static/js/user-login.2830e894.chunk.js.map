{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","views/user/login.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","validatePassword","value","error","length","validateEmail","test","connect","authUser","loading","loginUserAction","loginUser","history","useState","email","password","useEffect","NotificationManager","warning","initialValues","xxs","md","to","id","onSubmit","values","errors","touched","name","validate","type","color","size"],"mappings":"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","file":"static/js/user-login.2830e894.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n  withRef: false,\r\n});\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst Colxx = (props) => (\r\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = ({ className }) => (\r\n  <div className={`separator ${className}`} />\r\n);\r\nexport { Colxx, Separator };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n\r\nimport { loginUser } from '../../redux/actions';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nconst validatePassword = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your password';\r\n  } else if (value.length < 4) {\r\n    error = 'Value must be longer than 3 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateEmail = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your email address';\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = 'Invalid email address';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst Login = ({ history, loading, error, loginUserAction }) => {\r\n  const [email] = useState('');\r\n  const [password] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.warning(error, 'Login Error', 3000, null, null, '');\r\n    }\r\n  }, [loading, error]);\r\n\r\n  const onUserLogin = (values) => {\r\n    if (!loading) {\r\n      if (values.email !== '' && values.password !== '') {\r\n        loginUserAction(values, history);\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialValues = { email, password };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please use your credentials to login.\r\n              <br />\r\n              If you are not a member, please{' '}\r\n              <NavLink to=\"/user/register\" className=\"white\">\r\n                register\r\n              </NavLink>\r\n              .\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.login-title\" />\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.email\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"email\"\r\n                      validate={validateEmail}\r\n                    />\r\n                    {errors.email && touched.email && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.email}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      validate={validatePassword}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.password}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/forgot-password\">\r\n                      <IntlMessages id=\"user.forgot-password-question\" />\r\n                    </NavLink>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                      // type=\"button\"\r\n                      // onClick={onUserLogin}\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.login-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { loading, error } = authUser;\r\n  return { loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  loginUserAction: loginUser,\r\n})(Login);\r\n"],"sourceRoot":""}