{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","hooks/use-request.js","views/user/reset-password.js","views/user/verify-otp.js","views/user/complete-registration/profile-form.js","components/wizard/TopNavigation.js","views/user/complete-registration/thank-you-form.js","components/wizard/BottomNavigation.js","views/user/complete-registration/index.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","resetPasswordAction","resetPassword","location","history","useEffect","NotificationManager","warning","initialValues","xxs","md","to","id","validate","onSubmit","oobCode","URLSearchParams","search","get","touched","name","type","color","size","ResendButton","email","doRequest","onClick","date","Date","now","renderer","hours","minutes","seconds","completed","disabled","zeroPad","MemoizedResendOTPButton","memo","mapActionToProps","verifyOTPAction","verifyOTP","OTP","validateName","value","length","MyTextArea","useField","field","meta","ProfileForm","addProfileAction","currentUser","Card","CardBody","CardTitle","IntlMessages","phoneNumber","phone_number","profile","userID","contactNo","FormGroup","Label","rows","Button","TopNavigation","disableNav","topNavClick","getClassName","steps","step","index","stepItem","indexOf","isDone","render","next","previous","push","go","map","hideTopNav","itemClick","desc","ThankYouForm","useHistory","console","useAsync","getProfileDataAsync","profileD","getProfileData","adminRoot","BottomNavigation","onClickPrev","prevLabel","onClickNext","nextLabel","showPrevious","addProfileData","message","orgName","fullName","about","Row","goToNext"],"mappings":"2MAKeA,iBAFO,SAACC,GAAD,OAAW,cAAC,IAAD,eAAsBA,MAEd,CACvCC,SAAS,K,wICHLC,EAAQ,SAACF,GAAD,OACZ,cAAC,IAAD,2BAASA,GAAT,IAAgBG,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,WAE1DC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAChB,qBAAKA,UAAS,oBAAeA,O,4FCoChBC,IAvCI,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,IAAKC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAAgB,EAC7CC,mBAAS,IADoC,mBACtEC,EADsE,KACxDC,EADwD,OAE/CF,oBAAS,GAFsC,mBAEtEG,EAFsE,KAE7DC,EAF6D,OAGnDJ,mBAAS,IAH0C,mBAGtEK,EAHsE,KAG/DC,EAH+D,KAoC7E,MAAO,CA/BQ,uCAAG,4BAAAC,EAAA,sEAEdD,EAAS,MACTF,GAAW,GAHG,SAISI,YAAS,CAC9Bd,MACAC,SACAE,UACAD,SARY,QAIRa,EAJQ,QAWDb,KAAKc,SACZZ,GACFA,IAEFM,GAAW,GACXF,EAAQO,EAASb,KAAKA,QAElBG,GACFA,EAAUU,EAASb,KAAKS,OAE1BD,GAAW,GACXE,EAASG,EAASb,KAAKS,QAtBX,gDAyBdM,YAAI,EAAD,IACHP,GAAW,GACXE,EAAS,EAAD,IA3BM,yDAAH,qDA+BIH,EAASE,EAAOJ,K,sLC9B/BW,EAAsB,SAACC,GAAY,IAC/BC,EAAkCD,EAAlCC,YAAaC,EAAqBF,EAArBE,iBACfC,EAAS,GAIf,OAHID,GAAoBD,IAAgBC,IACtCC,EAAOD,iBAAmB,kCAErBC,GAyJMC,uBALS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEzB,MAAO,CAAEJ,YADkDI,EAAnDJ,YACcK,kBADqCD,EAAtCC,kBACoBhB,QADkBe,EAAnBf,QACUE,MADSa,EAAVb,SAIX,CACtCe,oBAAqBC,MADRJ,EAtJO,SAAC,GAMhB,IALLK,EAKI,EALJA,SACAC,EAII,EAJJA,QACApB,EAGI,EAHJA,QACAE,EAEI,EAFJA,MACAe,EACI,EADJA,oBACI,EACkBpB,mBAAS,IAAxBc,EADH,sBAEuBd,mBAAS,IAA7Be,EAFH,oBAIJS,qBAAU,WACJnB,EACFoB,IAAoBC,QAClBrB,EACA,wBACA,IACA,KACA,KACA,IAEQF,GAA2B,YAAhBW,GACrBW,IAAoBf,QAClB,uCACA,yBACA,IACA,KACA,KACA,MAEH,CAACL,EAAOF,EAASW,IAEpB,IAyBMa,EAAgB,CAAEb,cAAaC,oBAErC,OACE,cAAC,IAAD,CAAKvB,UAAU,QAAf,SACE,cAAC,IAAD,CAAOoC,IAAI,KAAKC,GAAG,KAAKrC,UAAU,kBAAlC,SACE,eAAC,IAAD,CAAMA,UAAU,YAAhB,UACE,sBAAKA,UAAU,gCAAf,UACE,mBAAGA,UAAU,gBAAb,qCACA,oBAAGA,UAAU,aAAb,4DACiD,uBADjD,kCAEkC,IAChC,cAAC,IAAD,CAASsC,GAAG,YAAYtC,UAAU,QAAlC,sBAHF,UASF,sBAAKA,UAAU,YAAf,UACE,cAAC,IAAD,CAASsC,GAAG,IAAItC,UAAU,QAA1B,SACE,sBAAMA,UAAU,kBAElB,cAAC,IAAD,CAAWA,UAAU,OAArB,SACE,cAAC,IAAD,CAAcuC,GAAG,0BAGnB,cAAC,IAAD,CACEC,SAAUpB,EACVe,cAAeA,EACfM,SArDY,SAACpB,GACvB,IAAKV,EAAS,CACZ,IACM+B,EADS,IAAIC,gBAAgBb,EAASc,QACrBC,IAAI,WACvBH,EACyB,KAAvBrB,EAAOC,aACTM,EAAoB,CAClBN,YAAaD,EAAOC,YACpBK,kBAAmBe,EACnBX,YAIJE,IAAoBC,QAClB,+BACA,uBACA,IACA,KACA,KACA,MA+BE,SAKG,gBAAGV,EAAH,EAAGA,OAAQsB,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAM9C,UAAU,kCAAhB,UACE,eAAC,IAAD,CAAWA,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcuC,GAAG,wBAEnB,cAAC,IAAD,CACEvC,UAAU,eACV+C,KAAK,cACLC,KAAK,gBAGT,eAAC,IAAD,CAAWhD,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcuC,GAAG,8BAEnB,cAAC,IAAD,CACEvC,UAAU,eACV+C,KAAK,mBACLC,KAAK,aAENxB,EAAOD,kBAAoBuB,EAAQvB,kBAClC,qBAAKvB,UAAU,2BAAf,SACGwB,EAAOD,sBAKd,sBAAKvB,UAAU,oDAAf,UACE,cAAC,IAAD,CAASsC,GAAG,cAAZ,SACE,cAAC,IAAD,CAAcC,GAAG,uBAEnB,eAAC,IAAD,CACEU,MAAM,UACNjD,UAAS,wCACPW,EAAU,eAAiB,IAE7BuC,KAAK,KALP,UAOE,uBAAMlD,UAAU,yBAAhB,UACE,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,eAElB,sBAAMA,UAAU,QAAhB,SACE,cAAC,IAAD,CAAcuC,GAAG,2D,sMC3InCY,EAAe,WAAO,IAAD,EACLlD,YAAW,CAC7BC,IAAK,aACLC,OAAQ,OACRC,KAAM,CACJgD,MAAO,IAET9C,YAAa,WACX2B,IAAoBf,QAClB,wBACA,qBACA,IACA,KACA,KACA,OAbCmC,EADkB,oBAkBnBC,EAAU,kBAAMD,KAgBtB,OAAO,cAAC,IAAD,CAAWE,KAAMC,KAAKC,MAAQ,IAAOC,SAf3B,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAE3C,OACE,cAAC,IAAD,CACE9D,UAAU,yCACVsD,QAASQ,EAAYR,EAAU,aAC/BS,UAAWD,EAHb,SAKGA,EACG,aADM,UAEHE,YAAQL,GAFL,YAEeK,YAAQJ,GAFvB,YAEmCI,YAAQH,UAQvDI,EAA0BC,eAAKf,GA2F/BgB,EAAmB,CACvBC,gBAAiBC,MAEJ5C,uBARS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEzB,MAAO,CAAE4C,IADuB5C,EAAxB4C,IACM3D,QADkBe,EAAnBf,QACUE,MADSa,EAAVb,SAOgBsD,EAAzB1C,EA5FG,SAAC,GAAkD,IAAhDM,EAA+C,EAA/CA,QAASpB,EAAsC,EAAtCA,QAASE,EAA6B,EAA7BA,MAAOuD,EAAsB,EAAtBA,gBAAsB,EACpD5D,mBAAS,IAAhB8D,EAD2D,oBASlEtC,qBAAU,WACJnB,GACFoB,IAAoBpB,MAClBA,EACA,yBACA,IACA,KACA,KACA,MAGH,CAACA,IAEJ,IAAMsB,EAAgB,CAAEmC,OAExB,OACE,cAAC,IAAD,CAAKtE,UAAU,QAAf,SACE,cAAC,IAAD,CAAOoC,IAAI,KAAKC,GAAG,KAAKrC,UAAU,kBAAlC,SACE,eAAC,IAAD,CAAMA,UAAU,YAAhB,UACE,sBAAKA,UAAU,gCAAf,UACE,mBAAGA,UAAU,gBAAb,qCACA,oBAAGA,UAAU,aAAb,sDAC2C,6BAG7C,sBAAKA,UAAU,YAAf,UACE,sBAAMA,UAAU,gBAChB,cAAC,IAAD,CAAWA,UAAU,OAArB,SACE,cAAC,IAAD,CAAcuC,GAAG,sBAGnB,cAAC,IAAD,CAAQJ,cAAeA,EAAeM,SArC5B,SAACpB,GACA,KAAfA,EAAOiD,KACTF,EAAgB,2BAAK/C,GAAN,IAAcU,cAmCvB,SACG,gBAAGP,EAAH,EAAGA,OAAQsB,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAM9C,UAAU,kCAAhB,UACE,eAAC,IAAD,CAAWA,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcuC,GAAG,eAEnB,cAAC,IAAD,CAAOvC,UAAU,eAAe+C,KAAK,QACpCvB,EAAO8C,KAAOxB,EAAQwB,KACrB,qBAAKtE,UAAU,2BAAf,SACGwB,EAAO8C,SAId,sBAAKtE,UAAU,gDAAf,UACE,cAACiE,EAAD,IAEA,eAAC,IAAD,CACEhB,MAAM,UACNjD,UAAS,wCACPW,EAAU,eAAiB,IAE7BuC,KAAK,KALP,UAOE,uBAAMlD,UAAU,yBAAhB,UACE,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,eAElB,sBAAMA,UAAU,QAAhB,SACE,cAAC,IAAD,CAAcuC,GAAG,uD,6LC5GnCgC,EAAe,SAACC,GACpB,IAAI3D,EAOJ,OALK2D,EAEMA,EAAMC,OAAS,IACxB5D,EAAQ,0CAFRA,EAAQ,yBAIHA,GAGH6D,EAAa,SAAC,GAAiB,IAAZ/E,EAAW,sBAGZgF,YAAShF,GAHG,mBAG3BiF,EAH2B,KAGpBC,EAHoB,KAIlC,OACI,qCAEI,kDAAU7E,UAAU,aAAgB4E,GAAWjF,IAC9CkF,EAAK/B,SAAW+B,EAAKhE,MAClB,qBAAKb,UAAU,QAAf,SAAwB6E,EAAKhE,QAC7B,SAuHCiE,EAlHK,SAAC,GAMd,IALLC,EAKI,EALJA,iBACAhD,EAII,EAJJA,QACAiD,EAGI,EAHJA,YACA7C,EAEI,EAFJA,cACAxB,EACI,EADJA,QAaA,OACE,cAACsE,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAUlF,UAAU,oBAApB,UACE,cAACmF,EAAA,EAAD,CAAWnF,UAAU,OAArB,SACE,oBAAIA,UAAU,OAAd,SACE,cAACoF,EAAA,EAAD,CAAc7C,GAAG,0BAGrB,cAAC,IAAD,CAAQJ,cAAeA,EAAeM,SAnBvB,SAACpB,GAAY,IACxBkB,EAAkCyC,EAAlCzC,GAAkB8C,EAAgBL,EAA9BM,aACNC,EAAO,2BACRlE,GADQ,IAEXmE,OAAQjD,EACRkD,UAAWJ,IAGbN,EAAiB,CAAEQ,UAASxD,aAWxB,SACG,gBAAGP,EAAH,EAAGA,OAAQsB,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAM9C,UAAU,iCAAhB,UACE,eAAC0F,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACP,EAAA,EAAD,CAAc7C,GAAG,oBAEnB,cAAC,IAAD,CACEvC,UAAU,eACV+C,KAAK,UACLP,SAAU+B,IAEX/C,EAAOuB,MAAQD,EAAQC,MACtB,qBAAK/C,UAAU,2BAAf,SAA2CwB,EAAOuB,UAItD,eAAC2C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACP,EAAA,EAAD,CAAc7C,GAAG,qBAEnB,cAAC,IAAD,CACEvC,UAAU,eACV+C,KAAK,WACLP,SAAU+B,IAEX/C,EAAOuB,MAAQD,EAAQC,MACtB,qBAAK/C,UAAU,2BAAf,SAA2CwB,EAAOuB,UAItD,eAAC2C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACP,EAAA,EAAD,CAAc7C,GAAG,qBAEnB,cAAC,IAAD,CACEvC,UAAU,eACV+C,KAAK,cAGNvB,EAAOuB,MAAQD,EAAQC,MACtB,qBAAK/C,UAAU,2BAAf,SAA2CwB,EAAOuB,UAI1D,eAAC2C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACP,EAAA,EAAD,CAAc7C,GAAG,6BAGnB,cAAC,EAAD,CACGvC,UAAU,eACV+C,KAAK,QACL6C,KAAK,MAGPpE,EAAOuB,MAAQD,EAAQC,MAClB,qBAAK/C,UAAU,2BAAf,SAA2CwB,EAAOuB,UAItD,qBAAK/C,UAAU,mDAAf,SACE,eAAC6F,EAAA,EAAD,CACE5C,MAAM,UACND,KAAK,SACLhD,UAAS,wCACPW,EAAU,eAAiB,IAE7BuC,KAAK,KANP,UAQE,uBAAMlD,UAAU,yBAAhB,UACE,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,eAElB,sBAAMA,UAAU,QAAhB,SACE,cAACoF,EAAA,EAAD,CAAc7C,GAAG,oC,kBC1EtBuD,EA3DO,SAAC,GAA4C,IAA1C9F,EAAyC,EAAzCA,UAAW+F,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YACxCC,EAAe,SAACC,EAAOC,EAAMC,EAAOC,GACxC,OAAIH,EAAMI,QAAQH,KAAUC,EACnB,aAELF,EAAMI,QAAQH,GAAQC,GAASC,EAASE,QAC1CF,EAASE,QAAS,EACX,aAEF,QAUT,OACE,cAAC,aAAD,CACEC,OAAQ,cAAGC,KAAH,EAASC,SAAT,IAAmBP,EAAnB,EAAmBA,KAAMD,EAAzB,EAAyBA,MAAWS,GAApC,EAAgCC,GAAhC,EAAoCD,MAApC,OACN,oBACE3G,UAAS,uBAAkBA,GAAlB,OACP+F,EAAa,YAAc,IAF/B,SAKGG,EAAMW,KAAI,SAACR,EAAUD,GACpB,OAAKC,EAASS,WAuBP,6CAAyBV,IArB5B,oBAEEpG,UAAS,mBAAciG,EACrBC,EACAC,EACAC,EACAC,IANJ,SASE,eAAC,IAAD,CACE/D,GAAG,IACHR,SAAU,GACV9B,UAAU,WACVsD,QAAS,kBA/BT,SAAC+C,EAAUM,GACvBZ,GAGJC,EAAYK,EAAUM,GA2BSI,CAAUV,EAAUM,IAJrC,UAME,+BAAON,EAAStD,OAChB,gCAAQsD,EAASW,WAhBrB,qBACqBZ,a,gCCFtBa,EA5BM,SAAC,GAAqB,IAAnBjC,EAAkB,EAAlBA,YAChBjD,EAAUmF,cACT3E,EAAOyC,EAAPzC,GACP4E,QAAQhG,IAAIoB,GACZ6E,YAASC,IAAoB,CAAC9E,IAC9B,IAAM+E,EAAWC,cAEjB,OADAJ,QAAQhG,IAAImG,GAEV,cAACrC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAUlF,UAAU,gCAApB,UACE,oBAAIA,UAAU,OAAd,SACE,cAACoF,EAAA,EAAD,CAAc7C,GAAG,0BAEnB,mBAAGvC,UAAU,gCACb,4BACE,cAACoF,EAAA,EAAD,CAAc7C,GAAG,sBAEnB,cAACsD,EAAA,EAAD,CACEvC,QAAS,kBAAMvB,EAAQ4E,KAAR,UAAgBa,IAAhB,oBACfvE,MAAM,UAFR,4BCqBOwE,EAxCU,SAAC,GAOnB,IANLzH,EAMI,EANJA,UACA0H,EAKI,EALJA,YACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,UAEI,IADJC,oBACI,SACJ,OACE,cAAC,aAAD,CACEtB,OAAQ,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAUP,EAAnB,EAAmBA,KAAMD,EAAzB,EAAyBA,MAAzB,OACN,sBAAKlG,UAAS,yBAAoBA,GAAlC,UACG8H,GACC,cAACjC,EAAA,EAAD,CACE5C,MAAM,UACNjD,UAAS,eAAUkG,EAAMI,QAAQH,IAAS,EAAI,WAAa,IAC3D7C,QAAS,WACPoE,EAAYhB,EAAUR,EAAOC,IAJjC,SAOGwB,IAIL,cAAC9B,EAAA,EAAD,CACE5C,MAAM,UACNjD,UACEkG,EAAMI,QAAQH,IAASD,EAAMzB,OAAS,EAAI,WAAa,GAEzDnB,QAAS,WACPsE,EAAYnB,EAAMP,EAAOC,IAN7B,SASG0B,WC4EP1D,EAAmB,CACvBY,iBAAkBgD,MAGLtG,uBATS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEzB,MAAO,CAAEf,QADwCe,EAAzCf,QACUE,MAD+Ba,EAAhCb,MACQmH,QADwBtG,EAAzBsG,QACUhD,YADetD,EAAhBsD,eAQKb,EAAzB1C,EA3Gc,SAAC,GAOvB,IANLM,EAMI,EANJA,QACApB,EAKI,EALJA,QACAE,EAII,EAJJA,MACAmE,EAGI,EAHJA,YACAD,EAEI,EAFJA,iBACAiD,EACI,EADJA,QACI,EACcxH,mBAAS,IAApByH,EADH,sBAEezH,mBAAS,IAArB0H,EAFH,sBAGgB1H,mBAAS,IAAtBiF,EAHH,sBAIYjF,mBAAS,IAAlB2H,EAJH,oBAKJnG,qBAAU,WACJnB,GACFoB,IAAoBpB,MAClBA,EACA,oBACA,IACA,KACA,KACA,IAGCF,GAAuB,wBAAZqH,GACd/F,IAAoBf,QAClB,aACA,6BACA,IACA,KACA,KACA,MAGH,CAACP,EAASE,EAAOmH,IAEpB,IAAM7F,EAAgB,CACpB8F,UACAC,WACAzC,YACA0C,SAgBF,OACE,cAACC,EAAA,EAAD,CAAKpI,UAAU,QAAf,SACE,cAAC,IAAD,CAAOoC,IAAI,KAAKC,GAAG,IAAIrC,UAAU,wCAAjC,SACE,eAAC,SAAD,WACE,cAAC,EAAD,CACEA,UAAU,yBACV+F,YAAY,EACZC,YApBU,SAACK,EAAUM,GAC7BA,EAAKN,EAAS9D,OAqBR,eAAC,QAAD,WACE,cAAC,OAAD,CAAMA,GAAG,eAAT,SACE,cAAC,EAAD,CACEwC,iBAAkBA,EAClBhD,QAASA,EACTiD,YAAaA,EACb7C,cAAeA,EACfxB,QAASA,EACTqH,QAASA,MAIb,cAAC,OAAD,CAAMzF,GAAG,YAAT,SACE,cAAC,EAAD,CACEyC,YAAaA,SAKnB,cAACC,EAAA,EAAD,CAAMjF,UAAU,OAAhB,SACE,cAACkF,EAAA,EAAD,UACE,cAAC,EAAD,CACElF,UAAU,sBACV4H,YAzCM,SAACS,EAAUnC,EAAOC,GAEpCA,EAAKI,QAAS,EACVL,EAAMzB,OAAS,GAAKyB,EAAMI,QAAQH,IAGtCkC,KAoCYR,UAAU,OACVC,cAAc","file":"static/js/user-reset-password.dcf6531f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n  withRef: false,\r\n});\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst Colxx = (props) => (\r\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = ({ className }) => (\r\n  <div className={`separator ${className}`} />\r\n);\r\nexport { Colxx, Separator };\r\n","import { useState } from 'react';\r\nimport instance from '../helpers/axiosInstance';\r\nimport { log } from '../helpers/Utils';\r\n\r\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\r\n  const [responseData, setData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const doRequest = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await instance({\r\n        url,\r\n        method,\r\n        headers,\r\n        data,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        if (nextSuccess) {\r\n          nextSuccess();\r\n        }\r\n        setLoading(false);\r\n        setData(response.data.data);\r\n      } else {\r\n        if (nextError) {\r\n          nextError(response.data.error);\r\n        }\r\n        setLoading(false);\r\n        setError(response.data.error);\r\n      }\r\n    } catch (err) {\r\n      log(err);\r\n      setLoading(false);\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  return [doRequest, loading, error, responseData];\r\n};\r\n\r\nexport default useRequest;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { resetPassword } from '../../redux/actions';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n\r\nconst validateNewPassword = (values) => {\r\n  const { newPassword, newPasswordAgain } = values;\r\n  const errors = {};\r\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\r\n    errors.newPasswordAgain = 'Please check your new password';\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst ResetPassword = ({\r\n  location,\r\n  history,\r\n  loading,\r\n  error,\r\n  resetPasswordAction,\r\n}) => {\r\n  const [newPassword] = useState('');\r\n  const [newPasswordAgain] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.warning(\r\n        error,\r\n        'Forgot Password Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    } else if (!loading && newPassword === 'success')\r\n      NotificationManager.success(\r\n        'Please login with your new password.',\r\n        'Reset Password Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n  }, [error, loading, newPassword]);\r\n\r\n  const onResetPassword = (values) => {\r\n    if (!loading) {\r\n      const params = new URLSearchParams(location.search);\r\n      const oobCode = params.get('oobCode');\r\n      if (oobCode) {\r\n        if (values.newPassword !== '') {\r\n          resetPasswordAction({\r\n            newPassword: values.newPassword,\r\n            resetPasswordCode: oobCode,\r\n            history,\r\n          });\r\n        }\r\n      } else {\r\n        NotificationManager.warning(\r\n          'Please check your email url.',\r\n          'Reset Password Error',\r\n          3000,\r\n          null,\r\n          null,\r\n          ''\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialValues = { newPassword, newPasswordAgain };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please use your e-mail to reset your password. <br />\r\n              If you are not a member, please{' '}\r\n              <NavLink to=\"/register\" className=\"white\">\r\n                register\r\n              </NavLink>\r\n              .\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.reset-password\" />\r\n            </CardTitle>\r\n\r\n            <Formik\r\n              validate={validateNewPassword}\r\n              initialValues={initialValues}\r\n              onSubmit={onResetPassword}\r\n            >\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPassword\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password-again\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPasswordAgain\"\r\n                      type=\"password\"\r\n                    />\r\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.newPasswordAgain}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/login\">\r\n                      <IntlMessages id=\"user.login-title\" />\r\n                    </NavLink>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.reset-password-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\r\n  return { newPassword, resetPasswordCode, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  resetPasswordAction: resetPassword,\r\n})(ResetPassword);\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport Countdown, { zeroPad } from 'react-countdown';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { verifyOTP } from '../../redux/actions';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\nimport useRequest from '../../hooks/use-request';\r\n\r\nconst ResendButton = () => {\r\n  const [doRequest] = useRequest({\r\n    url: '/resendOtp',\r\n    method: 'POST',\r\n    data: {\r\n      email: '',\r\n    },\r\n    nextSuccess: () => {\r\n      NotificationManager.success(\r\n        'OTP reset Successful!',\r\n        'Verify OTP Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    },\r\n  });\r\n  const onClick = () => doRequest();\r\n  const renderer = ({ hours, minutes, seconds, completed }) => {\r\n    // Render a countdown\r\n    return (\r\n      <Button\r\n        className=\"btn-shadow btn btn-primary btn-lg mx-2\"\r\n        onClick={completed ? onClick : () => {}}\r\n        disabled={!completed}\r\n      >\r\n        {completed\r\n          ? 'Resend OTP'\r\n          : `${zeroPad(hours)}:${zeroPad(minutes)}:${zeroPad(seconds)}`}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return <Countdown date={Date.now() + 30000} renderer={renderer} />;\r\n};\r\n\r\nconst MemoizedResendOTPButton = memo(ResendButton);\r\n\r\nconst VerifyOTP = ({ history, loading, error, verifyOTPAction }) => {\r\n  const [OTP] = useState('');\r\n\r\n  const onVerifyOTP = (values) => {\r\n    if (values.OTP !== '') {\r\n      verifyOTPAction({ ...values, history });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.error(\r\n        error,\r\n        'OTP Verification Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }, [error]);\r\n\r\n  const initialValues = { OTP };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please enter the OTP sent to your email. <br />\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <span className=\"logo-single\" />\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.verify-otp\" />\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.otp\" />\r\n                    </Label>\r\n                    <Field className=\"form-control\" name=\"OTP\" />\r\n                    {errors.OTP && touched.OTP && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.OTP}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-end align-items-center\">\r\n                    <MemoizedResendOTPButton />\r\n\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.verify-otp-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { OTP, loading, error } = authUser;\r\n  return { OTP, loading, error };\r\n};\r\n\r\nconst mapActionToProps = {\r\n  verifyOTPAction: verifyOTP,\r\n};\r\nexport default connect(mapStateToProps, mapActionToProps)(VerifyOTP);\r\n","import React from 'react';\r\nimport { Formik, Form, Field,useField } from 'formik';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Label,\r\n  Button,\r\n  CardTitle,\r\n} from 'reactstrap';\r\nimport IntlMessages from '../../../helpers/IntlMessages';\r\n\r\nconst validateName = (value) => {\r\n  let error;\r\n  \r\n  if (!value) {\r\n    error = 'Please enter your name';\r\n  } else if (value.length < 2) {\r\n    error = 'Value must be longer than 2 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst MyTextArea = ({ ...props}) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n      <>\r\n         \r\n          <textarea className=\"text-area\" {...field} {...props} />\r\n          {meta.touched && meta.error ? (\r\n              <div className=\"error\">{meta.error}</div>\r\n          ) : null}\r\n      </>\r\n  );\r\n};\r\n\r\nconst ProfileForm = ({\r\n  addProfileAction,\r\n  history,\r\n  currentUser,\r\n  initialValues,\r\n  loading,\r\n}) => {\r\n  const onAddProfile = (values) => {\r\n    const { id, phone_number: phoneNumber } = currentUser;\r\n    const profile = {\r\n      ...values,\r\n      userID: id,\r\n      contactNo: phoneNumber,\r\n    };\r\n\r\n    addProfileAction({ profile, history });\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard-basic-step\">\r\n        <CardTitle className=\"mb-4\">\r\n          <h2 className=\"lead\">\r\n            <IntlMessages id=\"user.profile-form\" />\r\n          </h2>\r\n        </CardTitle>\r\n        <Formik initialValues={initialValues} onSubmit={onAddProfile}>\r\n          {({ errors, touched }) => (\r\n            <Form className=\"av-tooltip tooltip-label-right\">\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"user.org-name\" />\r\n                </Label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  name=\"orgName\"\r\n                  validate={validateName}\r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"user.full-name\" />\r\n                </Label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  name=\"fullName\"\r\n                  validate={validateName}\r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label>\r\n                  <IntlMessages id=\"Contact Number\" />\r\n                </Label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  name=\"contactNo\"\r\n                  \r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                )}\r\n              </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label>\r\n              <IntlMessages id=\"about the organization\" />\r\n            </Label>\r\n           \r\n            <MyTextArea \r\n               className=\"form-control\"\r\n               name=\"about\"\r\n               rows=\"6\"\r\n            />\r\n                  \r\n            {errors.name && touched.name && (\r\n                  <div className=\"invalid-feedback d-block\">{errors.name}</div>\r\n                )}\r\n          </FormGroup>\r\n\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <Button\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={`btn-shadow btn-multiple-state ${\r\n                    loading ? 'show-spinner' : ''\r\n                  }`}\r\n                  size=\"lg\"\r\n                >\r\n                  <span className=\"spinner d-inline-block\">\r\n                    <span className=\"bounce1\" />\r\n                    <span className=\"bounce2\" />\r\n                    <span className=\"bounce3\" />\r\n                  </span>\r\n                  <span className=\"label\">\r\n                    <IntlMessages id=\"forms.submit\" />\r\n                  </span>\r\n                </Button>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { WithWizard } from 'react-albus';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst TopNavigation = ({ className, disableNav, topNavClick }) => {\r\n  const getClassName = (steps, step, index, stepItem) => {\r\n    if (steps.indexOf(step) === index) {\r\n      return 'step-doing';\r\n    }\r\n    if (steps.indexOf(step) > index || stepItem.isDone) {\r\n      stepItem.isDone = true;\r\n      return 'step-done';\r\n    }\r\n    return 'step';\r\n  };\r\n\r\n  const itemClick = (stepItem, push) => {\r\n    if (disableNav) {\r\n      return;\r\n    }\r\n    topNavClick(stepItem, push);\r\n  };\r\n\r\n  return (\r\n    <WithWizard\r\n      render={({ next, previous, step, steps, go, push }) => (\r\n        <ul\r\n          className={`nav nav-tabs ${className}${\r\n            disableNav ? ' disabled' : ''\r\n          }`}\r\n        >\r\n          {steps.map((stepItem, index) => {\r\n            if (!stepItem.hideTopNav) {\r\n              return (\r\n                <li\r\n                  key={`topNavStep_${index}`}\r\n                  className={`nav-item ${getClassName(\r\n                    steps,\r\n                    step,\r\n                    index,\r\n                    stepItem\r\n                  )}`}\r\n                >\r\n                  <NavLink\r\n                    to=\"#\"\r\n                    location={{}}\r\n                    className=\"nav-link\"\r\n                    onClick={() => itemClick(stepItem, push)}\r\n                  >\r\n                    <span>{stepItem.name}</span>\r\n                    <small>{stepItem.desc}</small>\r\n                  </NavLink>\r\n                </li>\r\n              );\r\n            }\r\n            return <span key={`topNavStep_${index}`} />;\r\n          })}\r\n        </ul>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TopNavigation;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, Card, CardBody } from 'reactstrap';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { adminRoot } from '../../../constants/defaultValues';\r\nimport IntlMessages from '../../../helpers/IntlMessages';\r\nimport { getProfileData,getProfileDataAsync } from '../../../helpers/Utils';\r\n\r\nconst ThankYouForm = ({ currentUser }) => {\r\n  const history = useHistory();\r\n  const{ id } = currentUser;\r\n  console.log(id);\r\n  useAsync(getProfileDataAsync,[id]);\r\n  const profileD = getProfileData();\r\n  console.log(profileD);\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard-basic-step text-center\">\r\n        <h2 className=\"mb-2\">\r\n          <IntlMessages id=\"user.content-thanks\" />\r\n        </h2>\r\n        <p className=\"display-4 simple-icon-check\" />\r\n        <p>\r\n          <IntlMessages id=\"user.registered\" />\r\n        </p>\r\n        <Button\r\n          onClick={() => history.push(`${adminRoot}/profile/about`)}\r\n          color=\"primary\"\r\n        >\r\n          Continue\r\n        </Button>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ThankYouForm;\r\n","/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { WithWizard } from 'react-albus';\r\nimport { Button } from 'reactstrap';\r\n\r\nconst BottomNavigation = ({\r\n  className,\r\n  onClickPrev,\r\n  prevLabel,\r\n  onClickNext,\r\n  nextLabel,\r\n  showPrevious = true,\r\n}) => {\r\n  return (\r\n    <WithWizard\r\n      render={({ next, previous, step, steps }) => (\r\n        <div className={`wizard-buttons ${className}`}>\r\n          {showPrevious && (\r\n            <Button\r\n              color=\"primary\"\r\n              className={`mr-1 ${steps.indexOf(step) <= 0 ? 'disabled' : ''}`}\r\n              onClick={() => {\r\n                onClickPrev(previous, steps, step);\r\n              }}\r\n            >\r\n              {prevLabel}\r\n            </Button>\r\n          )}\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            className={\r\n              steps.indexOf(step) >= steps.length - 1 ? 'disabled' : ''\r\n            }\r\n            onClick={() => {\r\n              onClickNext(next, steps, step);\r\n            }}\r\n          >\r\n            {nextLabel}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n};\r\nexport default BottomNavigation;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, CardBody, Row } from 'reactstrap';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { connect } from 'react-redux';\r\nimport { addProfileData } from '../../../redux/actions';\r\nimport { NotificationManager } from '../../../components/common/react-notifications';\r\nimport ProfileForm from './profile-form';\r\nimport { Colxx } from '../../../components/common/CustomBootstrap';\r\nimport TopNavigation from '../../../components/wizard/TopNavigation';\r\nimport ThankYouForm from './thank-you-form';\r\nimport BottomNavigation from '../../../components/wizard/BottomNavigation';\r\n\r\nconst CompleteRegistration = ({\r\n  history,\r\n  loading,\r\n  error,\r\n  currentUser,\r\n  addProfileAction,\r\n  message,\r\n}) => {\r\n  const [orgName] = useState('');\r\n  const [fullName] = useState('');\r\n  const [contactNo] = useState('');\r\n  const [about] = useState('');\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.error(\r\n        error,\r\n        'Profile Add Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n    if (!loading && message === 'profile-add-success') {\r\n      NotificationManager.success(\r\n        'Click next',\r\n        'Profile Added Successfully',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }, [loading, error, message]);\r\n\r\n  const initialValues = {\r\n    orgName,\r\n    fullName,\r\n    contactNo,\r\n    about\r\n  };\r\n\r\n  const topNavClick = (stepItem, push) => {\r\n    push(stepItem.id);\r\n  };\r\n\r\n  const onClickNext = (goToNext, steps, step) => {\r\n    // eslint-disable-next-line no-param-reassign\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"8\" className=\"mx-auto my-auto wizard wizard-default\">\r\n        <Wizard>\r\n          <TopNavigation\r\n            className=\"justify-content-around\"\r\n            disableNav={false}\r\n            topNavClick={topNavClick}\r\n          />\r\n          <Steps>\r\n            <Step id=\"profile-form\">\r\n              <ProfileForm\r\n                addProfileAction={addProfileAction}\r\n                history={history}\r\n                currentUser={currentUser}\r\n                initialValues={initialValues}\r\n                loading={loading}\r\n                message={message}\r\n              />\r\n            </Step>\r\n\r\n            <Step id=\"thank-you\">\r\n              <ThankYouForm \r\n                currentUser={currentUser}\r\n              />\r\n            </Step>\r\n          </Steps>\r\n\r\n          <Card className=\"mt-4\">\r\n            <CardBody>\r\n              <BottomNavigation\r\n                className=\"justify-content-end\"\r\n                onClickNext={onClickNext}\r\n                nextLabel=\"Next\"\r\n                showPrevious={false}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </Wizard>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { loading, error, message, currentUser } = authUser;\r\n  return { loading, error, message, currentUser };\r\n};\r\n\r\nconst mapActionToProps = {\r\n  addProfileAction: addProfileData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(CompleteRegistration);\r\n"],"sourceRoot":""}