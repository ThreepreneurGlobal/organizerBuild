{"version":3,"sources":["hooks/use-request.js","views/app/Challenges/application-view/components/SubmitButton.js"],"names":["useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","connect","authUser","hackathonData","accessToken","currentHackathon","refresh","getAllHackathons","formValues","Authorization","NotificationManager","id","doRequest","requestLoading","className","type","color","onClick","application","about","length","contact","education","experience","online_profiles"],"mappings":"yNA2CeA,IAvCI,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,IAAKC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAAgB,EAC7CC,mBAAS,IADoC,mBACtEC,EADsE,KACxDC,EADwD,OAE/CF,oBAAS,GAFsC,mBAEtEG,EAFsE,KAE7DC,EAF6D,OAGnDJ,mBAAS,IAH0C,mBAGtEK,EAHsE,KAG/DC,EAH+D,KAoC7E,MAAO,CA/BQ,uCAAG,4BAAAC,EAAA,sEAEdD,EAAS,MACTF,GAAW,GAHG,SAISI,YAAS,CAC9Bd,MACAC,SACAE,UACAD,SARY,QAIRa,EAJQ,QAWDb,KAAKc,SACZZ,GACFA,IAEFM,GAAW,GACXF,EAAQO,EAASb,KAAKA,QAElBG,GACFA,EAAUU,EAASb,KAAKS,OAE1BD,GAAW,GACXE,EAASG,EAASb,KAAKS,QAtBX,gDAyBdM,YAAI,EAAD,IACHP,GAAW,GACXE,EAAS,EAAD,IA3BM,yDAAH,qDA+BIH,EAASE,EAAOJ,K,gICyDtBW,uBAXS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAGnC,MAAO,CACLC,YAHsBF,EAAhBE,YAINC,iBAH2CF,EAArCE,iBAINb,QAJ2CW,EAAnBX,QAKxBE,MAL2CS,EAAVT,SASG,CACtCY,QAASC,MADIN,EAvFM,SAAC,GAA0C,IAAxCO,EAAuC,EAAvCA,WAAYJ,EAA2B,EAA3BA,YAAaE,EAAc,EAAdA,QAAc,EACzBxB,YAAW,CAC7CC,IAAK,mBACLC,OAAQ,OACRE,QAAS,CACPuB,cAAeL,GAEjBnB,KAAMuB,EACNrB,YAAa,WACXuB,IAAoBX,QAClB,kCACA,8BACA,IACA,KACA,KACA,IAEFO,EAAQF,EAAaI,EAAWG,KAElCvB,UAAW,SAACM,GACVgB,IAAoBhB,MAClBA,EACA,4BACA,IACA,KACA,KACA,OA1BuD,mBACtDkB,EADsD,KAC3CC,EAD2C,KAoD7D,OACE,cAAC,IAAD,CAAWC,UAAU,cAArB,SACE,eAAC,IAAD,CACEH,GAAG,qBACHI,KAAK,SACLC,MAAM,UACNF,UAAS,wCACPD,EAAiB,eAAiB,IAEpCI,QA9Be,WAEuB,IAAxCT,EAAWU,YAAYC,MAAMC,QACa,IAA1CZ,EAAWU,YAAYG,QAAQD,QACa,IAA5CZ,EAAWU,YAAYI,UAAUF,QACY,IAA7CZ,EAAWU,YAAYK,WAAWH,QACgB,IAAlDZ,EAAWU,YAAYM,gBAAgBJ,OAEvCV,IAAoBhB,MAClB,8CACA,4BACA,IACA,KACA,KACA,IAGFkB,KAMA,UASE,uBAAME,UAAU,yBAAhB,UACE,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,eAElB,sBAAMA,UAAU,QAAhB,SACE,cAAC,IAAD,CAAcH,GAAG","file":"static/js/application-submit-button.2fc4b2ba.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport instance from '../helpers/axiosInstance';\r\nimport { log } from '../helpers/Utils';\r\n\r\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\r\n  const [responseData, setData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const doRequest = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await instance({\r\n        url,\r\n        method,\r\n        headers,\r\n        data,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        if (nextSuccess) {\r\n          nextSuccess();\r\n        }\r\n        setLoading(false);\r\n        setData(response.data.data);\r\n      } else {\r\n        if (nextError) {\r\n          nextError(response.data.error);\r\n        }\r\n        setLoading(false);\r\n        setError(response.data.error);\r\n      }\r\n    } catch (err) {\r\n      log(err);\r\n      setLoading(false);\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  return [doRequest, loading, error, responseData];\r\n};\r\n\r\nexport default useRequest;\r\n","/* eslint-disable prefer-promise-reject-errors */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, FormGroup } from 'reactstrap';\r\nimport { NotificationManager } from '../../../../../components/common/react-notifications';\r\n\r\nimport IntlMessages from '../../../../../helpers/IntlMessages';\r\nimport useRequest from '../../../../../hooks/use-request';\r\nimport { getAllHackathons } from '../../../../../redux/actions';\r\n\r\nconst SubmitButton = ({ formValues, accessToken, refresh }) => {\r\n  const [doRequest, requestLoading] = useRequest({\r\n    url: '/updateHackathon',\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: accessToken,\r\n    },\r\n    data: formValues,\r\n    nextSuccess: () => {\r\n      NotificationManager.success(\r\n        'Hackathon updated successfully!',\r\n        'Hackathon Operation Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n      refresh(accessToken, formValues.id);\r\n    },\r\n    nextError: (error) => {\r\n      NotificationManager.error(\r\n        error,\r\n        'Hackathon Operation Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    },\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    if (\r\n      formValues.application.about.length === 0 ||\r\n      formValues.application.contact.length === 0 ||\r\n      formValues.application.education.length === 0 ||\r\n      formValues.application.experience.length === 0 ||\r\n      formValues.application.online_profiles.length === 0\r\n    ) {\r\n      NotificationManager.error(\r\n        'Please select atleast one from each Section',\r\n        'Hackathon Operation Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    } else {\r\n      doRequest();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormGroup className=\"text-center\">\r\n      <Button\r\n        id=\"submit-application\"\r\n        type=\"submit\"\r\n        color=\"primary\"\r\n        className={`btn-shadow btn-multiple-state ${\r\n          requestLoading ? 'show-spinner' : ''\r\n        }`}\r\n        onClick={handleSubmit}\r\n      >\r\n        <span className=\"spinner d-inline-block\">\r\n          <span className=\"bounce1\" />\r\n          <span className=\"bounce2\" />\r\n          <span className=\"bounce3\" />\r\n        </span>\r\n        <span className=\"label\">\r\n          <IntlMessages id=\"forms.update\" />\r\n        </span>\r\n      </Button>\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser, hackathonData }) => {\r\n  const { accessToken } = authUser;\r\n  const { currentHackathon, loading, error } = hackathonData;\r\n  return {\r\n    accessToken,\r\n    currentHackathon,\r\n    loading,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  refresh: getAllHackathons,\r\n})(SubmitButton);\r\n"],"sourceRoot":""}