{"version":3,"sources":["containers/navs/Breadcrumb.js","hooks/use-request.js","views/app/Challenges/basics-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","quillModules","toolbar","list","indent","quillFormats","connect","authUser","hackathonData","accessToken","currentHackathon","updateAction","updateCurrentHackathon","refresh","getAllHackathons","params","history","useHistory","goBack","useEffect","name","tagline","about","aproximate_participants","max_team_size","venue","console","values","setValues","textQuillStandart","setTextQuillStandart","handleChange","event","key","target","value","Authorization","NotificationManager","wait","push","doRequest","requestLoading","xxs","md","type","onChange","placeholder","theme","val","handleChange1","modules","formats","color","onClick"],"mappings":"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","file":"static/js/challenges-basics-view.ea0382f3.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      {match ? <BreadcrumbItems match={match} /> : null}\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/').filter(Boolean);\n\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import { useState } from 'react';\nimport instance from '../helpers/axiosInstance';\nimport { log } from '../helpers/Utils';\n\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\n  const [responseData, setData] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const doRequest = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await instance({\n        url,\n        method,\n        headers,\n        data,\n      });\n\n      if (response.data.success) {\n        if (nextSuccess) {\n          nextSuccess();\n        }\n        setLoading(false);\n        setData(response.data.data);\n      } else {\n        if (nextError) {\n          nextError(response.data.error);\n        }\n        setLoading(false);\n        setError(response.data.error);\n      }\n    } catch (err) {\n      log(err);\n      setLoading(false);\n      setError(err);\n    }\n  };\n\n  return [doRequest, loading, error, responseData];\n};\n\nexport default useRequest;\n","/* eslint-disable eqeqeq */\n/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport ReactQuill from 'react-quill';\n\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport IntlMessages from '../../../helpers/IntlMessages';\n\nimport { adminRoot } from '../../../constants/defaultValues';\nimport {\n  getAllHackathons,\n  updateCurrentHackathon,\n} from '../../../redux/actions';\nimport { NotificationManager } from '../../../components/common/react-notifications';\nimport useRequest from '../../../hooks/use-request';\nimport { wait } from '../../../helpers/Utils';\n\nimport 'react-quill/dist/quill.snow.css';\n\nconst quillModules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n    [\n      { list: 'ordered' },\n      { list: 'bullet' },\n      { indent: '-1' },\n      { indent: '+1' },\n    ],\n    ['link', 'image'],\n    ['clean'],\n  ],\n};\n\nconst quillFormats = [\n  'header',\n  'bold',\n  'italic',\n  'underline',\n  'strike',\n  'blockquote',\n  'list',\n  'bullet',\n  'indent',\n  'link',\n  'image',\n];\n\nconst Basics = ({\n  match,\n  accessToken,\n  updateAction,\n  currentHackathon,\n  refresh,\n  loading,\n}) => {\n  const { id } = match.params;\n  \n\n  const history = useHistory();\n\n  if (!id) {\n    history.goBack();\n  }\n\n  useEffect(() => {\n    updateAction(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const {\n    name,\n    tagline,\n    about,\n    aproximate_participants,\n    max_team_size,\n    venue,\n  } = currentHackathon;\n  console.log(currentHackathon);\n  const [values, setValues] = useState(() => ({\n    name,\n    venue,\n    tagline,\n    about,\n    aproximate_participants,\n    max_team_size,\n  }));\n\n  useEffect(() => {\n    setValues({\n      name: currentHackathon.name,\n      venue: currentHackathon.venue || '',\n      tagline: currentHackathon.tagline || '',\n      about: currentHackathon.about || '',\n      aproximate_participants: currentHackathon.aproximate_participants,\n      max_team_size: currentHackathon.max_team_size,\n    });\n  }, [currentHackathon]);\n\n  const [textQuillStandart, setTextQuillStandart] = useState(values.about || '');\n\n  const handleChange = (event, key) => {\n    setValues({\n      ...values,\n      [key]: event.target.value,\n    });\n  };\n  const handleChange1 = (val, key) => {\n    setTextQuillStandart(val);\n    setValues({\n      ...values,\n      [key]: val,\n    });\n  };\n\n  const [doRequest, requestLoading] = useRequest({\n    url: '/updateHackathon',\n    method: 'POST',\n    headers: {\n      Authorization: accessToken,\n    },\n    data: { id, ...values },\n    nextSuccess: () => {\n      NotificationManager.success(\n        'Hackathon updated successfully!',\n        'Hackathon Operation Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n      refresh(accessToken, id);\n      wait(1200, () => {\n        history.push(`${adminRoot}/challenges/links/${id}`);\n      });\n    },\n    nextError: (error) => {\n      NotificationManager.error(\n        error,\n        'Hackathon Operation Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    },\n  });\n\n  const handleSubmit = () => {\n    if (\n      values.name === '' ||\n      values.tagline === '' ||\n      values.about === '' ||\n      values.aproximate_participants == 0 ||\n      values.max_team_size == 0\n    ) {\n      NotificationManager.error(\n        'Please enter all the information!',\n        'Hackathon Operation Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else {\n      doRequest();\n    }\n  };\n\n  // setTextQuillStandart(values.about);\n\n  if (loading) return <div className=\"loading\" />;\n\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.basics\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        <Colxx xxs=\"12\" md=\"8\" className=\"mb-4\">\n          <Card className=\"mb-4\">\n            <CardBody>\n              <FormGroup className=\"mb-6\">\n                <Label>\n                  <IntlMessages id=\"challenges.hackathon-name\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"hackathon-name\"\n                  value={values.name}\n                  onChange={(event) => {\n                    handleChange(event, 'name');\n                  }}\n                />\n              </FormGroup>\n\n              <FormGroup className=\"mb-6\">\n                <Label>\n                  <IntlMessages id=\"Venue\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"hackathon-venue\"\n                  value={values.venue}\n                  placeholder=\"Fill if it's a Offline Hackathon\"\n                  onChange={(event) => {\n                    handleChange(event, 'venue');\n                  }}\n                />\n              </FormGroup>\n\n              <FormGroup className=\"mb-6\">\n                <Label>\n                  <IntlMessages id=\"challenges.hackathon-tagline\" />\n                </Label>\n                <Input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"hackathon-tagline\"\n                  value={values.tagline}\n                  onChange={(event) => {\n                    handleChange(event, 'tagline');\n                  }}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <Label>\n                  <IntlMessages id=\"challenges.about\" />\n                </Label>\n                <ReactQuill\n                  theme=\"snow\"\n                  value={textQuillStandart}\n                  onChange={(val) => handleChange1(val, 'about')}\n                  modules={quillModules}\n                  formats={quillFormats}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <Label>\n                  <IntlMessages id=\"challenges.aproximate-participants\" />\n                </Label>\n                <Input\n                  type=\"number\"\n                  className=\"form-control\"\n                  name=\"aproximate-participants\"\n                  value={values.aproximate_participants}\n                  onChange={(event) => {\n                    handleChange(event, 'aproximate_participants');\n                  }}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <Label>\n                  <IntlMessages id=\"challenges.max-team-size\" />\n                </Label>\n                <Input\n                  type=\"number\"\n                  className=\"form-control\"\n                  name=\"max-team-size\"\n                  value={values.max_team_size}\n                  onChange={(event) => {\n                    handleChange(event, 'max_team_size');\n                  }}\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n\n          <FormGroup className=\"text-center\">\n            <Button\n              id=\"submit-basics\"\n              type=\"submit\"\n              color=\"primary\"\n              className={`btn-shadow btn-multiple-state ${\n                requestLoading ? 'show-spinner' : ''\n              }`}\n              onClick={handleSubmit}\n            >\n              <span className=\"spinner d-inline-block\">\n                <span className=\"bounce1\" />\n                <span className=\"bounce2\" />\n                <span className=\"bounce3\" />\n              </span>\n              <span className=\"label\">\n                <IntlMessages id=\"forms.update\" />\n              </span>\n            </Button>\n          </FormGroup>\n        </Colxx>\n      </Row>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ authUser, hackathonData }) => {\n  const { accessToken } = authUser;\n  const { currentHackathon, loading, error } = hackathonData;\n  return {\n    accessToken,\n    currentHackathon,\n    loading,\n    error,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateAction: updateCurrentHackathon,\n  refresh: getAllHackathons,\n})(Basics);\n"],"sourceRoot":""}