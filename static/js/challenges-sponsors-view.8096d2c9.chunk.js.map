{"version":3,"sources":["containers/navs/Breadcrumb.js","hooks/use-request.js","containers/application/InputDisplay.js","components/application/AddSponsorModal.js","components/application/SponsorsList.js","views/app/Challenges/sponsors-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","InputDisplay","messageId","name","value","intputType","type","disabled","proptype","PropTypes","string","isRequired","any","connect","authUser","applicationData","accessToken","sponsors","getSponsorsAction","getSponsors","setOpenAddModal","formData","FormData","hackathon_id","logo","values","setValues","handleUpload","event","append","delete","target","Authorization","NotificationManager","wait","password","doRequest","ModalHeader","IntlMessages","ModalBody","FormGroup","Label","Input","onChange","key","handleChange","InputGroup","CustomInput","accept","files","InputGroupAddon","addonType","Button","outline","title","onClick","ModalFooter","color","useEffect","AppError","Card","CardBody","role","item","Sponsors","params","history","useHistory","openAddModal","Row","xxs","Breadcrumb","md","label","Modal","isOpen","toggle","push"],"mappings":"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","file":"static/js/challenges-sponsors-view.8096d2c9.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { adminRoot } from '../../constants/defaultValues';\r\n\r\nconst getMenuTitle = (sub) => {\r\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub) => {\r\n  return path.split(sub)[0] + sub;\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <>\r\n      {heading && (\r\n        <h1>\r\n          <IntlMessages id={heading} />\r\n        </h1>\r\n      )}\r\n      {match ? <BreadcrumbItems match={match} /> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split('/').filter(Boolean);\r\n\r\n  if (paths[paths.length - 1].indexOf(':') > -1) {\r\n    paths = paths.filter((x) => x.indexOf(':') === -1);\r\n  }\r\n  return (\r\n    <>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import { useState } from 'react';\r\nimport instance from '../helpers/axiosInstance';\r\nimport { log } from '../helpers/Utils';\r\n\r\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\r\n  const [responseData, setData] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const doRequest = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await instance({\r\n        url,\r\n        method,\r\n        headers,\r\n        data,\r\n      });\r\n\r\n      if (response.data.success) {\r\n        if (nextSuccess) {\r\n          nextSuccess();\r\n        }\r\n        setLoading(false);\r\n        setData(response.data.data);\r\n      } else {\r\n        if (nextError) {\r\n          nextError(response.data.error);\r\n        }\r\n        setLoading(false);\r\n        setError(response.data.error);\r\n      }\r\n    } catch (err) {\r\n      log(err);\r\n      setLoading(false);\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  return [doRequest, loading, error, responseData];\r\n};\r\n\r\nexport default useRequest;\r\n","import React from 'react';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nconst InputDisplay = ({ messageId, name, value, intputType = 'text' }) => {\r\n  return (\r\n    <FormGroup className=\"mb-2 mt-4\">\r\n      <Label className=\"lead\">\r\n        <IntlMessages id={messageId} />\r\n      </Label>\r\n\r\n      <Input\r\n        type={intputType}\r\n        className=\"form-control\"\r\n        name={name}\r\n        value={value}\r\n        disabled\r\n      />\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nInputDisplay.proptype = {\r\n  messageId: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n  intputType: PropTypes.string,\r\n};\r\n\r\nexport default InputDisplay;\r\n","/* eslint-disable camelcase */\r\n/* eslint-disable prefer-promise-reject-errors */\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Button,\r\n  CustomInput,\r\n  FormGroup,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Label,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from 'reactstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { wait } from '../../helpers/Utils';\r\nimport useRequest from '../../hooks/use-request';\r\nimport { getSponsors } from '../../redux/actions';\r\nimport { NotificationManager } from '../common/react-notifications';\r\n\r\nconst AddSponsorModel = ({\r\n  setOpenAddModal,\r\n  id,\r\n  accessToken,\r\n  getSponsorsAction,\r\n}) => {\r\n  const formData = new FormData();\r\n  const [values, setValues] = useState({\r\n    hackathon_id: id,\r\n    name: '',\r\n    logo: null,\r\n  });\r\n  \r\n  const handleFileChange = (event) => {\r\n    setValues({ ...values, [event.target.id]: event.target.files[0] });\r\n  };\r\n\r\n  const handleUpload = async (event) => {\r\n    formData.append('hackathon_id', id);\r\n    formData.append('name', values.name);\r\n    formData.delete(event.target.id);\r\n    formData.append(`${event.target.id}`, values[event.target.id]);\r\n  };\r\n\r\n  const handleChange = (event, key, value = false) => {\r\n    setValues({\r\n      ...values,\r\n      [key]: value ? event : event.target.value,\r\n    });\r\n  };\r\n\r\n  const [doRequest, loading] = useRequest({\r\n    url: '/addSponsors',\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n      Authorization: `Bearer ${accessToken}`,                \r\n    },\r\n    data: formData,\r\n    nextSuccess: () => {\r\n      NotificationManager.success(\r\n        'Sponsor added successfully',\r\n        'Application Update Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n      getSponsorsAction(accessToken, id);\r\n      wait(1200, () => {\r\n        setValues({ ...values, password: 'null' });\r\n        setOpenAddModal(false);\r\n      });\r\n    },\r\n    nextError: (error) => {\r\n      NotificationManager.error(\r\n        error,\r\n        'Application Update Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    },\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    doRequest();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader>\r\n        <h2 className=\"lead\">\r\n          <IntlMessages id=\"challenges.modal.application-add-sponsor-title\" />\r\n        </h2>\r\n      </ModalHeader>\r\n\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.sponsor\" />\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            value={values.name}\r\n            onChange={(event) => handleChange(event, 'name')}\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Label>\r\n            <IntlMessages id=\"challenges.modal.sponsor-upload-image\" />\r\n          </Label>\r\n          <InputGroup>\r\n            <CustomInput \r\n              type=\"file\"\r\n              id=\"logo\" \r\n              name=\"customFile\"\r\n              accept=\"image/jpeg, image/jpg, image/png\"\r\n              onChange={handleFileChange}\r\n            />\r\n            <InputGroupAddon addonType=\"append\">\r\n              <Button \r\n                outline\r\n                className=\"trim\" \r\n                id=\"logo\" \r\n                title=\"Upload Image\"\r\n                onClick={handleUpload}\r\n              >\r\n                <i className=\"simple-icon-cloud-upload\" />\r\n              </Button>\r\n            </InputGroupAddon>\r\n          </InputGroup>\r\n        </FormGroup>\r\n      </ModalBody>\r\n\r\n      <ModalFooter>\r\n        <Button\r\n          id=\"add-sponsor-button\"\r\n          color=\"primary\"\r\n          className={`btn-shadow btn-multiple-state ${\r\n            loading ? 'show-spinner' : ''\r\n          }`}\r\n          onClick={() => handleSubmit(values)}\r\n        >\r\n          <span className=\"spinner d-inline-block\">\r\n            <span className=\"bounce1\" />\r\n            <span className=\"bounce2\" />\r\n            <span className=\"bounce3\" />\r\n          </span>\r\n          <span className=\"label\">\r\n            <IntlMessages id=\"challenges.modal.application-add\" />\r\n          </span>\r\n        </Button>\r\n        <Button color=\"danger\" onClick={() => setOpenAddModal(false)}>\r\n          <IntlMessages id=\"challenges.modal.application-cancel\" />\r\n        </Button>\r\n      </ModalFooter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser, applicationData }) => {\r\n  const { accessToken } = authUser;\r\n  const { sponsors, loading, error } = applicationData;\r\n  return { accessToken, sponsors, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSponsorsAction: getSponsors,\r\n})(AddSponsorModel);\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport InputDisplay from '../../containers/application/InputDisplay';\r\nimport AppError from '../../helpers/AppError';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { getSponsors } from '../../redux/actions';\r\n\r\nconst SponsorsList = ({\r\n  id,\r\n  accessToken,\r\n  sponsors,\r\n  loading,\r\n  error,\r\n  getSponsorsAction,\r\n}) => {\r\n  useEffect(() => {\r\n    getSponsorsAction(accessToken, id);\r\n  }, []);\r\n\r\n  if (error) throw new AppError(error);\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"mb-4\">\r\n        <CardBody>\r\n          <h3 className=\"h3\">\r\n            <IntlMessages id=\"challenges.added-sponsors\" />\r\n          </h3>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      {loading ? (\r\n        <div className=\"d-flex justify-content-center m-4\">\r\n          <div className=\"loading\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {sponsors.map((item) => (\r\n            <Card key={item.id} className=\"mb-4\">\r\n              <CardBody>\r\n                <InputDisplay\r\n                  messageId=\"challenges.modal.sponsor\"\r\n                  name=\"challenges-prizes\"\r\n                  value={item.name}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          ))}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser, applicationData }) => {\r\n  const { accessToken } = authUser;\r\n  const { sponsors, loading, error } = applicationData;\r\n  return { accessToken, sponsors, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  getSponsorsAction: getSponsors,\r\n})(SponsorsList);\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CustomInput,\r\n  FormGroup,\r\n  Modal,\r\n  Row,\r\n} from 'reactstrap';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport AddSponsorModel from '../../../components/application/AddSponsorModal';\r\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\r\nimport { adminRoot } from '../../../constants/defaultValues';\r\n\r\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\r\nimport AppError from '../../../helpers/AppError';\r\nimport IntlMessages from '../../../helpers/IntlMessages';\r\nimport SponsorsList from '../../../components/application/SponsorsList';\r\n\r\nconst Sponsors = ({ match }) => {\r\n  const { id } = match.params;\r\n\r\n  if (!id) throw new AppError('Please provide a Hackathon ID');\r\n\r\n  const history = useHistory();\r\n\r\n  const [openAddModal, setOpenAddModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Breadcrumb heading=\"menu.sponsors\" match={match} />\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n\r\n      <Row className=\"justify-content-center\">\r\n        <Colxx xxs=\"12\" md=\"6\">\r\n          <SponsorsList id={id} />\r\n        </Colxx>\r\n\r\n        <Colxx xxs=\"12\" md=\"6\">\r\n          <Card>\r\n            <CardBody>\r\n              <Row className=\"justify-content-center m-2\">\r\n                <Button onClick={() => setOpenAddModal(true)}>\r\n                  <IntlMessages id=\"challenges.add-sponsor-button\" />\r\n                </Button>\r\n              </Row>\r\n\r\n              <Row className=\"justify-content-center m-2\">\r\n                <CustomInput\r\n                  type=\"checkbox\"\r\n                  label={<IntlMessages id=\"challenges.add-sponsor-checkbox\" />}\r\n                />\r\n              </Row>\r\n\r\n              <Modal\r\n                isOpen={openAddModal}\r\n                toggle={() => setOpenAddModal(!openAddModal)}\r\n              >\r\n                <AddSponsorModel setOpenAddModal={setOpenAddModal} id={id} />\r\n              </Modal>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Colxx>\r\n          <FormGroup className=\"text-center\">\r\n            <Button\r\n              color=\"primary\"\r\n              className=\"m-3\"\r\n              onClick={() =>\r\n                history.push(`${adminRoot}/challenges/judges/${id}`)\r\n              }\r\n            >\r\n              <IntlMessages id=\"forms.previous\" />\r\n            </Button>\r\n            <Button\r\n              color=\"primary\"\r\n              className=\"m-3\"\r\n              onClick={() => history.push(`${adminRoot}/challenges/faq/${id}`)}\r\n            >\r\n              <IntlMessages id=\"forms.next\" />\r\n            </Button>\r\n          </FormGroup>\r\n        </Colxx>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sponsors;\r\n"],"sourceRoot":""}