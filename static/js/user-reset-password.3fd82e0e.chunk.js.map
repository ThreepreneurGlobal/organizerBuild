{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","components/wizard/BottomNavigation.js","components/wizard/TopNavigation.js","views/user/reset-password.js","views/user/verify-otp.js","containers/form-validations/FormikFields.js","views/user/complete-registration.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","BottomNavigation","onClickPrev","prevLabel","onClickNext","nextLabel","render","next","previous","step","steps","color","indexOf","onClick","length","TopNavigation","disableNav","topNavClick","getClassName","index","stepItem","isDone","push","go","map","hideTopNav","to","location","itemClick","name","desc","validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","loading","error","resetPasswordAction","resetPassword","history","useState","useEffect","NotificationManager","warning","success","initialValues","xxs","md","id","validate","onSubmit","oobCode","URLSearchParams","search","get","touched","type","size","OTP","verifyOTPAction","verifyOTP","console","log","FormikReactSelect","value","options","isMulti","onChange","onBlur","classNamePrefix","val","validateName","label","disabled","intl","useIntl","forms","createRef","bottomNavHidden","setBottomNavHidden","setLoading","valid","fields","setFields","Row","Card","CardBody","formatMessage","innerRef","FormGroup","Label","IntlMessages","email","setFieldValue","setFieldTouched","reactSelect","Spinner","goToNext","formIndex","form","current","submitForm","then","newFields","setTimeout","goToPrev"],"mappings":"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","file":"static/js/user-reset-password.3fd82e0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n  withRef: false,\r\n});\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst Colxx = (props) => (\r\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = ({ className }) => (\r\n  <div className={`separator ${className}`} />\r\n);\r\nexport { Colxx, Separator };\r\n","/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { WithWizard } from 'react-albus';\r\nimport { Button } from 'reactstrap';\r\n\r\nconst BottomNavigation = ({\r\n  className,\r\n  onClickPrev,\r\n  prevLabel,\r\n  onClickNext,\r\n  nextLabel,\r\n}) => {\r\n  return (\r\n    <WithWizard\r\n      render={({ next, previous, step, steps }) => (\r\n        <div className={`wizard-buttons ${className}`}>\r\n          <Button\r\n            color=\"primary\"\r\n            className={`mr-1 ${steps.indexOf(step) <= 0 ? 'disabled' : ''}`}\r\n            onClick={() => {\r\n              onClickPrev(previous, steps, step);\r\n            }}\r\n          >\r\n            {prevLabel}\r\n          </Button>\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            className={\r\n              steps.indexOf(step) >= steps.length - 1 ? 'disabled' : ''\r\n            }\r\n            onClick={() => {\r\n              onClickNext(next, steps, step);\r\n            }}\r\n          >\r\n            {nextLabel}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n};\r\nexport default BottomNavigation;\r\n","/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { WithWizard } from 'react-albus';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst TopNavigation = ({ className, disableNav, topNavClick }) => {\r\n  const getClassName = (steps, step, index, stepItem) => {\r\n    if (steps.indexOf(step) === index) {\r\n      return 'step-doing';\r\n    }\r\n    if (steps.indexOf(step) > index || stepItem.isDone) {\r\n      stepItem.isDone = true;\r\n      return 'step-done';\r\n    }\r\n    return 'step';\r\n  };\r\n\r\n  const itemClick = (stepItem, push) => {\r\n    if (disableNav) {\r\n      return;\r\n    }\r\n    topNavClick(stepItem, push);\r\n  };\r\n\r\n  return (\r\n    <WithWizard\r\n      render={({ next, previous, step, steps, go, push }) => (\r\n        <ul\r\n          className={`nav nav-tabs ${className}${\r\n            disableNav ? ' disabled' : ''\r\n          }`}\r\n        >\r\n          {steps.map((stepItem, index) => {\r\n            if (!stepItem.hideTopNav) {\r\n              return (\r\n                <li\r\n                  key={`topNavStep_${index}`}\r\n                  className={`nav-item ${getClassName(\r\n                    steps,\r\n                    step,\r\n                    index,\r\n                    stepItem\r\n                  )}`}\r\n                >\r\n                  <NavLink\r\n                    to=\"#\"\r\n                    location={{}}\r\n                    className=\"nav-link\"\r\n                    onClick={() => itemClick(stepItem, push)}\r\n                  >\r\n                    <span>{stepItem.name}</span>\r\n                    <small>{stepItem.desc}</small>\r\n                  </NavLink>\r\n                </li>\r\n              );\r\n            }\r\n            return <span key={`topNavStep_${index}`} />;\r\n          })}\r\n        </ul>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TopNavigation;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { resetPassword } from '../../redux/actions';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n\r\nconst validateNewPassword = (values) => {\r\n  const { newPassword, newPasswordAgain } = values;\r\n  const errors = {};\r\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\r\n    errors.newPasswordAgain = 'Please check your new password';\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst ResetPassword = ({\r\n  location,\r\n  history,\r\n  loading,\r\n  error,\r\n  resetPasswordAction,\r\n}) => {\r\n  const [newPassword] = useState('');\r\n  const [newPasswordAgain] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.warning(\r\n        error,\r\n        'Forgot Password Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    } else if (!loading && newPassword === 'success')\r\n      NotificationManager.success(\r\n        'Please login with your new password.',\r\n        'Reset Password Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n  }, [error, loading, newPassword]);\r\n\r\n  const onResetPassword = (values) => {\r\n    if (!loading) {\r\n      const params = new URLSearchParams(location.search);\r\n      const oobCode = params.get('oobCode');\r\n      if (oobCode) {\r\n        if (values.newPassword !== '') {\r\n          resetPasswordAction({\r\n            newPassword: values.newPassword,\r\n            resetPasswordCode: oobCode,\r\n            history,\r\n          });\r\n        }\r\n      } else {\r\n        NotificationManager.warning(\r\n          'Please check your email url.',\r\n          'Reset Password Error',\r\n          3000,\r\n          null,\r\n          null,\r\n          ''\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialValues = { newPassword, newPasswordAgain };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please use your e-mail to reset your password. <br />\r\n              If you are not a member, please{' '}\r\n              <NavLink to=\"/register\" className=\"white\">\r\n                register\r\n              </NavLink>\r\n              .\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.reset-password\" />\r\n            </CardTitle>\r\n\r\n            <Formik\r\n              validate={validateNewPassword}\r\n              initialValues={initialValues}\r\n              onSubmit={onResetPassword}\r\n            >\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPassword\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password-again\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPasswordAgain\"\r\n                      type=\"password\"\r\n                    />\r\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.newPasswordAgain}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/login\">\r\n                      <IntlMessages id=\"user.login-title\" />\r\n                    </NavLink>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.reset-password-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\r\n  return { newPassword, resetPasswordCode, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  resetPasswordAction: resetPassword,\r\n})(ResetPassword);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport { verifyOTP } from '../../redux/actions';\r\nimport { NotificationManager } from '../../components/common/react-notifications';\r\n\r\nconst VerifyOTP = ({ history, loading, error, verifyOTPAction }) => {\r\n  const [OTP] = useState('');\r\n\r\n  const onVerifyOTP = (values) => {\r\n    if (values.OTP !== '') {\r\n      verifyOTPAction({ ...values, history });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      console.log(error);\r\n      NotificationManager.warning(\r\n        error,\r\n        'OTP Verification Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }, [error]);\r\n\r\n  const initialValues = { OTP };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n            <p className=\"white mb-0\">\r\n              Please enter the OTP sent to your email. <br />\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.verify-otp\" />\r\n            </CardTitle>\r\n\r\n            <Formik initialValues={initialValues} onSubmit={onVerifyOTP}>\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.otp\" />\r\n                    </Label>\r\n                    <Field className=\"form-control\" name=\"OTP\" />\r\n                    {errors.OTP && touched.OTP && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.OTP}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n                  <div className=\"d-flex justify-content-end align-items-center\">\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.verify-otp-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { OTP, loading, error } = authUser;\r\n  return { OTP, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  verifyOTPAction: verifyOTP,\r\n})(VerifyOTP);\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable jsx-a11y/label-has-associated-control */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\n/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable max-classes-per-file */\r\nimport React from 'react';\r\nimport Select from 'react-select';\r\nimport { CustomInput } from 'reactstrap';\r\n\r\nimport TagsInput from 'react-tagsinput';\r\nimport 'react-tagsinput/react-tagsinput.css';\r\nimport Switch from 'rc-switch';\r\nimport 'rc-switch/assets/index.css';\r\n\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst FormikReactSelect = ({\r\n  name,\r\n  value,\r\n  options,\r\n  isMulti,\r\n  className,\r\n  onChange,\r\n  onBlur,\r\n}) => {\r\n  const handleChange = (val) => {\r\n    onChange(name, val);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    onBlur(name, true);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      className={`react-select ${className}`}\r\n      classNamePrefix=\"react-select\"\r\n      options={options}\r\n      isMulti={isMulti}\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      value={value}\r\n    />\r\n  );\r\n};\r\n\r\nconst FormikCheckboxGroup = ({\r\n  name,\r\n  value,\r\n  options,\r\n  inline = false,\r\n  onChange,\r\n  onBlur,\r\n}) => {\r\n  const handleChange = (val) => {\r\n    const valueArray = [...value] || [];\r\n    if (!valueArray.includes(val)) {\r\n      valueArray.push(val);\r\n    } else {\r\n      valueArray.splice(valueArray.indexOf(val), 1);\r\n    }\r\n    onChange(name, valueArray);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    onBlur(name, true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {options.map((child, index) => {\r\n        return (\r\n          <div\r\n            key={`${name}_${child.value}_${index}`}\r\n            className={`position-relative form-check ${\r\n              inline ? 'form-check-inline' : ''\r\n            }`}\r\n          >\r\n            <input\r\n              name={name}\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              onChange={() => handleChange(child.value)}\r\n              onBlur={handleBlur}\r\n              defaultChecked={value.includes(child.value)}\r\n              disabled={child.disabled}\r\n            />\r\n            <label className=\"form-check-label\">{child.label}</label>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nconst FormikCustomCheckboxGroup = ({\r\n  name,\r\n  value,\r\n  options,\r\n  inline = false,\r\n  onChange,\r\n  onBlur,\r\n}) => {\r\n  const handleChange = (val) => {\r\n    const valueArray = [...value] || [];\r\n    if (!valueArray.includes(val)) {\r\n      valueArray.push(val);\r\n    } else {\r\n      valueArray.splice(valueArray.indexOf(val), 1);\r\n    }\r\n    onChange(name, valueArray);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    onBlur(name, true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {options.map((child, index) => {\r\n        return (\r\n          <CustomInput\r\n            key={`${name}_${child.value}_${index}`}\r\n            id={`${name}_${child.value}_${index}`}\r\n            type=\"checkbox\"\r\n            name={child.name}\r\n            label={child.label}\r\n            onChange={() => handleChange(child.value)}\r\n            onBlur={handleBlur}\r\n            checked={value.includes(child.value)}\r\n            disabled={child.disabled}\r\n            inline={inline}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nconst FormikCheckbox = ({ name, value, disabled, label, onChange, onBlur }) => {\r\n  const handleChange = (_event) => {\r\n    onChange(name, !value);\r\n  };\r\n  const handleBlur = () => {\r\n    onBlur(name, true);\r\n  };\r\n  return (\r\n    <div className=\"position-relative form-check form-check-inline\">\r\n      <input\r\n        name={name}\r\n        type=\"checkbox\"\r\n        className=\"form-check-input\"\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        checked={value}\r\n        disabled={disabled}\r\n      />\r\n      <label className=\"form-check-label\">{label}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FormikCustomCheckbox = ({\r\n  name,\r\n  value,\r\n  disabled,\r\n  label,\r\n  onChange,\r\n  onBlur,\r\n}) => {\r\n  const handleChange = (_event) => {\r\n    onChange(name, !value);\r\n  };\r\n  const handleBlur = () => {\r\n    onBlur(name, true);\r\n  };\r\n  return (\r\n    <CustomInput\r\n      type=\"checkbox\"\r\n      id={name}\r\n      name={name}\r\n      label={label}\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      checked={value}\r\n      disabled={disabled}\r\n      inline\r\n    />\r\n  );\r\n};\r\n\r\nconst FormikRadioButtonGroup = ({\r\n  name,\r\n  value,\r\n  options,\r\n  inline = false,\r\n  onChange,\r\n  onBlur,\r\n}) => {\r\n  const handleChange = (val) => {\r\n    onChange(name, val);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    onBlur(name, true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {options.map((child, index) => {\r\n        return (\r\n          <div\r\n            key={`${name}_${child.value}_${index}`}\r\n            className={`position-relative form-check ${\r\n              inline ? 'form-check-inline' : ''\r\n            }`}\r\n          >\r\n            <input\r\n              id={child.value}\r\n              name={name}\r\n              type=\"radio\"\r\n              className=\"form-check-input\"\r\n              onChange={() => handleChange(child.value)}\r\n              onBlur={handleBlur}\r\n              defaultChecked={value === child.value}\r\n              disabled={child.disabled}\r\n            />\r\n            <label className=\"form-check-label\">{child.label}</label>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nconst FormikCustomRadioGroup = ({\r\n  name,\r\n  value,\r\n  options,\r\n  inline = false,\r\n  onChange,\r\n  onBlur,\r\n}) => {\r\n  const handleChange = (val) => {\r\n    onChange(name, val);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    onBlur(name, true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {options.map((child, index) => {\r\n        return (\r\n          <CustomInput\r\n            key={`${name}_${child.value}_${index}`}\r\n            type=\"radio\"\r\n            id={`${name}_${child.value}_${index}`}\r\n            name={child.name}\r\n            label={child.label}\r\n            onChange={() => handleChange(child.value)}\r\n            onBlur={handleBlur}\r\n            checked={value === child.value}\r\n            disabled={child.disabled}\r\n            inline={inline}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nconst FormikTagsInput = ({ name, value, onChange, onBlur }) => {\r\n  const handleChange = (val) => {\r\n    onBlur(name, true);\r\n    onChange(name, val);\r\n  };\r\n\r\n  return <TagsInput name={name} value={value} onChange={handleChange} />;\r\n};\r\n\r\nconst FormikSwitch = ({ name, value, className, onChange, onBlur }) => {\r\n  const handleChange = (val) => {\r\n    onBlur(name, true);\r\n    onChange(name, val);\r\n  };\r\n\r\n  return (\r\n    <Switch\r\n      name={name}\r\n      className={className}\r\n      checked={value}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nconst FormikDatePicker = ({ name, value, className, onChange, onBlur }) => {\r\n  const handleChange = (val) => {\r\n    onChange(name, val);\r\n  };\r\n\r\n  const handleBlur = (_val) => {\r\n    onBlur(name, true);\r\n  };\r\n\r\n  return (\r\n    <DatePicker\r\n      name={name}\r\n      className={className}\r\n      selected={value}\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n    />\r\n  );\r\n};\r\n\r\nexport {\r\n  FormikReactSelect,\r\n  FormikCheckboxGroup,\r\n  FormikCustomCheckboxGroup,\r\n  FormikCheckbox,\r\n  FormikCustomCheckbox,\r\n  FormikRadioButtonGroup,\r\n  FormikCustomRadioGroup,\r\n  FormikTagsInput,\r\n  FormikSwitch,\r\n  FormikDatePicker,\r\n};\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { createRef, useState } from 'react';\r\nimport { Row, Card, CardBody, FormGroup, Label, Spinner } from 'reactstrap';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { connect } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport TopNavigation from '../../components/wizard/TopNavigation';\r\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\r\nimport { FormikReactSelect } from '../../containers/form-validations/FormikFields';\r\n\r\nconst validateName = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your name';\r\n  } else if (value.length < 2) {\r\n    error = 'Value must be longer than 2 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst options = [\r\n  { value: 'food', label: 'Food' },\r\n  { value: 'beingfabulous', label: 'Being Fabulous', disabled: true },\r\n  { value: 'reasonml', label: 'ReasonML' },\r\n  { value: 'unicorns', label: 'Unicorns' },\r\n  { value: 'kittens', label: 'Kittens' },\r\n];\r\n\r\nconst CompleteRegistration = ({\r\n  // history,\r\n  // loading,\r\n\r\n  error,\r\n}) => {\r\n  const intl = useIntl();\r\n\r\n  console.log(error);\r\n  // useEffect(() => {\r\n  //   console.log(loading, error);\r\n  //   if (error) {\r\n  //     console.log(loading, error);\r\n  //     NotificationManager.warning(\r\n  //       error,\r\n  //       'Registration Error',\r\n  //       3000,\r\n  //       null,\r\n  //       null,\r\n  //       ''\r\n  //     );\r\n  //   }\r\n  // }, [loading, error]);\r\n\r\n  const forms = [createRef(null), createRef(null), createRef(null)];\r\n  const [bottomNavHidden, setBottomNavHidden] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [fields, setFields] = useState([\r\n    {\r\n      valid: false,\r\n      name: 'name',\r\n      value: '',\r\n    },\r\n    {\r\n      valid: false,\r\n      name: 'email',\r\n      value: '',\r\n    },\r\n    {\r\n      valid: false,\r\n      name: 'password',\r\n      value: '',\r\n    },\r\n  ]);\r\n\r\n  const asyncLoading = () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const onClickNext = (goToNext, steps, step) => {\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    const formIndex = steps.indexOf(step);\r\n    const form = forms[formIndex].current;\r\n    const { name } = fields[formIndex];\r\n    form.submitForm().then(() => {\r\n      const newFields = [...fields];\r\n\r\n      newFields[formIndex].value = form.values[name];\r\n      newFields[formIndex].valid = !form.errors[name];\r\n      setFields(newFields);\r\n\r\n      if (!form.errors[name] && form.touched[name]) {\r\n        goToNext();\r\n        step.isDone = true;\r\n        if (steps.length - 2 <= steps.indexOf(step)) {\r\n          setBottomNavHidden(true);\r\n          asyncLoading();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onClickPrev = (goToPrev, steps, step) => {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  };\r\n\r\n  // const onClick = (values) => {};\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"8\" className=\"mx-auto my-auto\">\r\n        <Card>\r\n          <CardBody className=\"wizard wizard-default\">\r\n            <Wizard>\r\n              <TopNavigation className=\"justify-content-center\" disableNav />\r\n              <Steps>\r\n                <Step\r\n                  id=\"step1\"\r\n                  name={intl.formatMessage({ id: 'user.fullname' })}\r\n                  desc={intl.formatMessage({ id: 'user.fullname-desc' })}\r\n                >\r\n                  <div className=\"wizard-basic-step\">\r\n                    <Formik\r\n                      innerRef={forms[0]}\r\n                      initialValues={{\r\n                        name: fields[0].value,\r\n                      }}\r\n                      onSubmit={() => {}}\r\n                    >\r\n                      {({ errors, touched }) => (\r\n                        <Form className=\"av-tooltip tooltip-label-right\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              <IntlMessages id=\"user.fullname\" />\r\n                            </Label>\r\n                            <Field\r\n                              className=\"form-control\"\r\n                              name=\"name\"\r\n                              validate={validateName}\r\n                            />\r\n                            {errors.name && touched.name && (\r\n                              <div className=\"invalid-feedback d-block\">\r\n                                {errors.name}\r\n                              </div>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Form>\r\n                      )}\r\n                    </Formik>\r\n                  </div>\r\n                </Step>\r\n                <Step\r\n                  id=\"step2\"\r\n                  name={intl.formatMessage({ id: 'user.rank-skills' })}\r\n                  desc={intl.formatMessage({ id: 'user.rank-skills-desc' })}\r\n                >\r\n                  <div className=\"wizard-basic-step\">\r\n                    <Formik\r\n                      innerRef={forms[1]}\r\n                      initialValues={{\r\n                        email: fields[1].value,\r\n                      }}\r\n                      onSubmit={() => {}}\r\n                    >\r\n                      {({\r\n                        setFieldValue,\r\n                        setFieldTouched,\r\n                        errors,\r\n                        touched,\r\n                      }) => (\r\n                        <Form className=\"av-tooltip tooltip-label-right\">\r\n                          <FormGroup>\r\n                            <FormikReactSelect\r\n                              options={options}\r\n                              onChange={setFieldValue}\r\n                              onBlur={setFieldTouched}\r\n                            >\r\n                              {errors.reactSelect && touched.reactSelect ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.reactSelect}\r\n                                </div>\r\n                              ) : null}\r\n                            </FormikReactSelect>\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <FormikReactSelect\r\n                              options={options}\r\n                              onChange={setFieldValue}\r\n                              onBlur={setFieldTouched}\r\n                            >\r\n                              {errors.reactSelect && touched.reactSelect ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.reactSelect}\r\n                                </div>\r\n                              ) : null}\r\n                            </FormikReactSelect>\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <FormikReactSelect\r\n                              options={options}\r\n                              onChange={setFieldValue}\r\n                              onBlur={setFieldTouched}\r\n                            >\r\n                              {errors.reactSelect && touched.reactSelect ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.reactSelect}\r\n                                </div>\r\n                              ) : null}\r\n                            </FormikReactSelect>\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <FormikReactSelect\r\n                              options={options}\r\n                              onChange={setFieldValue}\r\n                              onBlur={setFieldTouched}\r\n                            >\r\n                              {errors.reactSelect && touched.reactSelect ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.reactSelect}\r\n                                </div>\r\n                              ) : null}\r\n                            </FormikReactSelect>\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <FormikReactSelect\r\n                              options={options}\r\n                              onChange={setFieldValue}\r\n                              onBlur={setFieldTouched}\r\n                            >\r\n                              {errors.reactSelect && touched.reactSelect ? (\r\n                                <div className=\"invalid-feedback d-block\">\r\n                                  {errors.reactSelect}\r\n                                </div>\r\n                              ) : null}\r\n                            </FormikReactSelect>\r\n                          </FormGroup>\r\n                        </Form>\r\n                      )}\r\n                    </Formik>\r\n                  </div>\r\n                </Step>\r\n\r\n                <Step id=\"step4\" hideTopNav>\r\n                  <div className=\"wizard-basic-step text-center pt-3\">\r\n                    {loading ? (\r\n                      <div>\r\n                        <Spinner color=\"primary\" className=\"mb-1\" />\r\n                        <p>\r\n                          <IntlMessages id=\"wizard.async\" />\r\n                        </p>\r\n                      </div>\r\n                    ) : (\r\n                      <div>\r\n                        <h2 className=\"mb-2\">\r\n                          <IntlMessages id=\"wizard.content-thanks\" />\r\n                        </h2>\r\n                        <p>\r\n                          <IntlMessages id=\"wizard.registered\" />\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </Step>\r\n              </Steps>\r\n              <BottomNavigation\r\n                onClickNext={onClickNext}\r\n                onClickPrev={onClickPrev}\r\n                className={`justify-content-between ${\r\n                  bottomNavHidden && 'invisible'\r\n                }`}\r\n                prevLabel={intl.formatMessage({ id: 'user.previous-button' })}\r\n                nextLabel={intl.formatMessage({ id: 'user.next-button' })}\r\n              />\r\n            </Wizard>\r\n          </CardBody>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { loading, error } = authUser;\r\n  return { loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(CompleteRegistration);\r\n"],"sourceRoot":""}