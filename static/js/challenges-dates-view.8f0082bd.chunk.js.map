{"version":3,"sources":["containers/navs/Breadcrumb.js","components/StateButton.js","hooks/use-localstorage.js","views/app/challenges/dates-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","StateButton","color","size","children","onClick","next","useState","status","setStatus","message","setMessage","messageShow","setMessageShow","classnames","then","res","catch","err","finally","setTimeout","disabled","placement","isOpen","target","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","handleStorage","useCallback","event","newValue","setValue","value","valueToStore","Function","setItem","stringify","useEffect","addEventListener","removeEventListener","removeItem","Dates","params","AppError","info","getHackathonInfo","hackathonDataStorageKey","hackathonData","application_start","application_end","hackathon_start","hackathon_date","submission_date","results_date","formValues","setFormValues","dataValues","setData","handleChange","d","getDate","padStart","m","getMonth","y","getFullYear","toJSON","handleSubmit","newData","a","Promise","success","failed","instance","method","url","data","response","updateProfile","xxs","md","dateFormat","selected","Date","onChange","date","placeholderText","showFullMonthYearPicker","type","href"],"mappings":"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","file":"static/js/challenges-dates-view.8f0082bd.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/').filter(Boolean);\n\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import React, { useState } from 'react';\nimport { Button, Popover, PopoverBody } from 'reactstrap';\nimport classnames from 'classnames';\n\nconst StateButton = ({\n  id,\n  className,\n  color,\n  size,\n  children,\n  onClick,\n  next,\n}) => {\n  const [status, setStatus] = useState('default');\n  const [message, setMessage] = useState('');\n  const [messageShow, setMessageShow] = useState(false);\n\n  const handleOnClick = () => {\n    setStatus('processing');\n\n    onClick()\n      .then((res) => {\n        setMessage(res);\n        setStatus('success');\n      })\n      .catch((err) => {\n        setMessage(err);\n        setStatus('fail');\n      })\n      .finally(() => {\n        setMessageShow(true);\n        setTimeout(() => {\n          setStatus('default');\n          setMessageShow(false);\n          if (next) {\n            next();\n          }\n        }, 3000);\n      });\n  };\n\n  return (\n    <span>\n      <Button\n        id={id}\n        className={`btn-multiple-state  ${className}  ${classnames({\n          'show-spinner': status === 'processing',\n          'show-success': status === 'success',\n          'show-fail': status === 'fail',\n        })}`}\n        size={size}\n        color={color}\n        onClick={handleOnClick}\n        disabled={status !== 'default'}\n      >\n        <Popover placement=\"top\" isOpen={messageShow} target={id}>\n          <PopoverBody>{message}</PopoverBody>\n        </Popover>\n        <span className=\"spinner d-inline-block\">\n          <span className=\"bounce1\" />\n          <span className=\"bounce2\" />\n          <span className=\"bounce3\" />\n        </span>\n        <span className=\"icon success\">\n          <i className=\"simple-icon-check\" />\n        </span>\n        <span className=\"icon fail\">\n          <i className=\"simple-icon-exclamation\" />\n        </span>\n        <span className=\"label\">{children}</span>\n      </Button>\n    </span>\n  );\n};\n\nexport default StateButton;\n","/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useEffect, useState } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const handleStorage = useCallback(\n    (event) => {\n      if (event.key === key && event.newValue !== storedValue) {\n        setValue(event.newValue || initialValue);\n      }\n    },\n\n    [storedValue]\n  );\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const newValue = window.localStorage.getItem(key);\n    if (JSON.stringify(storedValue) !== newValue) {\n      setValue(JSON.parse(newValue) || initialValue);\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('storage', handleStorage);\n    return () => window.removeEventListener('storage', handleStorage);\n  }, [handleStorage]);\n\n  const remove = () => {\n    window.localStorage.removeItem(key);\n  };\n\n  return [storedValue, setValue, remove];\n};\n\nexport default useLocalStorage;\n","/* eslint-disable camelcase */\n/* eslint-disable prefer-promise-reject-errors */\nimport React, { useState } from 'react';\nimport { Button, Card, CardBody, CardTitle, FormGroup, Row } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\n\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport {\n  adminRoot,\n  hackathonDataStorageKey,\n} from '../../../constants/defaultValues';\n\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport AppError from '../../../helpers/AppError';\nimport IntlMessages from '../../../helpers/IntlMessages';\n\nimport StateButton from '../../../components/StateButton';\nimport instance from '../../../helpers/axiosInstance';\nimport useLocalStorage from '../../../hooks/use-localstorage';\nimport { getHackathonInfo } from '../../../helpers/Utils';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst Dates = ({ match }) => {\n  const { id } = match.params;\n\n  if (!id) throw new AppError('Please provide a Hackathon ID');\n  const info = getHackathonInfo(id);\n\n  const [hackathonData] = useLocalStorage(\n    `${hackathonDataStorageKey}_${id}`,\n    info\n  );\n\n  const {\n    application_start,\n    application_end,\n    hackathon_start,\n    hackathon_date,\n    submission_date,\n    results_date,\n  } = hackathonData;\n\n  const [formValues, setFormValues] = useState({\n    application_start,\n    application_end,\n    hackathon_start,\n    hackathon_date,\n    submission_date,\n    results_date,\n  });\n\n  const [dataValues, setData] = useState({\n    application_start,\n    application_end,\n    hackathon_start,\n    hackathon_date,\n    submission_date,\n    results_date,\n  });\n\n  const handleChange = (event, key, value) => {\n    setFormValues({\n      ...formValues,\n      [key]: value ? event : event.target.value,\n    });\n\n    const d = `${event.getDate()}`.padStart(2, '0');\n    const m = `${event.getMonth() + 1}`.padStart(2, '0');\n    const y = event.getFullYear();\n\n    setData({\n      ...dataValues,\n      [key]: value ? `${y}-${m}-${d}` : event.target.value.toJSON(),\n    });\n  };\n\n  const handleSubmit = async (newData) => {\n    return new Promise((success, failed) => {\n      const updateProfile = async () => {\n        try {\n          const response = await instance({\n            method: 'POST',\n            url: '/updateHackathon',\n            data: {\n              id,\n              ...newData,\n            },\n          });\n\n          const { data } = response;\n          if (data.success) {\n            success('Hackathon updated successfully!');\n          } else {\n            failed('Failed to update hackathon!');\n          }\n        } catch (error) {\n          failed('Failed to update hackathon!');\n        }\n      };\n      updateProfile();\n    });\n  };\n\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.dates\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n\n      <Row className=\"justify-content-center\">\n        <Colxx xxs=\"12\" md=\"10\" className=\"mb-4\">\n          <Row>\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-application-begins\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <DatePicker\n                      dateFormat=\"dd MMM yyyy\"\n                      selected={formValues.application_start || new Date()}\n                      onChange={(date) =>\n                        handleChange(date, 'application_start', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                      showFullMonthYearPicker\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-application-ends\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <DatePicker\n                      dateFormat=\"dd MMM yyyy\"\n                      selected={formValues.application_end || new Date()}\n                      onChange={(date) =>\n                        handleChange(date, 'application_end', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n          </Row>\n\n          <Row>\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-hackathon-begins\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <DatePicker\n                      dateFormat=\"dd MMM yyyy\"\n                      selected={formValues.hackathon_start || new Date()}\n                      onChange={(date) =>\n                        handleChange(date, 'hackathon_start', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021  \"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.hackthon-hackathon-ends\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <DatePicker\n                      dateFormat=\"dd MMM yyyy\"\n                      selected={formValues.hackathon_date || new Date()}\n                      onChange={(date) =>\n                        handleChange(date, 'hackathon_date', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021  \"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n          </Row>\n\n          <Row>\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.announcement-results\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <DatePicker\n                      dateFormat=\"dd MMM yyyy\"\n                      selected={formValues.results_date || new Date()}\n                      onChange={(date) =>\n                        handleChange(date, 'results_date', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n\n            <Colxx>\n              <Card className=\"mb-4\">\n                <CardBody>\n                  <CardTitle>\n                    <div className=\"lead h4\">\n                      <IntlMessages id=\"challenges.submission-date\" />\n                    </div>\n                  </CardTitle>\n                  <div className=\"form-group mb-4\">\n                    <DatePicker\n                      dateFormat=\"dd MMM yyyy\"\n                      selected={formValues.submission_date || new Date()}\n                      onChange={(date) =>\n                        handleChange(date, 'submission_date', true)\n                      }\n                      placeholderText=\"e.g. 04/02/2021\"\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Colxx>\n          </Row>\n\n          <Colxx>\n            <FormGroup className=\"text-center\">\n              <StateButton\n                id=\"submitLinks\"\n                color=\"primary\"\n                type=\"submit\"\n                onClick={() => handleSubmit(dataValues)}\n              >\n                <IntlMessages id=\"forms.submit\" />\n              </StateButton>\n            </FormGroup>\n          </Colxx>\n        </Colxx>\n      </Row>\n\n      <Row>\n        <Colxx>\n          <FormGroup className=\"text-center\">\n            <Button\n              color=\"primary\"\n              className=\"m-3\"\n              href={`${adminRoot}/challenges/brands/${id}`}\n            >\n              <IntlMessages id=\"forms.previous\" />\n            </Button>\n            <Button\n              color=\"primary\"\n              className=\"m-3\"\n              href={`${adminRoot}/challenges/prizes/${id}`}\n            >\n              <IntlMessages id=\"forms.next\" />\n            </Button>\n          </FormGroup>\n        </Colxx>\n      </Row>\n    </>\n  );\n};\n\nexport default Dates;\n"],"sourceRoot":""}