{"version":3,"sources":["containers/navs/Breadcrumb.js","hooks/use-request.js","containers/application/HackathonCard.js","components/common/CustomSelectInput.js","components/application/AddSDGModal.js","components/application/AddMegaTrendsModal.js","components/application/CreateHackathonModal.js","views/app/Challenges/components/context-menu.js","views/app/Challenges/default-view.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","filter","Boolean","length","indexOf","x","className","map","index","active","to","BreadcrumbContainer","heading","useRequest","url","method","data","headers","nextSuccess","nextError","useState","responseData","setData","loading","setLoading","error","setError","a","instance","response","success","log","getStatusColor","status","getStatusText","submit_status","getTypeText","HackCard","showEdit","name","tagline","hackathon_start","application_end","hackathon_website","hackathon_type_id","otherArray","console","history","useHistory","href","target","rel","sdg_goals","item","src","alt","style","height","$mega_trends","color","pill","outline","onClick","push","CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","SDGItem","checked","setChecked","tooltipOpen","setTooltipOpen","xxs","CardTitle","Button","checkedItems","splice","handleChange","size","includes","Tooltip","placement","isOpen","toggle","AddSDGModal","setOpenAddSdg","values","setValues","items","useEffect","sgdGoals","ModalHeader","IntlMessages","ModalBody","Row","key","ModalFooter","MegaTrendItem","AddMegaTrendsModal","setOpenMegaTrends","mega_trends","megaTrends","INIT_STATE","CreateHackathonModal","setOpenCreateHackathon","accessToken","refresh","openAddSdg","openMegaTrends","organizer_id","label","value","selectedOption","setSelectedOption","Authorization","NotificationManager","wait","doRequest","event","FormGroup","Label","type","placeholder","onChange","components","classNamePrefix","options","hackthonTypeOptions","aria-hidden","Badge","Modal","modalClassName","proptype","Proptypes","func","isRequired","connect","authUser","getAllHackathons","ChallengesContextMenu","onContextMenuClick","borderRadius","action","hackathonData","organizerHackathons","getAllHackathonsAction","getCurrentUser","openCreateHackathon","Breadcrumb","wrapClassName","undefined","sm","md","e"],"mappings":"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","file":"static/js/challenges-default-view.86e3af47.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      {match ? <BreadcrumbItems match={match} /> : null}\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/').filter(Boolean);\n\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","import { useState } from 'react';\nimport instance from '../helpers/axiosInstance';\nimport { log } from '../helpers/Utils';\n\nconst useRequest = ({ url, method, data, headers, nextSuccess, nextError }) => {\n  const [responseData, setData] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const doRequest = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await instance({\n        url,\n        method,\n        headers,\n        data,\n      });\n\n      if (response.data.success) {\n        if (nextSuccess) {\n          nextSuccess();\n        }\n        setLoading(false);\n        setData(response.data.data);\n      } else {\n        if (nextError) {\n          nextError(response.data.error);\n        }\n        setLoading(false);\n        setError(response.data.error);\n      }\n    } catch (err) {\n      log(err);\n      setLoading(false);\n      setError(err);\n    }\n  };\n\n  return [doRequest, loading, error, responseData];\n};\n\nexport default useRequest;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardSubtitle,\n  CardText,\n  CardTitle,\n  Row,\n} from 'reactstrap';\nimport { Separator } from '../../components/common/CustomBootstrap';\nimport { adminRoot } from '../../constants/defaultValues';\nimport IntlMessages from '../../helpers/IntlMessages';\n\nconst getStatusColor = (status) => {\n  if (status === 1) return 'outline-success';\n  if (status === 0 || status === 3) return 'outline-warning';\n  if (status === 2) return 'outline-danger';\n  return '';\n};\n\nconst getStatusText = (submit_status,status) => {\n  if (submit_status === 0) return 'Draft';\n  if (submit_status === 1 && status === 0) return 'Under Review';\n  if (status === 1) return 'Approved';\n  if (status === 2) return 'Rejected';\n  if (status === 3) return 'On-Hold';\n  return '';\n};\n\nconst getTypeText = (status) => {\n  if (status === 0) return 'Online';\n  if (status === 1) return 'Blender';\n  if (status === 2) return 'Offiline';\n  return '';\n};\n\nconst HackCard = ({ data, showEdit = true }) => {\n  const {\n    id,\n    name,\n    tagline,\n    submit_status,\n    hackathon_start,\n    application_end,\n    hackathon_website,\n    hackathon_type_id,\n    otherArray,\n    status\n  } = data;\n  \n  console.log(hackathon_website);\n  const history = useHistory();\n\n  return (\n    <Card>\n      <CardBody>\n        <CardTitle>\n          <p className=\"h2 lead\">\n            <a\n              href={hackathon_website}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"new-tab\"\n            >\n              {name}\n            </a>\n          </p>\n          <CardSubtitle className=\"text-small\">{tagline}</CardSubtitle>\n        </CardTitle>\n\n        <Row className=\"justify-content-center\">\n          {otherArray.sdg_goals.map((item) => (\n            <img\n              key={item.id}\n              src={`/assets/img/sdg/${item.id}.png`}\n              alt={item.name}\n              className=\"list-thumbnail align-self-center m-1 small hackcard-icon\"\n            />\n          ))}\n\n          <div className=\"vertical\" style={{ height: '45px' }} />\n\n          {otherArray.$mega_trends.map((item) => (\n            <img\n              key={item.id}\n              src={`/assets/img/mega-trends/${item.id}.png`}\n              alt={item.name}\n              className=\"list-thumbnail align-self-center m-1 small hackcard-icon\"\n            />\n          ))}\n        </Row>\n\n        <Separator className=\"my-4\" />\n\n        <CardTitle>\n          <IntlMessages id=\"hackcard.application\" />\n          <CardText>{application_end}</CardText>\n        </CardTitle>\n\n        <CardTitle>\n          <IntlMessages id=\"hackcard.hackthon\" />\n          <CardText>{hackathon_start}</CardText>\n        </CardTitle>\n\n        <Separator className=\"mb-4\" />\n\n        <Badge\n          color={getStatusColor(status)}\n          pill\n          outline\n          className=\"mb-3 mr-3\"\n        >\n          {getStatusText(submit_status,status)}\n        </Badge>\n\n        <Badge color=\"outline-primary\" pill className=\"mb-3\">\n          {getTypeText(hackathon_type_id)}\n        </Badge>\n\n        {/* <CardSubtitle className=\"text-small\">\n          <NavLink href={hackathon_website} target=\"_blank\" rel=\"noreferrer\">\n            <IntlMessages id=\"hackcard.view-more\" />\n          </NavLink>\n        </CardSubtitle> */}\n\n        <Row className=\"justify-content-center\">\n          {showEdit && (\n            <Button\n              className=\"m-1\"\n              outline\n              onClick={() => {\n                history.push(`${adminRoot}/challenges/basics/${id}`);\n              }}\n            >\n              <IntlMessages id=\"hackcard.edit-button\" />\n            </Button>\n          )}\n          <Button\n            className=\"m-1\"\n            color=\"primary\"\n            onClick={() => {\n              history.push(`${adminRoot}/challenges/details/${id}`);\n            }}\n          >\n            <IntlMessages id=\"hackcard.view-details-button\" />\n          </Button>\n        </Row>\n\n        {/* <pre>{JSON.stringify(data, null, 2)}</pre> */}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default HackCard;\n","import React from 'react';\nimport { components } from 'react-select';\n\nconst CustomSelectInput = (props) => {\n  const customProps = { ...props };\n  delete customProps.autoCorrect;\n  delete customProps.autoCapitalize;\n  return <components.Input {...customProps} />;\n};\n\nexport default CustomSelectInput;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  CardTitle,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Row,\n  Tooltip,\n} from 'reactstrap';\nimport { sgdGoals } from '../../constants/defaultValues';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { Colxx } from '../common/CustomBootstrap';\n\nconst AddSDGModal = ({ setOpenAddSdg, values, setValues }) => {\n  const [checked, setChecked] = useState([]);\n\n  const handleChange = (items) => {\n    setChecked(items);\n  };\n\n  useEffect(() => {\n    setValues({\n      ...values,\n      sdg_goals: sgdGoals.filter((x) => checked.includes(x.id)),\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checked]);\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.add-sdg-title\" />\n        </h2>\n      </ModalHeader>\n      <ModalBody>\n        <Row className=\"justify-content-center\">\n          {sgdGoals.map((item) => (\n            <SDGItem\n              key={item.key}\n              item={item}\n              checked={checked}\n              setChecked={handleChange}\n            />\n          ))}\n        </Row>\n      </ModalBody>\n      <ModalFooter className=\"justify-content-end\">\n        <Button color=\"secondary\" onClick={() => setOpenAddSdg(false)}>\n          <IntlMessages id=\"challenges.modal.application-add\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nconst SDGItem = ({ item, checked, setChecked }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const handleChange = (data) => {\n    const checkedItems = [...checked];\n    const index = checkedItems.indexOf(data);\n    if (index === -1) {\n      checkedItems.push(data);\n    } else {\n      checkedItems.splice(index, 1);\n    }\n    setChecked(checkedItems);\n  };\n\n  return (\n    <Colxx xxs=\"6\" className=\"d-flex flex-row mb-4\">\n      <img\n        src={`/assets/img/sdg/${item.id}.png`}\n        alt={item.name}\n        className=\"img-thumbnail list-thumbnail align-self-center m-4 small\"\n      />\n      <div className=\"d-flex flex-grow-1 min-width-zero\">\n        <div className=\"pl-0 align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero\">\n          <div className=\"min-width-zero\">\n            <CardTitle\n              className=\"truncate text-small\"\n              id={`sdg_tooltip_${item.id}`}\n            >\n              {item.name}\n            </CardTitle>\n            <Button\n              onClick={() => handleChange(item.id)}\n              size=\"xs\"\n              color={checked.includes(item.id) ? 'success' : 'primary'}\n            >\n              {checked.includes(item.id) ? 'Selected' : 'Select'}\n            </Button>\n\n            <Tooltip\n              placement=\"top\"\n              isOpen={tooltipOpen}\n              target={`sdg_tooltip_${item.id}`}\n              toggle={() => setTooltipOpen(!tooltipOpen)}\n            >\n              {item.name}\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n    </Colxx>\n  );\n};\n\nexport default AddSDGModal;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  CardTitle,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Row,\n  Tooltip,\n} from 'reactstrap';\nimport { megaTrends } from '../../constants/defaultValues';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { Colxx } from '../common/CustomBootstrap';\n\nconst AddMegaTrendsModal = ({ setOpenMegaTrends, values, setValues }) => {\n  const [checked, setChecked] = useState([]);\n\n  const handleChange = (items) => {\n    setChecked(items);\n  };\n\n  useEffect(() => {\n    setValues({\n      ...values,\n      mega_trends: megaTrends.filter((x) => checked.includes(x.id)),\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checked]);\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.add-mega-trends-title\" />\n        </h2>\n      </ModalHeader>\n      <ModalBody>\n        <Row>\n          {megaTrends.map((item) => (\n            <MegaTrendItem\n              key={item.key}\n              item={item}\n              checked={checked}\n              setChecked={handleChange}\n            />\n          ))}\n        </Row>\n      </ModalBody>\n      <ModalFooter className=\"justify-content-end\">\n        <Button color=\"secondary\" onClick={() => setOpenMegaTrends(false)}>\n          <IntlMessages id=\"challenges.modal.application-add\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nconst MegaTrendItem = ({ item, checked, setChecked }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const handleChange = (data) => {\n    const checkedItems = [...checked];\n    const index = checkedItems.indexOf(data);\n    if (index === -1) {\n      checkedItems.push(data);\n    } else {\n      checkedItems.splice(index, 1);\n    }\n    setChecked(checkedItems);\n  };\n\n  return (\n    <Colxx xxs=\"6\" className=\"d-flex flex-row mb-4\">\n      <img\n        src={`/assets/img/mega-trends/${item.id}.png`}\n        alt={item.name}\n        className=\"img-thumbnail list-thumbnail align-self-center m-4 small\"\n      />\n      <div className=\"d-flex flex-grow-1 min-width-zero\">\n        <div className=\"pl-0 align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero\">\n          <div className=\"min-width-zero\">\n            <CardTitle\n              className=\"truncate text-small\"\n              id={`mega_trend_tooltip_${item.id}`}\n            >\n              {item.name}\n            </CardTitle>\n            <Button\n              onClick={() => handleChange(item.id)}\n              size=\"xs\"\n              color={checked.includes(item.id) ? 'success' : 'primary'}\n            >\n              {checked.includes(item.id) ? 'Added' : 'Add'}\n            </Button>\n\n            <Tooltip\n              placement=\"top\"\n              isOpen={tooltipOpen}\n              target={`mega_trend_tooltip_${item.id}`}\n              toggle={() => setTooltipOpen(!tooltipOpen)}\n            >\n              {item.name}\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n    </Colxx>\n  );\n};\n\nexport default AddMegaTrendsModal;\n\n","/* eslint-disable prefer-promise-reject-errors */\nimport React, { useState } from 'react';\nimport Proptypes from 'prop-types';\nimport {\n  Badge,\n  Button,\n  FormGroup,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\nimport Select from 'react-select';\nimport { connect } from 'react-redux';\n\nimport IntlMessages from '../../helpers/IntlMessages';\nimport CustomSelectInput from '../common/CustomSelectInput';\nimport { hackthonTypeOptions } from '../../constants/defaultValues';\nimport AddSDGModal from './AddSDGModal';\nimport AddMegaTrendsModal from './AddMegaTrendsModal';\nimport { getAllHackathons } from '../../redux/actions';\nimport { NotificationManager } from '../common/react-notifications';\n\nimport useRequest from '../../hooks/use-request';\nimport { wait } from '../../helpers/Utils';\n\nconst INIT_STATE = {\n  name: '',\n  hackathon_type_id: 1,\n  sdg_goals: [],\n  mega_trends: [],\n};\n\nconst CreateHackathonModal = ({\n  setOpenCreateHackathon,\n  id,\n  accessToken,\n  refresh,\n}) => {\n  const [openAddSdg, setOpenAddSdg] = useState(false);\n  const [openMegaTrends, setOpenMegaTrends] = useState(false);\n\n  const [values, setValues] = useState({ ...INIT_STATE, organizer_id: id });\n\n  const [selectedOption, setSelectedOption] = useState({\n    label: 'Blender',\n    value: 1,\n    key: 1,\n  });\n\n  const [doRequest, loading] = useRequest({\n    url: '/createHackathon',\n    method: 'POST',\n    headers: {\n      Authorization: accessToken,\n    },\n    data: values,\n    nextSuccess: () => {\n      NotificationManager.success(\n        'Hackathon created successfully!',\n        'Hackathon Create Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n      refresh(accessToken, id);\n      setOpenCreateHackathon(false);\n\n      wait(400, () => {\n        setValues({ ...INIT_STATE, organizer_id: id });\n      });\n    },\n    nextError: (error) => {\n      NotificationManager.error(\n        error,\n        'Hackathon Create Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    },\n  });\n\n  const handleChange = (event, key, value = false) => {\n    setValues({\n      ...values,\n      [key]: value ? event : event.target.value,\n    });\n  };\n\n  const handleSubmit = () => {\n    doRequest();\n  };\n\n  return (\n    <>\n      <ModalHeader>\n        <h2 className=\"lead\">\n          <IntlMessages id=\"challenges.modal.modal-title\" />\n        </h2>\n        <p className=\"m-0\">\n          <IntlMessages id=\"challenges.modal.modal-sub-title\" />\n        </p>\n      </ModalHeader>\n\n      <ModalBody>\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.name\" />\n          </Label>\n          <Input\n            type=\"text\"\n            className=\"form-control\"\n            name=\"link-to-code-of-control\"\n            placeholder=\"Enter a Name\"\n            value={values.name}\n            onChange={(event) => {\n              handleChange(event, 'name');\n            }}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label>\n            <IntlMessages id=\"challenges.modal.hackathon-type\" />\n          </Label>\n          <Select\n            components={{ Input: CustomSelectInput }}\n            className=\"react-select\"\n            classNamePrefix=\"react-select\"\n            name=\"hackathon-type-id\"\n            value={selectedOption}\n            onChange={(data) => {\n              setSelectedOption(data);\n              console.log(data);\n              handleChange(data.value, 'hackathon_type_id', true);\n            }}\n            options={hackthonTypeOptions}\n            placeholder=\"Enter a Hackthon Type\"\n          />\n        </FormGroup>\n        <FormGroup className=\"text-center\">\n          <Button onClick={() => setOpenAddSdg(true)} size=\"xs\" className=\"m-2\">\n            <i className=\"iconsminds-add mr-2\" aria-hidden=\"true\" />\n            <IntlMessages id=\"challenges.modal.add-sdg-button\" />\n          </Button>\n\n          <Button\n            onClick={() => setOpenMegaTrends(true)}\n            size=\"xs\"\n            className=\"m-2\"\n          >\n            <i className=\"iconsminds-add mr-2\" aria-hidden=\"true\" />\n            <IntlMessages id=\"challenges.modal.add-mega-trends-button\" />\n          </Button>\n        </FormGroup>\n\n        <FormGroup>\n          {values.sdg_goals.length ? (\n            <>\n              <Label>SDG Goals</Label>\n              <div className=\"d-flex justify-content-around flex-wrap\">\n                {values.sdg_goals.map((item) => (\n                  <Badge\n                    pill\n                    color=\"outline-primary\"\n                    key={item.id}\n                    className=\"mb-2\"\n                  >\n                    {item.name}\n                  </Badge>\n                ))}\n              </div>\n            </>\n          ) : null}\n        </FormGroup>\n\n        <FormGroup>\n          {values.mega_trends.length ? (\n            <>\n              <Label>Mega Trends</Label>\n              <div className=\"d-flex justify-content-around flex-wrap\">\n                {values.mega_trends.map((item) => (\n                  <Badge\n                    pill\n                    key={item.id}\n                    className=\"mb-2\"\n                    color=\"outline-primary\"\n                  >\n                    {item.name}\n                  </Badge>\n                ))}\n              </div>\n            </>\n          ) : null}\n        </FormGroup>\n\n        <Modal\n          isOpen={openAddSdg}\n          toggle={() => setOpenAddSdg(!openAddSdg)}\n          size=\"lg\"\n        >\n          <AddSDGModal\n            setOpenAddSdg={setOpenAddSdg}\n            values={values}\n            setValues={setValues}\n          />\n        </Modal>\n        <Modal\n          isOpen={openMegaTrends}\n          toggle={() => setOpenMegaTrends(!openMegaTrends)}\n          size=\"lg\"\n          modalClassName=\"rounded\"\n        >\n          <AddMegaTrendsModal\n            setOpenMegaTrends={setOpenMegaTrends}\n            values={values}\n            setValues={setValues}\n          />\n        </Modal>\n      </ModalBody>\n\n      <ModalFooter className=\"justify-content-end\">\n        <Button\n          id=\"create-hackthon\"\n          color=\"primary\"\n          className={`btn-shadow btn-multiple-state ${\n            loading ? 'show-spinner' : ''\n          }`}\n          onClick={handleSubmit}\n        >\n          <span className=\"spinner d-inline-block\">\n            <span className=\"bounce1\" />\n            <span className=\"bounce2\" />\n            <span className=\"bounce3\" />\n          </span>\n          <span className=\"label\">\n            <IntlMessages id=\"challenges.create-hackathon\" />\n          </span>\n        </Button>\n\n        <Button color=\"danger\" onClick={() => setOpenCreateHackathon(false)}>\n          <IntlMessages id=\"challenges.modal.cancel-button\" />\n        </Button>\n      </ModalFooter>\n    </>\n  );\n};\n\nCreateHackathonModal.proptype = {\n  setOpenCreateHackathon: Proptypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { accessToken } = authUser;\n  return { accessToken };\n};\n\nexport default connect(mapStateToProps, {\n  refresh: getAllHackathons,\n})(CreateHackathonModal);\n","import React from 'react';\nimport { ContextMenu, MenuItem } from 'react-contextmenu';\n\nconst ChallengesContextMenu = ({ onContextMenuClick }) => {\n  return (\n    <ContextMenu id=\"challenges_menu\" style={{ borderRadius: '16px' }}>\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'refresh' }}>\n        <i className=\"simple-icon-refresh\" /> <span> Refresh</span>\n      </MenuItem>\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'add-new' }}>\n        <i className=\"simple-icon-plus\" /> <span> Add Hackathon</span>\n      </MenuItem>\n    </ContextMenu>\n  );\n};\n\nexport default ChallengesContextMenu;\n","import React, { useEffect, useState } from 'react';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { connect } from 'react-redux';\nimport { Button, Modal, Row } from 'reactstrap';\n\nimport CreateHackathonModal from '../../../components/application/CreateHackathonModal';\nimport { Colxx, Separator } from '../../../components/common/CustomBootstrap';\nimport HackCard from '../../../containers/application/HackathonCard';\n\nimport Breadcrumb from '../../../containers/navs/Breadcrumb';\nimport IntlMessages from '../../../helpers/IntlMessages';\nimport { getCurrentUser, log } from '../../../helpers/Utils';\n\nimport { getAllHackathons } from '../../../redux/actions';\nimport ChallengesContextMenu from './components/context-menu';\n\nconst DefaultView = ({\n  match,\n  accessToken,\n  organizerHackathons,\n  getAllHackathonsAction,\n  loading,\n}) => {\n  const { id } = getCurrentUser();\n  console.log(id);\n  useEffect(() => {\n    getAllHackathonsAction(accessToken, id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [openCreateHackathon, setOpenCreateHackathon] = useState(false);\n\n  const defaultPage = () => {\n    if (organizerHackathons.length === 0) {\n      return (\n\n        <Row>\n          <Colxx xxs=\"12\">\n            <h2><b> Your hackathons</b></h2>\n            <br />\n            <div className=\"alert alert-primary text-center mb-5 mx-5\">\n              You have<br /><span className=\"display-1\"><b>0</b></span><br />hackathons created!\n            </div>\n          </Colxx>\n        </Row>\n      );\n    }\n    return null;\n  }\n\n  if (loading) return <div className=\"loading\" />;\n\n  const onContextMenuClick = (e, item) => {\n    log('onContextMenuClick - action : ', item.action);\n\n    switch (item.action) {\n      case 'refresh':\n        getAllHackathonsAction(accessToken, id);\n        break;\n\n      case 'add-new':\n        setOpenCreateHackathon(true);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"10\">\n          <Breadcrumb heading=\"menu.challenges\" match={match} />\n        </Colxx>\n\n\n        <Colxx xxs=\"2\">\n          <Button size=\"sm\" onClick={() => setOpenCreateHackathon(true)}>\n            <IntlMessages id=\"challenges.create-hackathon\" />\n          </Button>\n\n          <Modal\n            isOpen={openCreateHackathon}\n            toggle={() => setOpenCreateHackathon(!openCreateHackathon)}\n            wrapClassName=\"modal-right\"\n          >\n            <CreateHackathonModal\n              setOpenCreateHackathon={setOpenCreateHackathon}\n              id={id}\n            />\n          </Modal>\n        </Colxx>\n      </Row>\n\n      <Separator className=\"mb-5\" />\n      {defaultPage()}\n\n      {/* <pre>{JSON.stringify(organizerHackathons, null, 2)}</pre> */}\n\n      <ContextMenuTrigger id=\"challenges_menu\">\n        <Row>\n          <Colxx xxs=\"12\" className=\"mb-4\">\n            <Row className=\"justify-content-start\">\n              {organizerHackathons.map((item) => {\n                if (item.name !== undefined) {\n                  return <Colxx xxs=\"12\" sm=\"6\" md=\"4\" key={item.id} className=\"mb-4\">\n                    <HackCard data={item} showEdit={item.submit_status === 0} />\n                  </Colxx>\n                }\n                return null;\n              })}\n            </Row>\n          </Colxx>\n        </Row>\n      </ContextMenuTrigger>\n      <ChallengesContextMenu onContextMenuClick={onContextMenuClick} />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ authUser, hackathonData }) => {\n  const { accessToken } = authUser;\n  const { organizerHackathons, loading, error } = hackathonData;\n  return { accessToken, organizerHackathons, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  getAllHackathonsAction: getAllHackathons,\n})(DefaultView);\n"],"sourceRoot":""}